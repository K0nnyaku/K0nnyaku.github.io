<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>P4168[Violet]蒲公英</title>
      <link href="/2021/08/21/LG4168%5BViolet%5D%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
      <url>/2021/08/21/LG4168%5BViolet%5D%E8%92%B2%E5%85%AC%E8%8B%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="P4168-Violet-蒲公英"><a href="#P4168-Violet-蒲公英" class="headerlink" title="P4168[Violet]蒲公英"></a><a href="https://www.luogu.com.cn/problem/P4168">P4168[Violet]蒲公英</a></h3><h3 id="分块-前缀和"><a href="#分块-前缀和" class="headerlink" title="分块+前缀和"></a>分块+前缀和</h3><h3 id="块长-sqrt-3-n-比较快-sqrt-n-也能过"><a href="#块长-sqrt-3-n-比较快-sqrt-n-也能过" class="headerlink" title="块长$\sqrt[3]{n}$比较快, $\sqrt{n}$也能过"></a>块长$\sqrt[3]{n}$比较快, $\sqrt{n}$也能过</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(x, y, z) for(int x = y; x &lt; z; x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(x, y, z) for(int x = y; x &gt; z; x--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MB=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> buf[MB+<span class="number">100</span>],*p,*e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==e) p=buf,e=buf+<span class="built_in">fread</span>(buf,<span class="number">1</span>,MB,stdin);</span><br><span class="line"><span class="keyword">return</span> p==e?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) (Turn(A[x]))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXK = <span class="number">4e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], B[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="keyword">int</span> Cnt[MAXK][MAXN], L[MAXN], R[MAXN], Pos[MAXN], Qcnt[MAXK][MAXN];</span><br><span class="line"><span class="keyword">int</span> idx, n, m, len, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Turn</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL </span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    IN &gt;&gt; n &gt;&gt; m; len = <span class="built_in">pow</span>(n, <span class="number">1.0</span> / <span class="number">3.0</span>);</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) IN &gt;&gt; A[i], B[i] = A[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(B+<span class="number">1</span>, B+n+<span class="number">1</span>);</span><br><span class="line">    idx = <span class="built_in">unique</span>(B+<span class="number">1</span>, B+n+<span class="number">1</span>) - B - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r; IN &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        l = (l + x - <span class="number">1</span>) % n + <span class="number">1</span>, r = (r + x - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, x = <span class="built_in">Ask</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Turn</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(B+<span class="number">1</span>, B+idx+<span class="number">1</span>, x) - B; &#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    num = n / len;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) </span><br><span class="line">        L[i] = (i<span class="number">-1</span>) * len + <span class="number">1</span>,</span><br><span class="line">        R[i] = i * len;</span><br><span class="line">    <span class="keyword">if</span>(R[n/len] &lt; n) L[++num] = R[n/len]+<span class="number">1</span>, R[num] = n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) <span class="built_in">IOR</span>(v, L[i], R[i] + <span class="number">1</span>) </span><br><span class="line">        Pos[v] = i, Cnt[i][<span class="built_in">V</span>(v)]++;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) <span class="built_in">IOR</span>(v, <span class="number">1</span>, idx+<span class="number">1</span>) </span><br><span class="line">        Qcnt[i][v] = Qcnt[i<span class="number">-1</span>][v] + Cnt[i][v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Tcnt[MAXN]; <span class="built_in">memset</span>(Tcnt, <span class="number">0</span>, (idx+<span class="number">1</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">int</span> p = Pos[l], q = Pos[r];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(p == q) </span><br><span class="line">        <span class="built_in">IOR</span>(i, l, r+<span class="number">1</span>) Tcnt[<span class="built_in">V</span>(i)]++;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">IOR</span>(v, <span class="number">1</span>, idx+<span class="number">1</span>)</span><br><span class="line">            Tcnt[v] = Qcnt[q<span class="number">-1</span>][v] - Qcnt[p][v], </span><br><span class="line">            Tcnt[v] = Tcnt[v] &gt;= <span class="number">0</span> ? Tcnt[v] : <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">IOR</span>(i, l, R[p]+<span class="number">1</span>) Tcnt[<span class="built_in">V</span>(i)]++;</span><br><span class="line">        <span class="built_in">IOR</span>(i, L[q], r+<span class="number">1</span>) Tcnt[<span class="built_in">V</span>(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mx = <span class="number">0</span>, res = INF;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, idx+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tcnt[i] &gt; mx) mx = Tcnt[i], res = B[i];                                                                                                       </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(Tcnt[i] == mx) res = <span class="built_in">min</span>(res, B[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ3468</title>
      <link href="/2021/08/21/POJ3468/"/>
      <url>/2021/08/21/POJ3468/</url>
      
        <content type="html"><![CDATA[<h3 id="POJ3468"><a href="#POJ3468" class="headerlink" title="POJ3468"></a><a href="http://poj.org/problem?id=3468">POJ3468</a></h3><h3 id="分块模版"><a href="#分块模版" class="headerlink" title="分块模版"></a>分块模版</h3><h3 id="分块的步骤"><a href="#分块的步骤" class="headerlink" title="分块的步骤:"></a>分块的步骤:</h3><ul><li>预处理: <ul><li>每个块的端点$L[MAXK], R[MAXK]$ </li><li>每个位置对应的块 $Pos[MAXN]$</li><li>每个块内的信息(这道题是区间和$Q[MAXK]$,和加标记$Add[MAXK]$)</li></ul></li><li>修改:<ul><li>当整个区间位于一个块内, 暴力处理</li><li>否则, 直接修改每个整块, 暴力处理左右端点的零散部分</li></ul></li><li>查询同修改</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], Q[MAXN], Add[MAXN];</span><br><span class="line"><span class="keyword">int</span> L[MAXN], R[MAXN], Pos[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q); k = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;A[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre</span>();</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">char</span> opt = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">&#x27;C&#x27;</span>) </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;l, &amp;r, &amp;x),</span><br><span class="line">            <span class="built_in">Change</span>(l, r, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r),</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Ask</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, k+<span class="number">1</span>) </span><br><span class="line">        L[i] = (i - <span class="number">1</span>) * k + <span class="number">1</span>,</span><br><span class="line">        R[i] = i * k;</span><br><span class="line">    <span class="keyword">if</span>(R[k] &lt; n) k++, L[k] = R[k<span class="number">-1</span>] + <span class="number">1</span>, R[k] = n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, k+<span class="number">1</span>) </span><br><span class="line">        <span class="built_in">IOR</span>(v, L[i], R[i] + <span class="number">1</span>) Q[i] += A[v], Pos[v] = i; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = Pos[l], q = Pos[r];</span><br><span class="line">    <span class="keyword">if</span>(p == q) &#123;</span><br><span class="line">        <span class="built_in">IOR</span>(i, l, r+<span class="number">1</span>) A[i] += x;</span><br><span class="line">        Q[p] += (r - l + <span class="number">1</span>) * x;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, p+<span class="number">1</span>, q) Add[i] += x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, l, R[p]+<span class="number">1</span>) A[i] += x;</span><br><span class="line">    Q[p] += (R[p] - l + <span class="number">1</span>) * x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, L[q], r+<span class="number">1</span>) A[i] += x;</span><br><span class="line">    Q[q] += (r - L[q] + <span class="number">1</span>) * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p = Pos[l], q = Pos[r];</span><br><span class="line">    <span class="keyword">if</span>(p == q) &#123;</span><br><span class="line">        <span class="built_in">IOR</span>(i, l, r+<span class="number">1</span>) res += A[i];</span><br><span class="line">        res += (r - l + <span class="number">1</span>) * Add[p];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, p+<span class="number">1</span>, q) res += Q[i] + (R[i] - L[i] + <span class="number">1</span>) * Add[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, l, R[p]+<span class="number">1</span>) res += A[i];</span><br><span class="line">    res += Add[p] * (R[p] - l + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, L[q], r+<span class="number">1</span>) res += A[i];</span><br><span class="line">    res += Add[q] * (r - L[q] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF985F</title>
      <link href="/2021/08/20/CF985F/"/>
      <url>/2021/08/20/CF985F/</url>
      
        <content type="html"><![CDATA[<h3 id="CF985F"><a href="#CF985F" class="headerlink" title="CF985F"></a><a href="https://www.luogu.com.cn/problem/CF985F">CF985F</a></h3><h2 id="每种字母分别哈希，-每次询问取出区间内每一种字母的对应值，排序，比对"><a href="#每种字母分别哈希，-每次询问取出区间内每一种字母的对应值，排序，比对" class="headerlink" title="每种字母分别哈希， 每次询问取出区间内每一种字母的对应值，排序，比对"></a>每种字母分别哈希， 每次询问取出区间内每一种字母的对应值，排序，比对</h2><h2 id="数据可能卡ull自然溢出"><a href="#数据可能卡ull自然溢出" class="headerlink" title="数据可能卡ull自然溢出"></a>数据可能卡ull自然溢出</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">13331</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> H[<span class="number">50</span>][MAXN], E[MAXN] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, A+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">E[i] = ((E[i<span class="number">-1</span>] % MOD) * P) % MOD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">H[j][i] = (((H[j][i<span class="number">-1</span>] % MOD) * P) % MOD + (A[i] - <span class="string">&#x27;a&#x27;</span> == j)) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, a, k;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;a, &amp;k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> TF[<span class="number">50</span>], TS[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">TF[i] = (H[i][x+k<span class="number">-1</span>] % MOD - ( (H[i][x<span class="number">-1</span>] % MOD) * (E[k] % MOD) % MOD) + MOD) % MOD;  </span><br><span class="line">TS[i] = (H[i][a+k<span class="number">-1</span>] % MOD - ( (H[i][a<span class="number">-1</span>] % MOD) * (E[k] % MOD) % MOD) + MOD) % MOD;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(TF, TF + <span class="number">26</span>); <span class="built_in">sort</span>(TS, TS + <span class="number">26</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) </span><br><span class="line"><span class="keyword">if</span>(TF[i] != TS[i]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
