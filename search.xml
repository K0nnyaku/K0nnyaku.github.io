<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>POJ_The_Luckiest_Number</title>
      <link href="/2021/09/05/POJ3696_The_Luckiest_Number/"/>
      <url>/2021/09/05/POJ3696_The_Luckiest_Number/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3696">POJ_The_Luckiest_Number</a></p><h3 id="考虑用8构成的数可以表示为-8-10-x-1-9-的形式-问题转化为求最小的-x-满足-L-8-10-x-1-9"><a href="#考虑用8构成的数可以表示为-8-10-x-1-9-的形式-问题转化为求最小的-x-满足-L-8-10-x-1-9" class="headerlink" title="考虑用8构成的数可以表示为$8(10^x - 1)/9$ 的形式, 问题转化为求最小的$x$ 满足$L | 8(10^x - 1) / 9$"></a>考虑用8构成的数可以表示为$8(10^x - 1)/9$ 的形式, 问题转化为求最小的$x$ 满足$L | 8(10^x - 1) / 9$</h3><h3 id="设-d-gcd-L-8"><a href="#设-d-gcd-L-8" class="headerlink" title="设$d = gcd(L, 8)$"></a>设$d = gcd(L, 8)$</h3><h3 id="L-10-x-1-9-Leftrightarrow-frac-9L-d-10-x-1-Leftrightarrow-10-x-equiv-1-pmod-frac-9L-d"><a href="#L-10-x-1-9-Leftrightarrow-frac-9L-d-10-x-1-Leftrightarrow-10-x-equiv-1-pmod-frac-9L-d" class="headerlink" title="$L | (10^x - 1) / 9 \Leftrightarrow \frac{9L}{d} | 10^x - 1 \Leftrightarrow 10^x \equiv 1 \pmod{\frac{9L}{d}}$"></a>$L | (10^x - 1) / 9 \Leftrightarrow \frac{9L}{d} | 10^x - 1 \Leftrightarrow 10^x \equiv 1 \pmod{\frac{9L}{d}}$</h3><h3 id="引理-forall-a-n-in-N-gcd-a-n-1-满足-a-x-equiv-1-pmod-n-的最小正整数-x-0-是-phi-n-的约数"><a href="#引理-forall-a-n-in-N-gcd-a-n-1-满足-a-x-equiv-1-pmod-n-的最小正整数-x-0-是-phi-n-的约数" class="headerlink" title="引理: $\forall a,n\in N^*,; gcd(a, n) = 1$, 满足$a^x \equiv 1 \pmod{n}$的最小正整数$x_0$ 是 $\phi(n)$的约数"></a>引理: $\forall a,n\in N^*,; gcd(a, n) = 1$, 满足$a^x \equiv 1 \pmod{n}$的最小正整数$x_0$ 是 $\phi(n)$的约数</h3><h3 id="证明-反证法-设-x-0-不能整除-phi-n"><a href="#证明-反证法-设-x-0-不能整除-phi-n" class="headerlink" title="证明: 反证法, 设$x_0$不能整除$\phi(n)$"></a>证明: 反证法, 设$x_0$不能整除$\phi(n)$</h3><h3 id="设-phi-n-qx-0-r-0-lt-r-lt-x-0-因为-a-x-0-equiv-1-pmod-n-所以-a-qx-0-equiv-1-pmod-n-因为欧拉定理-有-a-r-equiv-1-pmod-n-0-lt-r-lt-x-0-与-x-0-最小矛盾"><a href="#设-phi-n-qx-0-r-0-lt-r-lt-x-0-因为-a-x-0-equiv-1-pmod-n-所以-a-qx-0-equiv-1-pmod-n-因为欧拉定理-有-a-r-equiv-1-pmod-n-0-lt-r-lt-x-0-与-x-0-最小矛盾" class="headerlink" title="设$\phi(n) = qx_0 + r ;(0 &lt; r &lt; x_0)$, 因为$a^x_0 \equiv 1 \pmod{n}$, 所以$a^{qx_0} \equiv 1 \pmod{n}$, 因为欧拉定理, 有$a^r \equiv 1 \pmod{n}$, $0 &lt; r &lt; x_0$ 与$x_0$最小矛盾"></a>设$\phi(n) = qx_0 + r ;(0 &lt; r &lt; x_0)$, 因为$a^x_0 \equiv 1 \pmod{n}$, 所以$a^{qx_0} \equiv 1 \pmod{n}$, 因为欧拉定理, 有$a^r \equiv 1 \pmod{n}$, $0 &lt; r &lt; x_0$ 与$x_0$最小矛盾</h3><h3 id="所以-枚举-phi-9L-9-的约数求解"><a href="#所以-枚举-phi-9L-9-的约数求解" class="headerlink" title="所以, 枚举$\phi(9L/9)$的约数求解"></a>所以, 枚举$\phi(9L/9)$的约数求解</h3><h3 id="O-sqrt-L-log-L"><a href="#O-sqrt-L-log-L" class="headerlink" title="$O(\sqrt{L}\log{L})$"></a>$O(\sqrt{L}\log{L})$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MB=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> buf[MB+<span class="number">100</span>],*p,*e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==e) p=buf,e=buf+<span class="built_in">fread</span>(buf,<span class="number">1</span>,MB,stdin);</span><br><span class="line"><span class="keyword">return</span> p==e?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> e, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Phi</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Mul</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, idx = <span class="number">1</span>;</span><br><span class="line">    IN &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">9</span> * x / <span class="built_in">Gcd</span>(x, <span class="number">8</span>), phi = <span class="built_in">Phi</span>(mod), sq = <span class="built_in">sqrt</span>(phi);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">Gcd</span>(mod, <span class="number">10</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Case %llu: %d\n&quot;</span>, idx++, <span class="number">0</span>);</span><br><span class="line">            IN &gt;&gt; x;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        priority_queue&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>, vector&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&gt;, greater&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&gt; &gt; Fac;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= sq; i++)</span><br><span class="line">            <span class="keyword">if</span>(!(phi % i)) Fac.<span class="built_in">push</span>(i), Fac.<span class="built_in">push</span>(phi / i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Fac.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t = Fac.<span class="built_in">top</span>(); Fac.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Qp</span>(<span class="number">10</span>, t, mod) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Case %llu: %llu\n&quot;</span>, idx++, t);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        IN &gt;&gt; x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Phi</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> res = x, sq = <span class="built_in">sqrt</span>(x) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">2</span>, sq)</span><br><span class="line">        <span class="keyword">if</span>(!(x % i)) &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(!(x % i)) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1</span>) res = res / x * (x - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? <span class="built_in">Gcd</span>(y, x % y) : x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> e, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!e) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="built_in">Qp</span>(x, e / <span class="number">2</span>, mod) % mod;</span><br><span class="line">    <span class="keyword">return</span> e % <span class="number">2</span> ? <span class="built_in">Mul</span>(<span class="built_in">Mul</span>(res, res, mod), x, mod) : <span class="built_in">Mul</span>(res, res, mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Mul</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line"><span class="comment">//    if(y == 0) return 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="built_in">Mul</span>(x, y / <span class="number">2</span>, mod) % mod;</span><br><span class="line">    <span class="keyword">return</span> y % <span class="number">2</span> ? (res * <span class="number">2</span> + x) % mod : res * <span class="number">2</span> % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG3402可持久化并查集</title>
      <link href="/2021/08/22/LG3402%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2021/08/22/LG3402%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="LG3402"><a href="#LG3402" class="headerlink" title="LG3402"></a><a href="https://www.luogu.com.cn/problem/P3402">LG3402</a></h3><h3 id="注意按秩合并"><a href="#注意按秩合并" class="headerlink" title="注意按秩合并"></a>注意按秩合并</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) Tr[x].lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) Tr[x].rc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span> </span><br><span class="line">    <span class="keyword">int</span> lc, rc, val, size;</span><br><span class="line">    <span class="built_in">Seg</span>() &#123; lc = rc = val = size = <span class="number">0</span>; &#125; </span><br><span class="line">&#125; Tr[MAXN * <span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> Rt[MAXN * <span class="number">40</span>], idx = MAXN;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"><span class="function">Seg* <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function">Seg* <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Copy</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </span><br><span class="line">    Tr[++idx] = Tr[x]; <span class="keyword">return</span> idx; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ver)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindFa</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ver)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">Init</span>(Rt[<span class="number">0</span>], <span class="number">1</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, m+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, a, b;</span><br><span class="line">        IN &gt;&gt; opt;</span><br><span class="line">        Rt[i] = Rt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: IN &gt;&gt; a &gt;&gt; b; <span class="built_in">Union</span>(a, b, i); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: IN &gt;&gt; k; Rt[i] = Rt[k]; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> : IN &gt;&gt; a &gt;&gt; b; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">FindFa</span>(a, i) == <span class="built_in">FindFa</span>(b, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sx = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, x)-&gt;size, sy = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, y)-&gt;size;</span><br><span class="line">    <span class="keyword">if</span>(sx &gt; sy) <span class="built_in">swap</span>(x, y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fy = <span class="built_in">FindFa</span>(y, ver);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Cg</span>(Rt[ver], <span class="number">1</span>, n, <span class="built_in">FindFa</span>(x, ver))-&gt;val = fy;</span><br><span class="line">    <span class="built_in">Cg</span>(Rt[ver], <span class="number">1</span>, n, fy)-&gt;size += sx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindFa</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, x)-&gt;val;</span><br><span class="line">    <span class="keyword">if</span>(fa != x) <span class="keyword">return</span> <span class="built_in">FindFa</span>(fa, ver);</span><br><span class="line">    <span class="keyword">return</span> fa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">Copy</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123; Tr[x].val = l; Tr[x].size = <span class="number">1</span>; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    <span class="built_in">Init</span>(<span class="built_in">LC</span>(x), l, MID); <span class="built_in">Init</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Seg* <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">Copy</span>(x); </span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123; <span class="keyword">return</span> &amp;Tr[x]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= MID) <span class="keyword">return</span> <span class="built_in">Cg</span>(<span class="built_in">LC</span>(x), l, MID, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Cg</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Seg* <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> &amp;Tr[x];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= MID) <span class="keyword">return</span> <span class="built_in">LC</span>(x) ? <span class="built_in">Ask</span>(<span class="built_in">LC</span>(x), l, MID, pos) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">RC</span>(x) ? <span class="built_in">Ask</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r, pos) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 按秩合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG3834主席树(区间第k大)</title>
      <link href="/2021/08/22/LG3834%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7/"/>
      <url>/2021/08/22/LG3834%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="LG3834"><a href="#LG3834" class="headerlink" title="LG3834"></a><a href="https://www.luogu.com.cn/problem/P3834">LG3834</a></h3><h3 id="每插一个数建一个新树"><a href="#每插一个数建一个新树" class="headerlink" title="每插一个数建一个新树"></a>每插一个数建一个新树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xxr yyds</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) Tr[x].lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) Tr[x].rc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span> </span><br><span class="line">    <span class="keyword">int</span> lc, rc, val, size;</span><br><span class="line">    <span class="built_in">Seg</span>() &#123; lc = rc = val = size = <span class="number">0</span>; &#125; </span><br><span class="line">&#125; Tr[MAXN * <span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> Rt[MAXN * <span class="number">40</span>], idx = MAXN;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"><span class="function">Seg* <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function">Seg* <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Copy</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </span><br><span class="line">    Tr[++idx] = Tr[x]; <span class="keyword">return</span> idx; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ver)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindFa</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ver)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">Init</span>(Rt[<span class="number">0</span>], <span class="number">1</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, m+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, a, b;</span><br><span class="line">        IN &gt;&gt; opt;</span><br><span class="line">        Rt[i] = Rt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: IN &gt;&gt; a &gt;&gt; b; <span class="built_in">Union</span>(a, b, i); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: IN &gt;&gt; k; Rt[i] = Rt[k]; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> : IN &gt;&gt; a &gt;&gt; b; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">FindFa</span>(a, i) == <span class="built_in">FindFa</span>(b, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fy = <span class="built_in">FindFa</span>(y, ver), fx = <span class="built_in">FindFa</span>(x, ver);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sx = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, fx)-&gt;size, sy = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, fy)-&gt;size;</span><br><span class="line">    <span class="keyword">if</span>(sx &gt; sy) <span class="built_in">swap</span>(fx, fy), <span class="built_in">swap</span>(sx, sy);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Cg</span>(Rt[ver], <span class="number">1</span>, n, fx)-&gt;val = fy;</span><br><span class="line">    <span class="built_in">Cg</span>(Rt[ver], <span class="number">1</span>, n, fy)-&gt;size += sx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindFa</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, x)-&gt;val;</span><br><span class="line">    <span class="keyword">if</span>(fa != x) <span class="keyword">return</span> <span class="built_in">FindFa</span>(fa, ver);</span><br><span class="line">    <span class="keyword">return</span> fa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">Copy</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123; Tr[x].val = l; Tr[x].size = <span class="number">1</span>; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    <span class="built_in">Init</span>(<span class="built_in">LC</span>(x), l, MID); <span class="built_in">Init</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Seg* <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">Copy</span>(x); </span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123; <span class="keyword">return</span> &amp;Tr[x]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= MID) <span class="keyword">return</span> <span class="built_in">Cg</span>(<span class="built_in">LC</span>(x), l, MID, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Cg</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Seg* <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> &amp;Tr[x];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= MID) <span class="keyword">return</span> <span class="built_in">LC</span>(x) ? <span class="built_in">Ask</span>(<span class="built_in">LC</span>(x), l, MID, pos) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">RC</span>(x) ? <span class="built_in">Ask</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r, pos) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG4178Tree</title>
      <link href="/2021/08/22/LG4178Tree/"/>
      <url>/2021/08/22/LG4178Tree/</url>
      
        <content type="html"><![CDATA[<h3 id="LG4178"><a href="#LG4178" class="headerlink" title="LG4178"></a><a href="https://www.luogu.com.cn/problem/P4178">LG4178</a></h3><h3 id="点分治流程"><a href="#点分治流程" class="headerlink" title="点分治流程"></a>点分治流程</h3><ul><li>找出当前树的重心 rt (Cog 函数)</li><li>求出每个子节点距根的距离 Dep[], 在根的哪一颗子树中 Fa[], (Pre()函数)</li><li>累加答案(Calc函数)<ul><li>两种Calc:</li></ul><ol><li>顺次统计每一颗子树, 用线段树或者平衡树维护每一个值的点的个数</li><li>所有点按距离排序, 指针l, r扫描, 每次累加时减去根相同的点</li></ol></li><li>删除 rt, 对于 原rt的每个子树执行 1 </li></ul><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节:"></a>一些细节:</h3><ul><li>Calc2:<ul><li>rt 也包括在”所有点”中 </li><li>Fa[rt] = rt</li><li>res += r - l + 1 - Cnt[Fa[A[l].pos]]</li><li>执行 Cog时size要取对应的子树的大小</li></ul></li><li>Vis标记删去(即执行过分治)的点</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MB=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> buf[MB+<span class="number">100</span>],*p,*e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==e) p=buf,e=buf+<span class="built_in">fread</span>(buf,<span class="number">1</span>,MB,stdin);</span><br><span class="line"><span class="keyword">return</span> p==e?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">int</span> to, next, val; &#125; E[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> Head[MAXN], idx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> _to, <span class="keyword">int</span> _val)</span> </span>&#123;</span><br><span class="line">    E[++idx] = &#123; _to, Head[pre], _val &#125;; Head[pre] = idx; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Size[MAXN], mxw = INF;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cog</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> last, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Node x, Node y) &#123; <span class="keyword">return</span> x.val &lt; y.val; &#125;</span><br><span class="line">&#125;A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">int</span> Dep[MAXN], Cnt[MAXN], Fa[MAXN];</span><br><span class="line"><span class="keyword">bool</span> Vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, rt, cnt, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wk</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> now, <span class="keyword">int</span> last, <span class="keyword">long</span> <span class="keyword">long</span> dis)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    IN &gt;&gt; n;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">0</span>, n<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w; IN &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        <span class="built_in">Add</span>(u, v, w); <span class="built_in">Add</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    IN &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Cog</span>(<span class="number">1</span>, <span class="number">-1</span>, n);</span><br><span class="line">    <span class="built_in">Wk</span>(rt, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cog</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> last, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">    Size[now] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">EOR</span>(i, now) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">T</span>(i) == last || Vis[<span class="built_in">T</span>(i)]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Cog</span>(<span class="built_in">T</span>(i), now, size);</span><br><span class="line">        Size[now] += Size[<span class="built_in">T</span>(i)];</span><br><span class="line">        w = <span class="built_in">max</span>(w, Size[<span class="built_in">T</span>(i)]);</span><br><span class="line">    &#125;</span><br><span class="line">    w = <span class="built_in">max</span>(w, size - Size[now]);</span><br><span class="line">    <span class="keyword">if</span>(w &lt; mxw) rt = now, mxw = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wk</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>; Vis[now] = <span class="number">1</span>; </span><br><span class="line">    <span class="built_in">memset</span>(Cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> Cnt);</span><br><span class="line">    <span class="built_in">EOR</span>(i, now) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">T</span>(i) == last || Vis[<span class="built_in">T</span>(i)]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Pre</span>(<span class="built_in">T</span>(i), <span class="built_in">T</span>(i), now, <span class="built_in">V</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        printf(&quot;--------------\n&quot;);</span></span><br><span class="line"><span class="comment">//        printf(&quot;!!%d!!\n&quot;, rt);</span></span><br><span class="line"><span class="comment">//        IOR(i, 1, n+1) printf(&quot;%d &quot;, Fa[i]);</span></span><br><span class="line"><span class="comment">//        printf(&quot;\n--------------\n&quot;);</span></span><br><span class="line"></span><br><span class="line">    A[cnt++] = &#123; now, <span class="number">0</span> &#125;; Dep[now] = <span class="number">0</span>; Fa[now] = now; Cnt[now]++;</span><br><span class="line">    ans += <span class="built_in">Calc</span>(now);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">EOR</span>(i, now) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">T</span>(i) == last || Vis[<span class="built_in">T</span>(i)]) <span class="keyword">continue</span>;</span><br><span class="line">        mxw = INF;</span><br><span class="line">        <span class="built_in">Cog</span>(<span class="built_in">T</span>(i), now, Size[<span class="built_in">T</span>(i)]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Wk</span>(rt, now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> now, <span class="keyword">int</span> last, <span class="keyword">long</span> <span class="keyword">long</span> dis)</span> </span>&#123;</span><br><span class="line">    Dep[now] = dis; Fa[now] = rt;</span><br><span class="line">    <span class="built_in">EOR</span>(i, now) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">T</span>(i) == last || Vis[<span class="built_in">T</span>(i)]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Pre</span>(rt, <span class="built_in">T</span>(i), now, dis + <span class="built_in">V</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">    A[cnt++] = &#123; now, dis &#125;; Cnt[Fa[now]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = cnt<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(A, A+cnt);</span><br><span class="line"><span class="comment">//    printf(&quot;\n--------------\n&quot;);</span></span><br><span class="line"><span class="comment">//    printf(&quot;%d\n&quot;, x);</span></span><br><span class="line"><span class="comment">//    IOR(i, 0, cnt) printf(&quot;%d &quot;, A[i].pos); </span></span><br><span class="line"><span class="comment">//    printf(&quot;\n--------------\n&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">while</span>(A[r].val + A[l].val &gt; k &amp;&amp; l &lt; r) r--, Cnt[Fa[A[r+<span class="number">1</span>].pos]]--;</span><br><span class="line">        res += (r - l - Cnt[Fa[A[l].pos]] + <span class="number">1</span>);</span><br><span class="line">        l++; Cnt[Fa[A[l<span class="number">-1</span>].pos]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG4168[Violet]蒲公英</title>
      <link href="/2021/08/21/LG4168%5BViolet%5D%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
      <url>/2021/08/21/LG4168%5BViolet%5D%E8%92%B2%E5%85%AC%E8%8B%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="LG4168-Violet-蒲公英"><a href="#LG4168-Violet-蒲公英" class="headerlink" title="LG4168[Violet]蒲公英"></a><a href="https://www.luogu.com.cn/problem/P4168">LG4168[Violet]蒲公英</a></h3><h3 id="分块-前缀和"><a href="#分块-前缀和" class="headerlink" title="分块+前缀和"></a>分块+前缀和</h3><h3 id="块长-sqrt-3-n-比较快-sqrt-n-也能过"><a href="#块长-sqrt-3-n-比较快-sqrt-n-也能过" class="headerlink" title="块长$\sqrt[3]{n}$比较快, $\sqrt{n}$也能过"></a>块长$\sqrt[3]{n}$比较快, $\sqrt{n}$也能过</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(x, y, z) for(int x = y; x &lt; z; x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(x, y, z) for(int x = y; x &gt; z; x--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MB=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> buf[MB+<span class="number">100</span>],*p,*e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==e) p=buf,e=buf+<span class="built_in">fread</span>(buf,<span class="number">1</span>,MB,stdin);</span><br><span class="line"><span class="keyword">return</span> p==e?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) (Turn(A[x]))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXK = <span class="number">4e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], B[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="keyword">int</span> Cnt[MAXK][MAXN], L[MAXN], R[MAXN], Pos[MAXN], Qcnt[MAXK][MAXN];</span><br><span class="line"><span class="keyword">int</span> idx, n, m, len, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Turn</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL </span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    IN &gt;&gt; n &gt;&gt; m; len = <span class="built_in">pow</span>(n, <span class="number">1.0</span> / <span class="number">3.0</span>);</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) IN &gt;&gt; A[i], B[i] = A[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(B+<span class="number">1</span>, B+n+<span class="number">1</span>);</span><br><span class="line">    idx = <span class="built_in">unique</span>(B+<span class="number">1</span>, B+n+<span class="number">1</span>) - B - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r; IN &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        l = (l + x - <span class="number">1</span>) % n + <span class="number">1</span>, r = (r + x - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, x = <span class="built_in">Ask</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Turn</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(B+<span class="number">1</span>, B+idx+<span class="number">1</span>, x) - B; &#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    num = n / len;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) </span><br><span class="line">        L[i] = (i<span class="number">-1</span>) * len + <span class="number">1</span>,</span><br><span class="line">        R[i] = i * len;</span><br><span class="line">    <span class="keyword">if</span>(R[n/len] &lt; n) L[++num] = R[n/len]+<span class="number">1</span>, R[num] = n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) <span class="built_in">IOR</span>(v, L[i], R[i] + <span class="number">1</span>) </span><br><span class="line">        Pos[v] = i, Cnt[i][<span class="built_in">V</span>(v)]++;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) <span class="built_in">IOR</span>(v, <span class="number">1</span>, idx+<span class="number">1</span>) </span><br><span class="line">        Qcnt[i][v] = Qcnt[i<span class="number">-1</span>][v] + Cnt[i][v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Tcnt[MAXN]; <span class="built_in">memset</span>(Tcnt, <span class="number">0</span>, (idx+<span class="number">1</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">int</span> p = Pos[l], q = Pos[r];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(p == q) </span><br><span class="line">        <span class="built_in">IOR</span>(i, l, r+<span class="number">1</span>) Tcnt[<span class="built_in">V</span>(i)]++;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">IOR</span>(v, <span class="number">1</span>, idx+<span class="number">1</span>)</span><br><span class="line">            Tcnt[v] = Qcnt[q<span class="number">-1</span>][v] - Qcnt[p][v], </span><br><span class="line">            Tcnt[v] = Tcnt[v] &gt;= <span class="number">0</span> ? Tcnt[v] : <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">IOR</span>(i, l, R[p]+<span class="number">1</span>) Tcnt[<span class="built_in">V</span>(i)]++;</span><br><span class="line">        <span class="built_in">IOR</span>(i, L[q], r+<span class="number">1</span>) Tcnt[<span class="built_in">V</span>(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mx = <span class="number">0</span>, res = INF;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, idx+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tcnt[i] &gt; mx) mx = Tcnt[i], res = B[i];                                                                                                       </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(Tcnt[i] == mx) res = <span class="built_in">min</span>(res, B[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ3468</title>
      <link href="/2021/08/21/POJ3468/"/>
      <url>/2021/08/21/POJ3468/</url>
      
        <content type="html"><![CDATA[<h3 id="POJ3468"><a href="#POJ3468" class="headerlink" title="POJ3468"></a><a href="http://poj.org/problem?id=3468">POJ3468</a></h3><h3 id="分块模版"><a href="#分块模版" class="headerlink" title="分块模版"></a>分块模版</h3><h3 id="分块的步骤"><a href="#分块的步骤" class="headerlink" title="分块的步骤:"></a>分块的步骤:</h3><ul><li>预处理: <ul><li>每个块的端点$L[MAXK], R[MAXK]$ </li><li>每个位置对应的块 $Pos[MAXN]$</li><li>每个块内的信息(这道题是区间和$Q[MAXK]$,和加标记$Add[MAXK]$)</li></ul></li><li>修改:<ul><li>当整个区间位于一个块内, 暴力处理</li><li>否则, 直接修改每个整块, 暴力处理左右端点的零散部分</li></ul></li><li>查询同修改</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], Q[MAXN], Add[MAXN];</span><br><span class="line"><span class="keyword">int</span> L[MAXN], R[MAXN], Pos[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q); k = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;A[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre</span>();</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">char</span> opt = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">&#x27;C&#x27;</span>) </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;l, &amp;r, &amp;x),</span><br><span class="line">            <span class="built_in">Change</span>(l, r, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r),</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Ask</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, k+<span class="number">1</span>) </span><br><span class="line">        L[i] = (i - <span class="number">1</span>) * k + <span class="number">1</span>,</span><br><span class="line">        R[i] = i * k;</span><br><span class="line">    <span class="keyword">if</span>(R[k] &lt; n) k++, L[k] = R[k<span class="number">-1</span>] + <span class="number">1</span>, R[k] = n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, k+<span class="number">1</span>) </span><br><span class="line">        <span class="built_in">IOR</span>(v, L[i], R[i] + <span class="number">1</span>) Q[i] += A[v], Pos[v] = i; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = Pos[l], q = Pos[r];</span><br><span class="line">    <span class="keyword">if</span>(p == q) &#123;</span><br><span class="line">        <span class="built_in">IOR</span>(i, l, r+<span class="number">1</span>) A[i] += x;</span><br><span class="line">        Q[p] += (r - l + <span class="number">1</span>) * x;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, p+<span class="number">1</span>, q) Add[i] += x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, l, R[p]+<span class="number">1</span>) A[i] += x;</span><br><span class="line">    Q[p] += (R[p] - l + <span class="number">1</span>) * x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, L[q], r+<span class="number">1</span>) A[i] += x;</span><br><span class="line">    Q[q] += (r - L[q] + <span class="number">1</span>) * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p = Pos[l], q = Pos[r];</span><br><span class="line">    <span class="keyword">if</span>(p == q) &#123;</span><br><span class="line">        <span class="built_in">IOR</span>(i, l, r+<span class="number">1</span>) res += A[i];</span><br><span class="line">        res += (r - l + <span class="number">1</span>) * Add[p];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, p+<span class="number">1</span>, q) res += Q[i] + (R[i] - L[i] + <span class="number">1</span>) * Add[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, l, R[p]+<span class="number">1</span>) res += A[i];</span><br><span class="line">    res += Add[p] * (R[p] - l + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, L[q], r+<span class="number">1</span>) res += A[i];</span><br><span class="line">    res += Add[q] * (r - L[q] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF985F</title>
      <link href="/2021/08/20/CF985F/"/>
      <url>/2021/08/20/CF985F/</url>
      
        <content type="html"><![CDATA[<h3 id="CF985F"><a href="#CF985F" class="headerlink" title="CF985F"></a><a href="https://www.luogu.com.cn/problem/CF985F">CF985F</a></h3><h2 id="每种字母分别哈希，-每次询问取出区间内每一种字母的对应值，排序，比对"><a href="#每种字母分别哈希，-每次询问取出区间内每一种字母的对应值，排序，比对" class="headerlink" title="每种字母分别哈希， 每次询问取出区间内每一种字母的对应值，排序，比对"></a>每种字母分别哈希， 每次询问取出区间内每一种字母的对应值，排序，比对</h2><h2 id="数据可能卡ull自然溢出"><a href="#数据可能卡ull自然溢出" class="headerlink" title="数据可能卡ull自然溢出"></a>数据可能卡ull自然溢出</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">13331</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> H[<span class="number">50</span>][MAXN], E[MAXN] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, A+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">E[i] = ((E[i<span class="number">-1</span>] % MOD) * P) % MOD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">H[j][i] = (((H[j][i<span class="number">-1</span>] % MOD) * P) % MOD + (A[i] - <span class="string">&#x27;a&#x27;</span> == j)) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, a, k;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;a, &amp;k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> TF[<span class="number">50</span>], TS[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">TF[i] = (H[i][x+k<span class="number">-1</span>] % MOD - ( (H[i][x<span class="number">-1</span>] % MOD) * (E[k] % MOD) % MOD) + MOD) % MOD;  </span><br><span class="line">TS[i] = (H[i][a+k<span class="number">-1</span>] % MOD - ( (H[i][a<span class="number">-1</span>] % MOD) * (E[k] % MOD) % MOD) + MOD) % MOD;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(TF, TF + <span class="number">26</span>); <span class="built_in">sort</span>(TS, TS + <span class="number">26</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) </span><br><span class="line"><span class="keyword">if</span>(TF[i] != TS[i]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
