<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AcWing139 最长回文子串</title>
      <link href="/2021/11/19/AcWing139%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>/2021/11/19/AcWing139%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing139"><a href="#AcWing139" class="headerlink" title="AcWing139"></a><a href="https://www.acwing.com/problem/content/141/">AcWing139</a></h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(x,y,z) for(int x = y; x &lt;= z; x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(x,y,z) for(int x = y; x &lt; z; x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(x,y,z) for(int x = y; x &gt;= z; x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(x,y,z) for(int x = y-1; x &gt;= z; x--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, 0, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> &#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T &amp;x) &#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>()) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c);  c = <span class="built_in">getchar</span>()) x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">2e6</span> + <span class="number">20</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> E[N_];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HashS</span> &#123;</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> F[N_];</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> P;</span><br><span class="line"><span class="built_in">HashS</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> P_ = <span class="number">13331</span>) &#123; <span class="built_in">FL</span>(F, <span class="number">0</span>); <span class="built_in">FL</span>(E, <span class="number">0</span>); E[<span class="number">0</span>] = <span class="number">1</span>; P = P_; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">char</span> *S, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">1</span>, N_)  E[i] = E[i<span class="number">-1</span>] * P;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, len) F[i] = F[i<span class="number">-1</span>] * P + S[i] - <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> F[r] - F[l<span class="number">-1</span>] * E[r - l + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> P_ = <span class="number">13331</span>)</span> </span>&#123; <span class="built_in">FL</span>(F, <span class="number">0</span>); <span class="built_in">FL</span>(E, <span class="number">0</span>); E[<span class="number">0</span>] = <span class="number">1</span>; P = P_; &#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;<span class="keyword">operator</span>[](<span class="keyword">int</span> x) &#123; <span class="keyword">return</span> F[x]; &#125;</span><br><span class="line">&#125; I, G;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> idx;</span><br><span class="line"><span class="keyword">char</span> S[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line">S[++len] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">S[++len] = ch, S[++len] = <span class="string">&#x27;$&#x27;</span>;</span><br><span class="line">ch = <span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ch == <span class="string">&#x27;E&#x27;</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">I.<span class="built_in">Init</span>(S, len);</span><br><span class="line"><span class="built_in">reverse</span>(S+<span class="number">1</span>, S+<span class="number">1</span>+len);</span><br><span class="line">G.<span class="built_in">Init</span>(S, len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, len) &#123;</span><br><span class="line"><span class="keyword">if</span>(i - ans &lt; <span class="number">1</span> || i + ans &gt; len) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span>(i-ans<span class="number">-1</span> &gt;= <span class="number">1</span> &amp;&amp; i+ans+<span class="number">1</span> &lt;= len </span><br><span class="line">      &amp;&amp; I.<span class="built_in">Ask</span>(i-ans<span class="number">-1</span>, i) == G.<span class="built_in">Ask</span>(len-i-ans, len-i+<span class="number">1</span>)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case %d: %d\n&quot;</span>, ++idx, ans);</span><br><span class="line"></span><br><span class="line"><span class="built_in">FL</span>(S, <span class="number">0</span>);</span><br><span class="line">I.<span class="built_in">Cl</span>(); G.<span class="built_in">Cl</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> Hash </tag>
            
            <tag> 回文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing407 Steady Cow Assignment G</title>
      <link href="/2021/11/16/AcWing407SteadyCowAssignmentG/"/>
      <url>/2021/11/16/AcWing407SteadyCowAssignmentG/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing407"><a href="#AcWing407" class="headerlink" title="AcWing407"></a><a href="https://www.acwing.com/problem/content/409/">AcWing407</a></h3><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e3</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">20</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M&lt;&lt;<span class="number">1</span>], To[M&lt;&lt;<span class="number">1</span>], I[N], H[N]; <span class="keyword">int</span> cnt;</span><br><span class="line">T C[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); <span class="built_in">FL</span>(H, <span class="number">0</span>); <span class="built_in">FL</span>(C, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdI</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T c)</span> </span>&#123;</span><br><span class="line">Nt[++cnt] = I[u]; C[cnt] = c; To[I[u]=cnt] = v;</span><br><span class="line">Nt[++cnt] = I[v]; C[cnt] = <span class="number">0</span>; To[I[v]=cnt] = u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); <span class="built_in">FL</span>(H, <span class="number">0</span>); <span class="built_in">FL</span>(C, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;<span class="keyword">int</span>, N_+M_, N_*M_&gt; I; </span><br><span class="line"><span class="keyword">int</span> Lm[N_], A[N_][M_], Far[N_+M_];</span><br><span class="line"><span class="keyword">int</span> n, m, s, t;</span><br><span class="line"><span class="keyword">bool</span> Vq[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fl)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Hg</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Ck</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="comment">//freopen(&quot;I:/Code/Data/In.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/P2857_4.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, <span class="number">1</span>, m) IN &gt;&gt; A[i][v];</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m)IN &gt;&gt; Lm[i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = INF;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">1</span>, r = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line"><span class="keyword">bool</span> fg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!(fg = <span class="built_in">Ck</span>(l, r)) &amp;&amp; r &lt; m) r++;</span><br><span class="line"><span class="keyword">if</span>(fg) ans = <span class="built_in">min</span>(ans, r - l + <span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">while</span>(++l &lt;= m);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Hg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; Q; Q.<span class="built_in">push</span>(s);</span><br><span class="line">    <span class="built_in">FL</span>(Far, <span class="number">0</span>); Far[s] = <span class="number">1</span>; </span><br><span class="line">I.H[s] = I.I[s]; </span><br><span class="line"><span class="keyword">while</span>(Q.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> tp = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="built_in">ER</span>(i,v,I,tp,I) <span class="keyword">if</span>(!Far[v] &amp;&amp; I.C[i]) &#123;</span><br><span class="line">Far[v] = Far[tp]+<span class="number">1</span>, I.H[v] = I.I[v], Q.<span class="built_in">push</span>(v);</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fl)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == t) <span class="keyword">return</span> fl;</span><br><span class="line"><span class="keyword">int</span> res = fl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = I.H[x], v = I.To[i]; i; i = I.Nt[i], v = I.To[i]) </span><br><span class="line"><span class="keyword">if</span>(I.C[i] &amp;&amp; Far[v] == Far[x] + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">Dic</span>(v, <span class="built_in">min</span>(res, I.C[i]));</span><br><span class="line">I.C[i] -= k; I.C[i^<span class="number">1</span>] += k; res -= k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!res) <span class="keyword">return</span> fl;</span><br><span class="line"><span class="keyword">if</span>(!k) Far[v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fl - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Ck</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">I.<span class="built_in">Cl</span>(); s = <span class="number">0</span>; t = n + m + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m)I.<span class="built_in">AdI</span>(s, i, Lm[i]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n)I.<span class="built_in">AdI</span>(i+m, t, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, l, r) I.<span class="built_in">AdI</span>(A[i][v], i+m, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">Hg</span>())</span><br><span class="line">res += <span class="built_in">Dic</span>(s, INF);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res == n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 二分图 </tag>
            
            <tag> 二分图匹配 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 二分图多重匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing401</title>
      <link href="/2021/11/16/AcWing401GoingFromUtoVorFromVtoU/"/>
      <url>/2021/11/16/AcWing401GoingFromUtoVorFromVtoU/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing401"><a href="#AcWing401" class="headerlink" title="AcWing401"></a><a href="https://www.acwing.com/problem/content/description/403/">AcWing401</a></h3><h3 id="对于缩点后的DAG-考虑若拓扑排序的过程中同时有复数点入队-他们互不可达"><a href="#对于缩点后的DAG-考虑若拓扑排序的过程中同时有复数点入队-他们互不可达" class="headerlink" title="对于缩点后的DAG, 考虑若拓扑排序的过程中同时有复数点入队, 他们互不可达"></a>对于缩点后的DAG, 考虑若拓扑排序的过程中同时有复数点入队, 他们互不可达</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e3</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">6e3</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M&lt;&lt;<span class="number">1</span>], To[M&lt;&lt;<span class="number">1</span>], I[N]; <span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ad</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = I[u]; To[I[u]=cnt] = v; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">T A[N]; <span class="keyword">int</span> num, tp;</span><br><span class="line"><span class="built_in">Stack</span>() &#123; <span class="built_in">FL</span>(A, <span class="number">0</span>); num = tp = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function">T <span class="title">Tp</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> A[tp]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Num</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> num; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pp</span><span class="params">()</span> </span>&#123; num = --tp; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ph</span><span class="params">(<span class="keyword">const</span> T&amp;x)</span> </span>&#123; A[num=++tp] = x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(A, <span class="number">0</span>); num = tp = <span class="number">0</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Stack&lt;<span class="keyword">int</span>, N_&gt; Sk;</span><br><span class="line">Edge&lt;N_, M_&gt; I, S;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Scc[N_];</span><br><span class="line"><span class="keyword">int</span> Fn[N_], Lw[N_], Msc[N_], In[N_];</span><br><span class="line"><span class="keyword">int</span> n, m, t, cnt, pos;</span><br><span class="line"><span class="keyword">bool</span> Vsk[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Topo</span><span class="params">(<span class="keyword">int</span> s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">I.<span class="built_in">Cl</span>();  S.<span class="built_in">Cl</span>(); Sk.<span class="built_in">Cl</span>();</span><br><span class="line"><span class="built_in">FL</span>(Fn, <span class="number">0</span>); <span class="built_in">FL</span>(Lw, <span class="number">0</span>); <span class="built_in">FL</span>(Msc, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">FL</span>(Vsk, <span class="number">0</span>);</span><br><span class="line">pos = <span class="number">1</span>; cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line">I.<span class="built_in">Ad</span>(u, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(!Fn[i]) </span><br><span class="line"><span class="keyword">if</span>(flag) &#123; flag = <span class="number">2</span>; cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> flag = <span class="number">1</span>, <span class="built_in">Tarjan</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">2</span>) <span class="keyword">continue</span>; </span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i,<span class="number">1</span>,n) <span class="built_in">ER</span>(k,v,I,i,I) </span><br><span class="line"><span class="keyword">if</span>(Msc[i] != Msc[v]) S.<span class="built_in">Ad</span>(Msc[i], Msc[v]), In[Msc[v]]++;</span><br><span class="line"></span><br><span class="line">flag = <span class="number">0</span>; <span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, cnt) <span class="keyword">if</span>(!In[i])</span><br><span class="line"><span class="keyword">if</span>(flag) &#123; flag = <span class="number">2</span>; cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> flag = <span class="number">1</span>, tmp = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(flag == <span class="number">2</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Topo</span>(tmp)) </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Sk.<span class="built_in">Ph</span>(x); Vsk[x] = <span class="number">1</span>;</span><br><span class="line">Lw[x] = Fn[x] = ++pos;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) </span><br><span class="line"><span class="keyword">if</span>(!Fn[v]) <span class="built_in">Tarjan</span>(v), Lw[x] = <span class="built_in">min</span>(Lw[x], Lw[v]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Vsk[v])  Lw[x] = <span class="built_in">min</span>(Lw[x], Fn[v]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Fn[x] == Lw[x]) &#123;</span><br><span class="line"><span class="keyword">int</span> y = Sk.<span class="built_in">Tp</span>(); ++cnt;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">Scc[cnt].<span class="built_in">push_back</span>(y); Msc[y] = cnt;</span><br><span class="line">Sk.<span class="built_in">Pp</span>();   Vsk[y] = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(y != x &amp;&amp; (y = Sk.<span class="built_in">Tp</span>()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Topo</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = s;</span><br><span class="line"><span class="built_in">Ir</span>(i,<span class="number">1</span>,cnt) &#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">ER</span>(i,v,S,x,I) &#123;</span><br><span class="line">In[v]--; </span><br><span class="line"><span class="keyword">if</span>(!In[v]) x = v, flag++;</span><br><span class="line"><span class="keyword">if</span>(flag &gt; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, cnt) <span class="keyword">if</span>(In[i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Tarjan </tag>
            
            <tag> 缩点 </tag>
            
            <tag> SCC </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing398 Traffic Real Time Query System</title>
      <link href="/2021/11/16/AcWing398TrafficRealTimeQuerySystem/"/>
      <url>/2021/11/16/AcWing398TrafficRealTimeQuerySystem/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing398"><a href="#AcWing398" class="headerlink" title="AcWing398"></a><a href="https://www.acwing.com/problem/content/400/">AcWing398</a></h3><h3 id="然而luogu过不了"><a href="#然而luogu过不了" class="headerlink" title="然而luogu过不了"></a>然而luogu过不了</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E_ = <span class="number">2e5</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[E&lt;&lt;<span class="number">1</span>], To[E&lt;&lt;<span class="number">1</span>], I[N]; <span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ad</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = I[u]; To[I[u]=cnt] = v; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> u_ = <span class="number">0</span>, <span class="keyword">int</span> v_ = <span class="number">0</span>) &#123; u = u_; v = v_; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;N_&lt;&lt;<span class="number">1</span>, E_&lt;&lt;<span class="number">1</span>&gt; I, S;</span><br><span class="line">Node T[E_&lt;&lt;<span class="number">1</span>];</span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; Sk;</span><br><span class="line"><span class="keyword">int</span> Fn[N_&lt;&lt;<span class="number">1</span>], Lw[N_&lt;&lt;<span class="number">1</span>], Dep[N_&lt;&lt;<span class="number">1</span>], F[N_&lt;&lt;<span class="number">1</span>][<span class="number">22</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, pos, tot, rt, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> vlt)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line">rt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">I.<span class="built_in">Cl</span>(); S.<span class="built_in">Cl</span>(); </span><br><span class="line"> </span><br><span class="line"><span class="built_in">FL</span>(Fn, <span class="number">0</span>);  <span class="built_in">FL</span>(Lw, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">FL</span>(Dep, <span class="number">0</span>); <span class="built_in">FL</span>(F, <span class="number">0</span>); <span class="built_in">FL</span>(T, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">tot = n;</span><br><span class="line">pos = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(Sk.<span class="built_in">size</span>()) Sk.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line">T[i] = <span class="built_in">Node</span>(u, v);</span><br><span class="line">I.<span class="built_in">Ad</span>(u, v); I.<span class="built_in">Ad</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Tarjan</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Dep[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Pre</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Dp</span>();</span><br><span class="line"></span><br><span class="line">IN &gt;&gt; q;</span><br><span class="line"><span class="keyword">int</span> tmp = q;</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="keyword">int</span> s, t; IN &gt;&gt; s &gt;&gt; t;</span><br><span class="line"><span class="keyword">int</span> x = T[s].u, y = T[s].v, a = T[t].u, b = T[t].v;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> C(u, v, w) (((Dep[(u)]+Dep[(v)]-2*Dep[(w)])/2)-1)</span></span><br><span class="line"><span class="keyword">if</span>(q != tmp<span class="number">-1</span>) cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(<span class="built_in">max</span>(<span class="built_in">C</span>(x, a, <span class="built_in">Lca</span>(x, a)),</span><br><span class="line">    <span class="built_in">C</span>(x, b, <span class="built_in">Lca</span>(x, b)) ),</span><br><span class="line">    <span class="built_in">max</span>(<span class="built_in">C</span>(y, a, <span class="built_in">Lca</span>(y, a)),</span><br><span class="line">    <span class="built_in">C</span>(y, b, <span class="built_in">Lca</span>(y, b)) ) );</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> C</span></span><br><span class="line">&#125;</span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line">&#125;<span class="keyword">while</span>(n + m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Sk.<span class="built_in">push</span>(x);</span><br><span class="line">Fn[x] = Lw[x] = ++pos;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) </span><br><span class="line"><span class="keyword">if</span>(!Fn[v]) &#123;</span><br><span class="line"><span class="built_in">Tarjan</span>(v), Lw[x] = <span class="built_in">min</span>(Lw[x], Lw[v]);</span><br><span class="line"><span class="keyword">if</span>(Lw[v] == Fn[x] &amp;&amp; ++tot) &#123;</span><br><span class="line"><span class="keyword">int</span> y = Sk.<span class="built_in">top</span>();</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">Sk.<span class="built_in">pop</span>(); </span><br><span class="line">S.<span class="built_in">Ad</span>(tot, y); S.<span class="built_in">Ad</span>(y, tot);</span><br><span class="line">&#125; <span class="keyword">while</span>(y != v &amp;&amp; (y = Sk.<span class="built_in">top</span>()));</span><br><span class="line">S.<span class="built_in">Ad</span>(x, tot); S.<span class="built_in">Ad</span>(tot, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> Lw[x] = <span class="built_in">min</span>(Lw[x], Fn[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> vlt)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i,v,S,x,I) <span class="keyword">if</span>(v != vlt)</span><br><span class="line">Dep[v] = Dep[x] + <span class="number">1</span>, F[v][<span class="number">0</span>] = x, <span class="built_in">Pre</span>(v, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">Ir</span>(e, <span class="number">1</span>, <span class="number">20</span>) <span class="built_in">IR</span>(i, <span class="number">1</span>, tot) </span><br><span class="line">F[i][e] = F[F[i][e<span class="number">-1</span>]][e<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Dep[x] &lt; Dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="built_in">SR</span>(i, <span class="number">20</span>, <span class="number">0</span>) <span class="keyword">if</span>(Dep[F[x][i]] &gt;= Dep[y]) x = F[x][i];</span><br><span class="line"><span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SR</span>(i, <span class="number">20</span>, <span class="number">0</span>) <span class="keyword">if</span>(F[x][i] != F[y][i])</span><br><span class="line">x = F[x][i], y = F[y][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> F[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Tarjan </tag>
            
            <tag> v-DCC </tag>
            
            <tag> 圆方树 </tag>
            
            <tag> 割点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG4320 道路相遇</title>
      <link href="/2021/11/16/LG4320%E9%81%93%E8%B7%AF%E7%9B%B8%E9%81%87/"/>
      <url>/2021/11/16/LG4320%E9%81%93%E8%B7%AF%E7%9B%B8%E9%81%87/</url>
      
        <content type="html"><![CDATA[<h3 id="LG4320"><a href="#LG4320" class="headerlink" title="LG4320"></a><a href="https://www.luogu.com.cn/problem/P4320">LG4320</a></h3><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><h4 id="建圆方树"><a href="#建圆方树" class="headerlink" title="建圆方树"></a>建圆方树</h4><h4 id="对于每一组点x-y-设z-lca-x-y"><a href="#对于每一组点x-y-设z-lca-x-y" class="headerlink" title="对于每一组点x, y, 设z = lca(x, y)"></a>对于每一组点x, y, 设z = lca(x, y)</h4><ul><li><h4 id="z为方点-Ans-frac-Dep-x-Dep-z-1-2-frac-Dep-y-Dep-z-1-2-frac-Dep-x-Dep-y-2-Dep-z-2-1"><a href="#z为方点-Ans-frac-Dep-x-Dep-z-1-2-frac-Dep-y-Dep-z-1-2-frac-Dep-x-Dep-y-2-Dep-z-2-1" class="headerlink" title="z为方点, $Ans = \frac{Dep_x - Dep_z - 1}{2} + \frac{Dep_y - Dep_z - 1}{2} = \frac{Dep_x + Dep_y - 2 Dep_z}{2} - 1$"></a>z为方点, $Ans = \frac{Dep_x - Dep_z - 1}{2} + \frac{Dep_y - Dep_z - 1}{2} = \frac{Dep_x + Dep_y - 2 Dep_z}{2} - 1$</h4></li><li><h4 id="z为圆点-Ans-frac-Dep-x-Dep-z-2-frac-Dep-y-Dep-z-2-1-frac-Dep-x-Dep-y-2-Dep-z-2-1"><a href="#z为圆点-Ans-frac-Dep-x-Dep-z-2-frac-Dep-y-Dep-z-2-1-frac-Dep-x-Dep-y-2-Dep-z-2-1" class="headerlink" title="z为圆点, $Ans = \frac{Dep_x - Dep_z}{2} + \frac{Dep_y - Dep_z}{2} - 1 = \frac{Dep_x + Dep_y - 2 Dep_z}{2} - 1$"></a>z为圆点, $Ans = \frac{Dep_x - Dep_z}{2} + \frac{Dep_y - Dep_z}{2} - 1 = \frac{Dep_x + Dep_y - 2 Dep_z}{2} - 1$</h4></li></ul><h4 id="综上-两种情况结果相同"><a href="#综上-两种情况结果相同" class="headerlink" title="综上, 两种情况结果相同"></a>综上, 两种情况结果相同</h4><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">5e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E_ = <span class="number">1e6</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> E&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[E&lt;&lt;<span class="number">1</span>], To[E&lt;&lt;<span class="number">1</span>], I[N]; <span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ad</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = I[u]; To[I[u]=cnt] = v; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;N_&lt;&lt;<span class="number">1</span>, E_&gt; I, S;</span><br><span class="line">stack&lt;<span class="keyword">int</span>&gt; Sk;</span><br><span class="line"><span class="keyword">int</span> Fn[N_], Lw[N_], Dep[N_&lt;&lt;<span class="number">1</span>], F[N_&lt;&lt;<span class="number">1</span>][<span class="number">22</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, pos, tot, rt, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> vlt)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line">rt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">I.<span class="built_in">Cl</span>(); S.<span class="built_in">Cl</span>(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">FL</span>(Fn, <span class="number">0</span>);  <span class="built_in">FL</span>(Lw, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">FL</span>(Dep, <span class="number">0</span>); <span class="built_in">FL</span>(F, <span class="number">0</span>); </span><br><span class="line"></span><br><span class="line">tot = n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(Sk.<span class="built_in">size</span>()) Sk.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line">I.<span class="built_in">Ad</span>(u, v); I.<span class="built_in">Ad</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Tarjan</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">Dep[<span class="number">1</span>] = <span class="number">1</span>; </span><br><span class="line"><span class="built_in">Pre</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Dp</span>();</span><br><span class="line"></span><br><span class="line">IN &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="keyword">int</span> s, t; IN &gt;&gt; s &gt;&gt; t;</span><br><span class="line"><span class="keyword">int</span> z = <span class="built_in">Lca</span>(s, t);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (Dep[s] + Dep[t] - <span class="number">2</span> * Dep[z]) / <span class="number">2</span> + <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Sk.<span class="built_in">push</span>(x);</span><br><span class="line">Fn[x] = Lw[x] = ++pos;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) </span><br><span class="line"><span class="keyword">if</span>(!Fn[v]) &#123;</span><br><span class="line"><span class="built_in">Tarjan</span>(v), Lw[x] = <span class="built_in">min</span>(Lw[x], Lw[v]);</span><br><span class="line"><span class="keyword">if</span>(Lw[v] == Fn[x] &amp;&amp; ++tot) &#123;</span><br><span class="line"><span class="keyword">int</span> y = Sk.<span class="built_in">top</span>();</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">Sk.<span class="built_in">pop</span>(); </span><br><span class="line">S.<span class="built_in">Ad</span>(tot, y); S.<span class="built_in">Ad</span>(y, tot);</span><br><span class="line">&#125; <span class="keyword">while</span>(y != v &amp;&amp; (y = Sk.<span class="built_in">top</span>()));</span><br><span class="line">S.<span class="built_in">Ad</span>(x, tot); S.<span class="built_in">Ad</span>(tot, x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> Lw[x] = <span class="built_in">min</span>(Lw[x], Fn[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> vlt)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i,v,S,x,I) <span class="keyword">if</span>(v != vlt)</span><br><span class="line">Dep[v] = Dep[x] + <span class="number">1</span>, F[v][<span class="number">0</span>] = x, <span class="built_in">Pre</span>(v, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">Ir</span>(e, <span class="number">1</span>, <span class="number">20</span>) <span class="built_in">IR</span>(i, <span class="number">1</span>, tot) </span><br><span class="line">F[i][e] = F[F[i][e<span class="number">-1</span>]][e<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Dep[x] &lt; Dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="built_in">SR</span>(i, <span class="number">20</span>, <span class="number">0</span>) <span class="keyword">if</span>(Dep[F[x][i]] &gt;= Dep[y]) x = F[x][i];</span><br><span class="line"><span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SR</span>(i, <span class="number">20</span>, <span class="number">0</span>) <span class="keyword">if</span>(F[x][i] != F[y][i])</span><br><span class="line">x = F[x][i], y = F[y][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> F[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 图论 </tag>
            
            <tag> Tarjan </tag>
            
            <tag> 缩点 </tag>
            
            <tag> v-DCC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing395 Rudundan Paths</title>
      <link href="/2021/11/15/AcWing395RedundantPaths/"/>
      <url>/2021/11/15/AcWing395RedundantPaths/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing395"><a href="#AcWing395" class="headerlink" title="AcWing395"></a><a href="https://www.acwing.com/problem/content/description/397/">AcWing395</a></h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">5e3</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E_ = <span class="number">1e4</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M&lt;&lt;<span class="number">1</span>], To[M&lt;&lt;<span class="number">1</span>], I[N]; <span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ad</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = I[u]; To[I[u]=cnt] = v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;N_, E_&gt; I;</span><br><span class="line"><span class="keyword">int</span> Fn[N_], Lw[N_], DccV[N_], In[N_];</span><br><span class="line"><span class="keyword">int</span> n, m, pos, cnt;</span><br><span class="line"><span class="keyword">bool</span> Bg[E_&lt;&lt;<span class="number">1</span>], Vv[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> elt)</span> </span>&#123;</span><br><span class="line">Fn[x] = Lw[x] = ++pos;</span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) <span class="keyword">if</span>(i != (elt^<span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span>(!Fn[v]) </span><br><span class="line"><span class="built_in">Tarjan</span>(v, i), Lw[x] = <span class="built_in">min</span>(Lw[x], Lw[v]), </span><br><span class="line">Bg[i] = Bg[i^<span class="number">1</span>] = (Bg[i] | Fn[x] &lt; Lw[v]);</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">Lw[x] = <span class="built_in">min</span>(Lw[x], Fn[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fdcc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Vv[x] = <span class="number">1</span>; DccV[x] = cnt;</span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) <span class="keyword">if</span>(!Vv[v] &amp;&amp; !Bg[i]) <span class="built_in">Fdcc</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line">I.<span class="built_in">Ad</span>(u, v); I.<span class="built_in">Ad</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(!Fn[i]) <span class="built_in">Tarjan</span>(i, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(!Vv[i]) ++cnt, <span class="built_in">Fdcc</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">ER</span>(k,v,I,i,I) </span><br><span class="line"><span class="keyword">if</span>(Bg[k]) In[DccV[i]]++, In[DccV[v]]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, cnt) tmp += In[i] == <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; tmp / <span class="number">2</span> + tmp % <span class="number">2</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 树 </tag>
            
            <tag> 图论 </tag>
            
            <tag> Tarjan </tag>
            
            <tag> e-DCC </tag>
            
            <tag> 缩点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing390 逃学的小孩</title>
      <link href="/2021/11/15/AcWing390%E9%80%83%E5%AD%A6%E7%9A%84%E5%B0%8F%E5%AD%A9/"/>
      <url>/2021/11/15/AcWing390%E9%80%83%E5%AD%A6%E7%9A%84%E5%B0%8F%E5%AD%A9/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing390"><a href="#AcWing390" class="headerlink" title="AcWing390"></a><a href="https://www.acwing.com/problem/content/description/392/">AcWing390</a></h3><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><h4 id="路径为-A-gt-B-min-C-gt-A-C-gt-B-可以证明-A-B一定是直径的端点"><a href="#路径为-A-gt-B-min-C-gt-A-C-gt-B-可以证明-A-B一定是直径的端点" class="headerlink" title="路径为 A-&gt;B + min(C-&gt;A, C-&gt;B), 可以证明, A, B一定是直径的端点"></a>路径为 A-&gt;B + min(C-&gt;A, C-&gt;B), 可以证明, A, B一定是直径的端点</h4><h4 id="枚举C"><a href="#枚举C" class="headerlink" title="枚举C"></a>枚举C</h4><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">2e5</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M&lt;&lt;<span class="number">1</span>], To[M&lt;&lt;<span class="number">1</span>], I[N]; <span class="keyword">int</span> cnt;</span><br><span class="line">T W[M&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ad</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w)</span> </span>&#123; Nt[++cnt] = I[u]; W[cnt] = w; To[I[u]=cnt] = v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x; <span class="keyword">long</span> <span class="keyword">long</span> y;</span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> x_ = <span class="number">0</span>, <span class="keyword">long</span> <span class="keyword">long</span> y_ = <span class="number">0</span>) &#123; x = x_; y = y_; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;<span class="keyword">long</span> <span class="keyword">long</span>, N_, N_&gt; I;</span><br><span class="line">Node Pr[N_];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> dia;</span><br><span class="line"><span class="keyword">int</span> n, m, pr, qr;</span><br><span class="line"><span class="keyword">bool</span> Vv[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wkp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">long</span> <span class="keyword">long</span> dis)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dis &gt; dia) dia = dis, pr = x;</span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) <span class="keyword">if</span>(!Vv[v] &amp;&amp; (Vv[v]=<span class="number">1</span>)) </span><br><span class="line"><span class="built_in">Wkp</span>(v, dis+I.W[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wkq</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> vlt, <span class="keyword">long</span> <span class="keyword">long</span> wlt, <span class="keyword">long</span> <span class="keyword">long</span> dis)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dis &gt;= dia) dia = dis, qr = x;</span><br><span class="line">Pr[x] = <span class="built_in">Node</span>(vlt, wlt);</span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) <span class="keyword">if</span>(!Vv[v] &amp;&amp; (Vv[v]=<span class="number">1</span>)) </span><br><span class="line"><span class="built_in">Wkq</span>(v, x, I.W[i], dis+I.W[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Wkx</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) <span class="keyword">if</span>(!Vv[v] &amp;&amp; (Vv[v]=<span class="number">1</span>))</span><br><span class="line">tmp = <span class="built_in">max</span>(tmp, <span class="built_in">Wkx</span>(v) + I.W[i]);</span><br><span class="line"><span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; <span class="keyword">long</span> <span class="keyword">long</span> w;</span><br><span class="line">IN &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">I.<span class="built_in">Ad</span>(u, v, w); I.<span class="built_in">Ad</span>(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vv[<span class="number">1</span>] = <span class="number">1</span>;  <span class="built_in">Wkp</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">FL</span>(Vv, <span class="number">0</span>);</span><br><span class="line">Vv[pr] = <span class="number">1</span>; <span class="built_in">Wkq</span>(pr, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">FL</span>(Vv, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> y = qr;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">Vv[y] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(y != pr &amp;&amp; (y = Pr[y].x));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> x = qr; <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> </span><br><span class="line">ans = <span class="built_in">max</span>(ans, <span class="built_in">min</span>(sum, dia-sum) + <span class="built_in">Wkx</span>(x) + dia);</span><br><span class="line"><span class="keyword">while</span>(x != pr &amp;&amp; (sum += Pr[x].y) &amp;&amp; (x = Pr[x].x));</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 树 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 树的直径 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing384 升降梯上</title>
      <link href="/2021/11/14/AcWing384%E5%8D%87%E9%99%8D%E6%A2%AF%E4%B8%8A/"/>
      <url>/2021/11/14/AcWing384%E5%8D%87%E9%99%8D%E6%A2%AF%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing384"><a href="#AcWing384" class="headerlink" title="AcWing384"></a><a href="https://www.acwing.com/problem/content/description/386/">AcWing384</a></h3><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><h4 id="设-F-x-v-表示到达第-x-层-操作杆位于-v-的最短路"><a href="#设-F-x-v-表示到达第-x-层-操作杆位于-v-的最短路" class="headerlink" title="设 $F_{x, v}$表示到达第$x$层, 操作杆位于$v$的最短路"></a>设 $F_{x, v}$表示到达第$x$层, 操作杆位于$v$的最短路</h4><h4 id="F-x-v-可以更新"><a href="#F-x-v-可以更新" class="headerlink" title="$F_{x, v}$可以更新"></a>$F_{x, v}$可以更新</h4><ul><li><h5 id="F-x-C-k-k-为-F-x-v-v-k-2-C-k-即移动操作杆"><a href="#F-x-C-k-k-为-F-x-v-v-k-2-C-k-即移动操作杆" class="headerlink" title="$F_{x+C_k, k}$ 为 $F_{x, v} + |v - k| + |2 * C_k|$, 即移动操作杆"></a>$F_{x+C_k, k}$ 为 $F_{x, v} + |v - k| + |2 * C_k|$, 即移动操作杆</h5></li><li><h5 id="F-x-nC-v-v-为-F-x-v-2n-C-v-即不移动操作杆"><a href="#F-x-nC-v-v-为-F-x-v-2n-C-v-即不移动操作杆" class="headerlink" title="$F_{x+nC_v, v}$ 为 $F_{x, v} + |2n * C_v|$, 即不移动操作杆"></a>$F_{x+nC_v, v}$ 为 $F_{x, v} + |2n * C_v|$, 即不移动操作杆</h5></li></ul><h4 id="不需要建图-直接Dij即可"><a href="#不需要建图-直接Dij即可" class="headerlink" title="不需要建图, 直接Dij即可"></a>不需要建图, 直接Dij即可</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><h4 id="C-i-0"><a href="#C-i-0" class="headerlink" title="$C_i = 0$"></a>$C_i = 0$</h4></li><li><h4 id="凑两条"><a href="#凑两条" class="headerlink" title="(凑两条"></a>(凑两条</h4></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e3</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">20</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> F[N_][M_], C[M_];</span><br><span class="line"><span class="keyword">int</span> n, m, fg;</span><br><span class="line"><span class="keyword">bool</span> Vs[N_][M_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dij</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="comment">//freopen(&quot;I:/Code/Data/WA.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) IN &gt;&gt; C[i], fg = !C[i] ? i : fg; </span><br><span class="line"></span><br><span class="line"><span class="built_in">Dij</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = INF;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) ans = <span class="built_in">min</span>(ans, F[n][i]);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (ans != INF ? ans : <span class="number">-1</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y, v;</span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> x_ = <span class="number">0</span>, <span class="keyword">int</span> y_ = <span class="number">0</span>, <span class="keyword">int</span> v_ = <span class="number">0</span>) &#123; x = x_; y = y_; v = v_; &#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Node &amp;x, <span class="keyword">const</span> Node &amp;y) &#123; <span class="keyword">return</span> x.v &gt; y.v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dij</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">FL</span>(F, <span class="number">0x3f</span>); <span class="built_in">FL</span>(Vs, <span class="number">0</span>);</span><br><span class="line">priority_queue&lt;Node&gt; Q; Q.<span class="built_in">push</span>(<span class="built_in">Node</span>(<span class="number">1</span>, fg, <span class="number">0</span>));</span><br><span class="line">F[<span class="number">1</span>][fg] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(Q.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y, v;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">x = Q.<span class="built_in">top</span>().x, y = Q.<span class="built_in">top</span>().y, v = Q.<span class="built_in">top</span>().v,</span><br><span class="line">Q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(Vs[x][y] &amp;&amp; Q.<span class="built_in">size</span>());</span><br><span class="line"></span><br><span class="line">Vs[x][y] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> to = x + C[i];</span><br><span class="line"><span class="keyword">if</span>(to &lt; <span class="number">1</span> || to &gt; n || !C[i] || i == y) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( F[to][i] &gt; F[x][y] + <span class="built_in">Abs</span>(i - y) + <span class="built_in">Abs</span>(<span class="number">2</span> * C[i]) ) </span><br><span class="line">F[to][i] = F[x][y] + <span class="built_in">Abs</span>(i - y) + <span class="built_in">Abs</span>(<span class="number">2</span> * C[i]),</span><br><span class="line">Q.<span class="built_in">push</span>(<span class="built_in">Node</span>(to, i, F[to][i]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> k = x, s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(k &gt; <span class="number">0</span> &amp;&amp; k &lt;= n &amp;&amp; C[y]) &#123;</span><br><span class="line">k = k + C[y]; s += <span class="built_in">Abs</span>(<span class="number">2</span> * C[y]);</span><br><span class="line"><span class="keyword">if</span>(k &gt; <span class="number">0</span> &amp;&amp; k &lt;= n &amp;&amp; F[k][y] &gt; F[x][y] + s)   </span><br><span class="line">F[k][y] = F[x][y] + s,</span><br><span class="line">Q.<span class="built_in">push</span>(<span class="built_in">Node</span>(k, y, F[k][y]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Abs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -x : x; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 图论 </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 分层图 </tag>
            
            <tag> Dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UOJ331 NOIP2017 逛公园</title>
      <link href="/2021/11/14/UOJ331NOIP2017%E9%80%9B%E5%85%AC%E5%9B%AD/"/>
      <url>/2021/11/14/UOJ331NOIP2017%E9%80%9B%E5%85%AC%E5%9B%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="UOJ331"><a href="#UOJ331" class="headerlink" title="UOJ331"></a><a href="https://uoj.ac/problem/331">UOJ331</a></h3><h3 id="做法"><a href="#做法" class="headerlink" title="做法:\"></a>做法:\</h3><h4 id="设"><a href="#设" class="headerlink" title="设"></a>设</h4><ul><li><h5 id="dis-x-为起点到-x-的最短路径"><a href="#dis-x-为起点到-x-的最短路径" class="headerlink" title="$dis_x$ 为起点到$x$ 的最短路径"></a>$dis_x$ 为起点到$x$ 的最短路径</h5></li><li><h5 id="状态-F-x-k-表示到节点-x-距离-dis-x-k-的方案数"><a href="#状态-F-x-k-表示到节点-x-距离-dis-x-k-的方案数" class="headerlink" title="状态 $F_{x, k}$ 表示到节点 $x$, 距离$dis_x + k$的方案数"></a>状态 $F_{x, k}$ 表示到节点 $x$, 距离$dis_x + k$的方案数</h5></li></ul><h4 id="则"><a href="#则" class="headerlink" title="则"></a>则</h4><ul><li><h5 id="F-x-k-sum-v-x-in-E-F-v-dis-x-k-dis-v-w-w-是边-v-x-的长度"><a href="#F-x-k-sum-v-x-in-E-F-v-dis-x-k-dis-v-w-w-是边-v-x-的长度" class="headerlink" title="$F_{x, k} = \sum_{(v, x)\in E}F[v][dis(x)+k-dis(v)-w]$, $w$是边$(v, x)$的长度"></a>$F_{x, k} = \sum_{(v, x)\in E}F[v][dis(x)+k-dis(v)-w]$, $w$是边$(v, x)$的长度</h5></li></ul><h4 id="建新图连反向边-记忆化搜索"><a href="#建新图连反向边-记忆化搜索" class="headerlink" title="建新图连反向边, 记忆化搜索"></a>建新图连反向边, 记忆化搜索</h4><h4 id="对于环的处理"><a href="#对于环的处理" class="headerlink" title="对于环的处理: \"></a>对于环的处理: \</h4><h5 id="一但路径上出现0环-答案无穷-也就是dp状态转移时出现环"><a href="#一但路径上出现0环-答案无穷-也就是dp状态转移时出现环" class="headerlink" title="一但路径上出现0环, 答案无穷, 也就是dp状态转移时出现环"></a>一但路径上出现0环, 答案无穷, 也就是dp状态转移时出现环</h5><h5 id="所以-在记忆化搜索的过程中-标记正在被处理的点"><a href="#所以-在记忆化搜索的过程中-标记正在被处理的点" class="headerlink" title="所以, 在记忆化搜索的过程中 标记正在被处理的点"></a>所以, 在记忆化搜索的过程中 标记正在被处理的点</h5><h5 id="一但递归过程中重复访问到一个被标记的点-即代表路径上有0环-直接退出输出-1"><a href="#一但递归过程中重复访问到一个被标记的点-即代表路径上有0环-直接退出输出-1" class="headerlink" title="一但递归过程中重复访问到一个被标记的点, 即代表路径上有0环, 直接退出输出$-1$"></a>一但递归过程中重复访问到一个被标记的点, 即代表路径上有0环, 直接退出输出$-1$</h5><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><h4 id="F可能为0-记搜初值设为-1-搜到边界时特殊赋初值"><a href="#F可能为0-记搜初值设为-1-搜到边界时特殊赋初值" class="headerlink" title="F可能为0, 记搜初值设为-1, 搜到边界时特殊赋初值"></a>F可能为0, 记搜初值设为-1, 搜到边界时特殊赋初值</h4></li><li><h4 id="Spfa要上双端队列优化"><a href="#Spfa要上双端队列优化" class="headerlink" title="Spfa要上双端队列优化"></a>Spfa要上双端队列优化</h4></li><li><h4 id="luogu垃圾"><a href="#luogu垃圾" class="headerlink" title="luogu垃圾"></a>luogu垃圾</h4></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">2e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">2e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> K_ = <span class="number">50</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M&lt;&lt;<span class="number">1</span>], To[M&lt;&lt;<span class="number">1</span>], I[N], R[N]; <span class="keyword">int</span> cnt;</span><br><span class="line">T W[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); <span class="built_in">FL</span>(R, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdI</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w)</span> </span>&#123; Nt[++cnt] = I[u]; W[cnt] = w; To[I[u]=cnt] = v; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdT</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w)</span> </span>&#123; Nt[++cnt] = R[u]; W[cnt] = w; To[R[u]=cnt] = v; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); <span class="built_in">FL</span>(R, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;<span class="keyword">int</span>, N_, M_&gt; I;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Far[N_], F[N_][K_];</span><br><span class="line"><span class="keyword">int</span> n, m, t, s, f, k, P;</span><br><span class="line"><span class="keyword">bool</span> Vq[N_], Vs[N_][K_];</span><br><span class="line"><span class="keyword">bool</span> fg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Wk</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">I.<span class="built_in">Cl</span>(); <span class="built_in">FL</span>(F, <span class="number">-1</span>); <span class="built_in">FL</span>(Vs, <span class="number">0</span>); fg = <span class="number">0</span>;</span><br><span class="line">IN &gt;&gt; n &gt;&gt; m &gt;&gt; k &gt;&gt; P; </span><br><span class="line">s = <span class="number">1</span>, f = n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w; IN &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">I.<span class="built_in">AdI</span>(u, v, w); </span><br><span class="line">I.<span class="built_in">AdT</span>(v, u, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Spfa</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">0</span>, k &amp;&amp; !fg) </span><br><span class="line">ans += <span class="built_in">Wk</span>(f, i), ans %= P;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!fg) cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; <span class="number">-1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Wk</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(fg) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Vs[x][k]) <span class="keyword">return</span> fg = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(~F[x][k]) <span class="keyword">return</span> F[x][k];</span><br><span class="line"></span><br><span class="line">F[x][k] = x==<span class="number">1</span> &amp;&amp; !k;</span><br><span class="line">Vs[x][k] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,R) <span class="keyword">if</span>(Far[x]+k-I.W[i]-Far[v]&gt;=<span class="number">0</span> &amp;&amp; !fg) &#123;</span><br><span class="line">F[x][k] += <span class="built_in">Wk</span>(v, Far[x]+k-I.W[i]-Far[v]), F[x][k] %= P;</span><br><span class="line"><span class="keyword">if</span>(fg) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Vs[x][k] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> F[x][k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">FL</span>(Far, <span class="number">0x3f</span>); Far[s] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">FL</span>(Vq, <span class="number">0</span>);   Vq[s] = <span class="number">1</span>;</span><br><span class="line">deque&lt;<span class="keyword">int</span>&gt; Q;  Q.<span class="built_in">push_back</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> tp = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop_front</span>();</span><br><span class="line">Vq[tp] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i,v,I,tp,I) </span><br><span class="line"><span class="keyword">if</span>(Far[v]&gt;Far[tp]+I.W[i]) &#123;</span><br><span class="line">Far[v] = Far[tp] + I.W[i];</span><br><span class="line"><span class="keyword">if</span>(!Vq[v] &amp;&amp; (Vq[v] = <span class="number">1</span>)) </span><br><span class="line"><span class="keyword">if</span>(Q.<span class="built_in">size</span>() &amp;&amp; Far[Q.<span class="built_in">front</span>()] &gt;= Far[v]) Q.<span class="built_in">push_front</span>(v);</span><br><span class="line"><span class="keyword">else</span> Q.<span class="built_in">push_back</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 计数 </tag>
            
            <tag> SPFA </tag>
            
            <tag> 最短路 </tag>
            
            <tag> 次短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing387 Arctic Network</title>
      <link href="/2021/11/14/AcWing387ArcticNetwork/"/>
      <url>/2021/11/14/AcWing387ArcticNetwork/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing387"><a href="#AcWing387" class="headerlink" title="AcWing387"></a><a href="https://www.acwing.com/problem/content/description/389/">AcWing387</a></h3><h3 id="考虑对于一颗最小生成树-删掉最长的-s-1-条边-则形成-s-颗子树-其中每颗子树选一个点-就是最优情况"><a href="#考虑对于一颗最小生成树-删掉最长的-s-1-条边-则形成-s-颗子树-其中每颗子树选一个点-就是最优情况" class="headerlink" title="考虑对于一颗最小生成树, 删掉最长的$s-1$条边, 则形成$s$颗子树, 其中每颗子树选一个点, 就是最优情况"></a>考虑对于一颗最小生成树, 删掉最长的$s-1$条边, 则形成$s$颗子树, 其中每颗子树选一个点, 就是最优情况</h3><h3 id="Kruskal-添加的第-n-s-条边的长度就是答案"><a href="#Kruskal-添加的第-n-s-条边的长度就是答案" class="headerlink" title="Kruskal, 添加的第 $n-s$ 条边的长度就是答案"></a>Kruskal, 添加的第 $n-s$ 条边的长度就是答案</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">5e2</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Uaf</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Fa[N];</span><br><span class="line"><span class="built_in">Uaf</span>() &#123; <span class="built_in">Ir</span>(i, <span class="number">1</span>, N) Fa[i] = i; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fd</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> Fa[x] = x == Fa[x] ? x : <span class="built_in">Fd</span>(Fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Un</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; Fa[<span class="built_in">Fd</span>(x)] = <span class="built_in">Fd</span>(y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">Ir</span>(i, <span class="number">1</span>, N) Fa[i] = i; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y; </span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> x_ = <span class="number">0</span>, <span class="keyword">int</span> y_ = <span class="number">0</span>) &#123; x = x_; y = y_; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Adj</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="keyword">double</span> w;</span><br><span class="line"><span class="built_in">Adj</span>(<span class="keyword">int</span> u_ = <span class="number">0</span>, <span class="keyword">int</span> v_ = <span class="number">0</span>, <span class="keyword">double</span> w_ = <span class="number">0</span>) &#123; u = u_; v = v_; w = w_; &#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Adj &amp;x, <span class="keyword">const</span> Adj &amp;y) &#123; <span class="keyword">return</span> x.w &lt; y.w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Uaf&lt;N_*N_&gt; U;</span><br><span class="line">Node P[N_];</span><br><span class="line">Adj E[N_*N_], T[N_*N_];</span><br><span class="line"><span class="keyword">int</span> n, s, cnt, idx, t;</span><br><span class="line"><span class="keyword">bool</span> Vv[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Fr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line"><span class="built_in">FL</span>(P, <span class="number">0</span>);  <span class="built_in">FL</span>(Vv, <span class="number">0</span>);  cnt = idx = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">FL</span>(T, <span class="number">0</span>);  <span class="built_in">FL</span>(E, <span class="number">0</span>);  U.<span class="built_in">Cl</span>();</span><br><span class="line"></span><br><span class="line">IN &gt;&gt; s &gt;&gt; n;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) IN &gt;&gt; P[i].x &gt;&gt; P[i].y;</span><br><span class="line"><span class="keyword">if</span>(s &gt;= n) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, <span class="number">0.00</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line"></span><br><span class="line">s = n - s;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, <span class="number">1</span>, n) </span><br><span class="line">E[cnt++] = <span class="built_in">Adj</span>(i, v, <span class="built_in">Fr</span>(P[i].x, P[i].y, P[v].x, P[v].y) );</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(E, E+cnt);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, cnt) &#123;</span><br><span class="line"><span class="keyword">int</span> xFa = U.<span class="built_in">Fd</span>(E[i].u), yFa = U.<span class="built_in">Fd</span>(E[i].v);</span><br><span class="line"><span class="keyword">if</span>(xFa != yFa) &#123;</span><br><span class="line">s--;U.<span class="built_in">Un</span>(xFa, yFa);</span><br><span class="line"><span class="keyword">if</span>(!s) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, E[i].w); <span class="keyword">break</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Fr</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">sqrt</span>(<span class="built_in">pow</span>(x-a, <span class="number">2</span>) + <span class="built_in">pow</span>(y-b, <span class="number">2</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> Kruskal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing386 社交网络</title>
      <link href="/2021/11/14/Acwing386%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/"/>
      <url>/2021/11/14/Acwing386%E7%A4%BE%E4%BA%A4%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing386"><a href="#AcWing386" class="headerlink" title="AcWing386"></a><a href="https://www.acwing.com/problem/content/description/388/">AcWing386</a></h3><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h1 id="开long-long"><a href="#开long-long" class="headerlink" title="开long long"></a>开long long</h1><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e2</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> E[N_][N_], Cnt[N_][N_];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">FL</span>(E, <span class="number">0x3f</span>);</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w; IN &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">E[u][v] = E[v][u] = w;</span><br><span class="line">Cnt[u][v] = Cnt[v][u] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) E[i][i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(k, <span class="number">1</span>, n) <span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, <span class="number">1</span>, n) &#123;</span><br><span class="line"><span class="keyword">if</span>(k == i || k == v || i == v) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp = E[i][k] + E[k][v];</span><br><span class="line"><span class="keyword">if</span>(tmp &lt; E[i][v]) E[i][v] = tmp, Cnt[i][v] = (Cnt[i][k] * Cnt[k][v]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tmp == E[i][v])    Cnt[i][v] += (Cnt[i][k] * Cnt[k][v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(k, <span class="number">1</span>, n) &#123;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, <span class="number">1</span>, n) &#123;</span><br><span class="line"><span class="keyword">if</span>(k == i || k == v || i == v) <span class="keyword">continue</span>;</span><br><span class="line">ans += (<span class="keyword">double</span>)(E[i][k] + E[k][v] == E[i][v]) * Cnt[i][k] * Cnt[k][v] / Cnt[i][v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 计数 </tag>
            
            <tag> 全源最短路 </tag>
            
            <tag> Floyd </tag>
            
            <tag> 最短路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/13/Test/"/>
      <url>/2021/11/13/Test/</url>
      
        <content type="html"><![CDATA[<p>有关 逛公园(UOJ 331) 记忆化搜索, 应该是判0环有问题, UOJ额外数据TLE</p><p>做法:<br>设</p><ul><li>$dis_x$ 为起点到$x$ 的最短路径</li><li>状态 $F_{x, k}$ 表示到节点 $x$, 距离$dis_x + k$的方案数 </li></ul><p>则</p><ul><li>$F_{x, k} = \sum_{(v, x)\in E}F[v][dis(x)+k-dis(v)-w]$, $w$是边$(v, x)$的长度</li></ul><p>建新图连反向边, 记忆化搜索</p><p>对于环的处理: <br>我觉得, 一但路径上出现0环, 答案无穷, 也就是dp状态转移时出现环</p><p>那么, 我在记忆化搜索的过程中 标记正在被处理的点</p><p>一但递归过程中重复访问到一个被标记的点, 即代表路径上有0环, 直接退出输出$-1$</p><p>另外在 $k=0$时可能无法正确判环, 此时额外跑一遍$k=1$</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AcWing375 蚂蚁</title>
      <link href="/2021/11/12/AcWing375%E8%9A%82%E8%9A%81/"/>
      <url>/2021/11/12/AcWing375%E8%9A%82%E8%9A%81/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing375"><a href="#AcWing375" class="headerlink" title="AcWing375"></a><a href="https://www.acwing.com/problem/content/description/377/">AcWing375</a></h3><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><h4 id="实数比较"><a href="#实数比较" class="headerlink" title="实数比较"></a>实数比较</h4></li><li><h4 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a>曼哈顿距离</h4></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">4e2</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> EPS = <span class="number">1e-17</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M &lt;&lt; <span class="number">1</span>], To[M &lt;&lt; <span class="number">1</span>], I[N], H[N]; <span class="keyword">int</span> cnt;</span><br><span class="line"><span class="keyword">double</span> W[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line">T C[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); <span class="built_in">FL</span>(H, <span class="number">0</span>); <span class="built_in">FL</span>(W, <span class="number">0</span>); <span class="built_in">FL</span>(C, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdI</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">double</span> w)</span> </span>&#123;</span><br><span class="line">Nt[++cnt] = I[u]; To[cnt] = v; C[cnt] = c; W[I[u] = cnt] = w; </span><br><span class="line">Nt[++cnt] = I[v]; To[cnt] = u; C[cnt] = <span class="number">0</span>; W[I[v] = cnt] = -w; </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">int</span> x, y; &#125; A[N_&lt;&lt;<span class="number">1</span>];</span><br><span class="line">Edge&lt;<span class="keyword">int</span>, N_, N_*N_&gt; I;</span><br><span class="line"><span class="keyword">double</span> Far[N_];</span><br><span class="line"><span class="keyword">int</span> n, s, t, ans;</span><br><span class="line"><span class="keyword">bool</span> Vv[N_], Vq[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fl)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Spfa</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="comment">//freopen(&quot;I:/Code/Data/WA.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n&lt;&lt;<span class="number">1</span>) IN &gt;&gt; A[i].x &gt;&gt; A[i].y;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, n+<span class="number">1</span>, n&lt;&lt;<span class="number">1</span>) </span><br><span class="line">I.<span class="built_in">AdI</span>(i, v, <span class="number">1</span>, <span class="built_in">Dis</span>(i, v));</span><br><span class="line"></span><br><span class="line">s = <span class="number">0</span>, t = (n &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) I.<span class="built_in">AdI</span>(s, i, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">IR</span>(i, n+<span class="number">1</span>, n&lt;&lt;<span class="number">1</span>) I.<span class="built_in">AdI</span>(i, t, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">Spfa</span>()) </span><br><span class="line"><span class="built_in">FL</span>(Vv, <span class="number">0</span>), <span class="built_in">Dic</span>(s, INF);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i,<span class="number">1</span>,n) <span class="built_in">ER</span>(v,k,I,i,I) <span class="keyword">if</span>(!I.C[v] &amp;&amp; k != s) &#123; cout &lt;&lt; k-n &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>( <span class="built_in">pow</span>(A[x].x - A[y].x, <span class="number">2</span>) + <span class="built_in">pow</span>(A[x].y- A[y].y, <span class="number">2</span>) ); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; Q;   Q.<span class="built_in">push</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">1</span>, N_) Far[i] = INF;</span><br><span class="line"></span><br><span class="line">Far[s] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">FL</span>(Vq, <span class="number">0</span>);     Vq[s] = <span class="number">1</span>; </span><br><span class="line">I.H[s] = I.I[s];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(!Q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> tp = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">Vq[tp] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i,v,I,tp,I) &#123;</span><br><span class="line"><span class="keyword">if</span>(Far[tp] + I.W[i] - Far[v] &lt; EPS &amp;&amp; <span class="built_in">abs</span>(Far[tp]+I.W[i]-Far[v]) &gt; EPS &amp;&amp; I.C[i]) &#123;</span><br><span class="line">Far[v] = Far[tp] + I.W[i];</span><br><span class="line">I.H[v] = I.I[v];</span><br><span class="line"><span class="keyword">if</span>(!Vq[v]) Q.<span class="built_in">push</span>(v), Vq[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(Far[t]-INF) &gt; EPS;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fl)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == t) <span class="keyword">return</span> fl;</span><br><span class="line"><span class="keyword">int</span> res = fl; Vv[x] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,H) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">abs</span>(Far[x]+I.W[i]-Far[v])&lt;=EPS &amp;&amp; I.C[i] &amp;&amp; !Vv[v]) &#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">Dic</span>(v, <span class="built_in">min</span>(fl, I.C[i]));</span><br><span class="line"></span><br><span class="line">I.H[x] = i;  ans += k * I.W[i];</span><br><span class="line">I.C[i] -= k, I.C[i^<span class="number">1</span>] += k; res -= k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!res) <span class="keyword">return</span> fl;</span><br><span class="line"><span class="keyword">if</span>(!k) Far[v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Vv[x] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> fl - res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spfa </tag>
            
            <tag> 二分图 </tag>
            
            <tag> 二分图匹配 </tag>
            
            <tag> 网络流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 二分图带权匹配 </tag>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing379 捉迷藏</title>
      <link href="/2021/11/12/AcWing379%E6%8D%89%E8%BF%B7%E8%97%8F/"/>
      <url>/2021/11/12/AcWing379%E6%8D%89%E8%BF%B7%E8%97%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing379"><a href="#AcWing379" class="headerlink" title="AcWing379"></a><a href="https://www.acwing.com/problem/content/381/">AcWing379</a></h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">2e2</span> + <span class="number">2</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">1e4</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M&lt;&lt;<span class="number">1</span>], To[M&lt;&lt;<span class="number">1</span>], I[M&lt;&lt;<span class="number">1</span>]; <span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ad</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = I[u]; To[I[u] = cnt] = v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;N_*N_, M_&gt; I;</span><br><span class="line"><span class="keyword">int</span> Ada[N_*N_];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">bool</span> Vv[N_*N_], E[N_][N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Aug</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line">E[u][v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) E[i][i] =<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(k, <span class="number">1</span>, n) <span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, <span class="number">1</span>, n) </span><br><span class="line">E[i][v] |= (E[i][k] &amp;&amp; E[k][v]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, <span class="number">1</span>, n) </span><br><span class="line"><span class="keyword">if</span>(E[i][v] &amp;&amp; i != v) I.<span class="built_in">Ad</span>(i, v+n); </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) </span><br><span class="line"><span class="built_in">FL</span>(Vv, <span class="number">0</span>), ans += <span class="built_in">Aug</span>(i);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; n - ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Aug</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) <span class="keyword">if</span>(!Vv[v] &amp;&amp; (Vv[v]=<span class="number">1</span>) &amp;&amp; (!Ada[v]||<span class="built_in">Aug</span>(Ada[v]))) </span><br><span class="line"><span class="keyword">return</span> Ada[v] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 二分图 </tag>
            
            <tag> 二分图匹配 </tag>
            
            <tag> 最小路径点覆盖 </tag>
            
            <tag> 增广路算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing377</title>
      <link href="/2021/11/12/AcWing377MuddyField/"/>
      <url>/2021/11/12/AcWing377MuddyField/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing377"><a href="#AcWing377" class="headerlink" title="AcWing377"></a><a href="https://www.acwing.com/problem/content/379/">AcWing377</a></h3><h3 id="每个连续行和连续列视为节点"><a href="#每个连续行和连续列视为节点" class="headerlink" title="每个连续行和连续列视为节点"></a>每个连续行和连续列视为节点</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">50</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M&lt;&lt;<span class="number">1</span>], To[M&lt;&lt;<span class="number">1</span>], I[N&lt;&lt;<span class="number">1</span>]; <span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ad</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = I[u]; To[I[u] = cnt] = v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;N_*N_, N_*N_&gt; I;</span><br><span class="line"><span class="keyword">int</span> X[N_*N_], Y[N_*N_], Ada[N_*N_];</span><br><span class="line"><span class="keyword">int</span> n, m, xct, yct;</span><br><span class="line"><span class="keyword">bool</span> Mp[N_][N_], Vv[N_*N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Aug</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">H</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) &#123; </span><br><span class="line"><span class="built_in">IR</span>(v, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">Mp[i][v] = ch == <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, <span class="number">1</span>, m) </span><br><span class="line"><span class="keyword">if</span>(Mp[i][v]) X[<span class="built_in">H</span>(i, v)] = Mp[i][v<span class="number">-1</span>] ? xct : ++xct;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(v, <span class="number">1</span>, m) <span class="built_in">IR</span>(i, <span class="number">1</span>, n)</span><br><span class="line"><span class="keyword">if</span>(Mp[i][v]) Y[<span class="built_in">H</span>(i, v)] = Mp[i<span class="number">-1</span>][v] ? yct : ++yct; </span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, <span class="number">1</span>, m) </span><br><span class="line"><span class="keyword">if</span>(Mp[i][v]) I.<span class="built_in">Ad</span>(X[<span class="built_in">H</span>(i, v)], Y[<span class="built_in">H</span>(i, v)]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, xct) </span><br><span class="line"><span class="built_in">FL</span>(Vv, <span class="number">0</span>), ans += <span class="built_in">Aug</span>(i);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">H</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x<span class="number">-1</span>)*m + y; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Aug</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) <span class="keyword">if</span>(!Vv[v] &amp;&amp; (Vv[v] = <span class="number">1</span>) &amp;&amp; (!Ada[v] || <span class="built_in">Aug</span>(Ada[v]))) </span><br><span class="line"><span class="keyword">return</span> Ada[v] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> 二分图匹配 </tag>
            
            <tag> 二分图最小点覆盖 </tag>
            
            <tag> 增广路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing376 Machine Schedule</title>
      <link href="/2021/11/12/AcWing376MachineSchedule/"/>
      <url>/2021/11/12/AcWing376MachineSchedule/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing376"><a href="#AcWing376" class="headerlink" title="AcWing376"></a><a href="https://www.acwing.com/problem/content/description/378/">AcWing376</a></h3><h3 id="注意AcWing题意和进阶指南不同"><a href="#注意AcWing题意和进阶指南不同" class="headerlink" title="注意AcWing题意和进阶指南不同"></a>注意AcWing题意和进阶指南不同</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q, k) for(int i = p.k[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">2e2</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">1e3</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M &lt;&lt; <span class="number">1</span>], To[M &lt;&lt; <span class="number">1</span>], I[M &lt;&lt; <span class="number">1</span>]; <span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ad</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = I[u]; To[I[u] = cnt] = v; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;N_, M_&gt; I;</span><br><span class="line"><span class="keyword">int</span> Ada[M_];</span><br><span class="line"><span class="keyword">int</span> n, m, k;</span><br><span class="line"><span class="keyword">bool</span> Vv[M_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Aug</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">IN &gt;&gt; n; </span><br><span class="line"><span class="keyword">if</span>(!n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">I.<span class="built_in">Cl</span>(); <span class="built_in">FL</span>(Ada, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">IN &gt;&gt; m &gt;&gt; k;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, k) &#123; </span><br><span class="line"><span class="keyword">int</span> u, v, pos; IN &gt;&gt; pos &gt;&gt; u &gt;&gt; v; </span><br><span class="line"><span class="keyword">if</span>(!u || !v) <span class="keyword">continue</span>;</span><br><span class="line">I.<span class="built_in">Ad</span>(u, v+m+n); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) </span><br><span class="line"><span class="built_in">FL</span>(Vv, <span class="number">0</span>), ans += <span class="built_in">Aug</span>(i);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Aug</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i,v,I,x,I) <span class="keyword">if</span>(!Vv[v] &amp;&amp; (Vv[v] = <span class="number">1</span>) &amp;&amp; (!Ada[v] || <span class="built_in">Aug</span>(Ada[v])) ) <span class="keyword">return</span> Ada[v] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> 二分图最小点覆盖 </tag>
            
            <tag> 增广路 </tag>
            
            <tag> 二分图最大匹配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing380 舞动的夜晚</title>
      <link href="/2021/11/11/AcWing380%E8%88%9E%E5%8A%A8%E7%9A%84%E5%A4%9C%E6%99%9A/"/>
      <url>/2021/11/11/AcWing380%E8%88%9E%E5%8A%A8%E7%9A%84%E5%A4%9C%E6%99%9A/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing380"><a href="#AcWing380" class="headerlink" title="AcWing380"></a><a href="https://www.acwing.com/problem/content/382/">AcWing380</a></h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q) for(int i = p.Hd[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e4</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E_ = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M &lt;&lt; <span class="number">1</span>], To[M &lt;&lt; <span class="number">1</span>], Pos[M &lt;&lt; <span class="number">1</span>], Hd[N]; <span class="keyword">int</span> cnt;</span><br><span class="line">T Val[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> I[N];</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(Hd, <span class="number">0</span>); <span class="built_in">FL</span>(Val, <span class="number">0</span>); <span class="built_in">FL</span>(I, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AdI</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w, <span class="keyword">int</span> pos = <span class="number">0</span>)</span> </span>&#123; Nt[++cnt] = I[u]; Val[cnt] = w; Pos[cnt] = pos; To[I[u] = cnt] = v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">T A[N];</span><br><span class="line"><span class="keyword">int</span> tp, num;</span><br><span class="line"><span class="built_in">Stack</span>() &#123; <span class="built_in">FL</span>(A, <span class="number">0</span>); tp = num = <span class="number">0</span>; &#125;</span><br><span class="line"><span class="function">T <span class="title">Tp</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> A[tp]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pp</span><span class="params">()</span> </span>&#123; num = --tp; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ph</span><span class="params">(<span class="keyword">const</span> T&amp; x)</span> </span>&#123; A[num = ++tp] = x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(A, <span class="number">0</span>); tp = num = <span class="number">0</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Stack&lt;<span class="keyword">int</span>, N_&lt;&lt;<span class="number">1</span> &gt; Sk;</span><br><span class="line">Edge&lt;<span class="keyword">int</span>, N_&lt;&lt;<span class="number">1</span>, E_&lt;&lt;<span class="number">1</span>&gt; G;</span><br><span class="line"><span class="keyword">int</span> D[N_&lt;&lt;<span class="number">1</span>], Ms[N_&lt;&lt;<span class="number">1</span>], Fn[N_&lt;&lt;<span class="number">1</span>], Lw[N_&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, e, s, t, cnt, tot, pos;</span><br><span class="line"><span class="keyword">bool</span> Vk[N_&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fl)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Hg</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m &gt;&gt; e;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, e) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line">G.<span class="built_in">AdI</span>(u, v+n, <span class="number">1</span>, i); G.<span class="built_in">AdI</span>(v+n, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) G.<span class="built_in">AdI</span>(<span class="number">0</span>, i, <span class="number">1</span>), G.<span class="built_in">AdI</span>(i, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">t = n + m + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, n+<span class="number">1</span>, n+m) G.<span class="built_in">AdI</span>(i, t, <span class="number">1</span>), G.<span class="built_in">AdI</span>(t, i, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">Hg</span>()) </span><br><span class="line">tot += <span class="built_in">Dic</span>(s, INF);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">0</span>, n+m+<span class="number">1</span>) G.Hd[i] = G.I[i]; </span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">0</span>, n+m+<span class="number">1</span>) <span class="keyword">if</span>(!Ms[i]) </span><br><span class="line"><span class="built_in">Tarjan</span>(i), Sk.<span class="built_in">Cl</span>();</span><br><span class="line"></span><br><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">ER</span>(v, k, G, i) </span><br><span class="line"><span class="keyword">if</span>(G.Val[v] &amp;&amp; Ms[i] != Ms[k] &amp;&amp; G.Pos[v]) </span><br><span class="line">Q.<span class="built_in">push</span>(-G.Pos[v]);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; Q.<span class="built_in">size</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(Q.<span class="built_in">size</span>()) &#123; cout &lt;&lt; -Q.<span class="built_in">top</span>() &lt;&lt; <span class="string">&quot; &quot;</span>;  Q.<span class="built_in">pop</span>(); &#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Hg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">FL</span>(D, <span class="number">0</span>);   D[s] = <span class="number">1</span>;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; Q;  Q.<span class="built_in">push</span>(s);</span><br><span class="line">G.Hd[s] = G.I[s];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(Q.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = G.I[x], v = G.To[i]; i; i = G.Nt[i], v = G.To[i]) </span><br><span class="line"><span class="keyword">if</span>(G.Val[i] &amp;&amp; !D[v]) &#123;</span><br><span class="line">D[v] = D[x] + <span class="number">1</span>, Q.<span class="built_in">push</span>(v), G.Hd[v] = G.I[v];</span><br><span class="line"><span class="keyword">if</span>(v == t) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dic</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fl)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x == t) <span class="keyword">return</span> fl;</span><br><span class="line"><span class="keyword">int</span> res = fl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = G.Hd[x], v = G.To[i]; i; i = G.Nt[i], v = G.To[i]) </span><br><span class="line"><span class="keyword">if</span>(G.Val[i] &amp;&amp; D[v] == D[x] + <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> k = <span class="built_in">Dic</span>(v, <span class="built_in">min</span>(fl, G.Val[i]));</span><br><span class="line">G.Val[i] -= k, G.Val[i^<span class="number">1</span>] += k; res -= k;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!res) <span class="keyword">return</span> fl;</span><br><span class="line"><span class="keyword">if</span>(!k) D[v] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fl - res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Fn[x] = Lw[x] = ++pos;</span><br><span class="line">Sk.<span class="built_in">Ph</span>(x); Vk[x] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i, v, G, x) <span class="keyword">if</span>(G.Val[i])</span><br><span class="line"><span class="keyword">if</span>(!Fn[v]) <span class="built_in">Tarjan</span>(v), Lw[x] = <span class="built_in">min</span>(Lw[x], Lw[v]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Vk[v])  Lw[x] = <span class="built_in">min</span>(Lw[x], Fn[v]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Fn[x] == Lw[x] &amp;&amp; ++cnt) &#123;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">y = Sk.<span class="built_in">Tp</span>(); Sk.<span class="built_in">Pp</span>(); Vk[y] = <span class="number">0</span>;</span><br><span class="line">Ms[y] = cnt;</span><br><span class="line">&#125; <span class="keyword">while</span>(y != x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Tarjan </tag>
            
            <tag> SCC </tag>
            
            <tag> 网络流 </tag>
            
            <tag> 最大流 </tag>
            
            <tag> Dinic </tag>
            
            <tag> 二分图最大匹配 </tag>
            
            <tag> 二分图最大匹配的必须边和可行边 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH6802</title>
      <link href="/2021/11/10/CH6802%E8%BD%A6%E7%9A%84%E6%94%BE%E7%BD%AE/"/>
      <url>/2021/11/10/CH6802%E8%BD%A6%E7%9A%84%E6%94%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="CH6802"><a href="#CH6802" class="headerlink" title="CH6802"></a><a href="http://noi-test.zzstep.com/contest/0x60%E3%80%8C%E5%9B%BE%E8%AE%BA%E3%80%8D%E4%BE%8B%E9%A2%98/6802%20%E8%BB%8A%E7%9A%84%E6%94%BE%E7%BD%AE">CH6802</a></h3><h3 id="每行每列视为一个节点-行为左部-列为右部"><a href="#每行每列视为一个节点-行为左部-列为右部" class="headerlink" title="每行每列视为一个节点, 行为左部, 列为右部"></a>每行每列视为一个节点, 行为左部, 列为右部</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q) for(int i = p.Hd[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">5e2</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">5e2</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E_ = <span class="number">5e4</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M &lt;&lt; <span class="number">1</span>], To[M &lt;&lt; <span class="number">1</span>], Hd[N]; <span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(Hd, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = Hd[u]; To[Hd[u] = cnt] = v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;N_, E_&gt; G;</span><br><span class="line"><span class="keyword">int</span> Ada[N_ + M_];</span><br><span class="line"><span class="keyword">int</span> n, m, e;</span><br><span class="line"><span class="keyword">bool</span> Vv[N_ + M_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Aug</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m &gt;&gt; e;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, e) &#123; <span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v; G.<span class="built_in">Add</span>(u, v + n); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) </span><br><span class="line"><span class="built_in">FL</span>(Vv, <span class="number">0</span>), ans += <span class="built_in">Aug</span>(i);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Aug</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i, v, G, x) <span class="keyword">if</span>(!Vv[v] &amp;&amp; (Vv[v] = <span class="number">1</span>) &amp;&amp; (!Ada[v] || <span class="built_in">Aug</span>(Ada[v]) ) ) <span class="keyword">return</span> Ada[v] = x;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二分图 </tag>
            
            <tag> 二分图最大匹配 </tag>
            
            <tag> 增广路算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing368 银河</title>
      <link href="/2021/11/08/AcWing368%E9%93%B6%E6%B2%B3/"/>
      <url>/2021/11/08/AcWing368%E9%93%B6%E6%B2%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing368"><a href="#AcWing368" class="headerlink" title="AcWing368"></a><a href="https://www.acwing.com/problem/content/370/">AcWing368</a></h3><h3 id="考虑每个SCC的边权和一定-0-否则无解"><a href="#考虑每个SCC的边权和一定-0-否则无解" class="headerlink" title="考虑每个SCC的边权和一定=0, 否则无解"></a>考虑每个SCC的边权和一定=0, 否则无解</h3><h3 id="Tarjan缩点-DAG上拓扑排序dp求最长路-然而缩点之后SPFA就可以卡过去"><a href="#Tarjan缩点-DAG上拓扑排序dp求最长路-然而缩点之后SPFA就可以卡过去" class="headerlink" title="Tarjan缩点, DAG上拓扑排序dp求最长路, 然而缩点之后SPFA就可以卡过去"></a>Tarjan缩点, DAG上拓扑排序dp求最长路, 然而缩点之后SPFA就可以卡过去</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q) for(int i = p.Hd[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">2e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">2e5</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">T A[N]; <span class="keyword">int</span> tp, num;</span><br><span class="line"><span class="built_in">Stack</span>() &#123; <span class="built_in">FL</span>(A, <span class="number">0</span>); tp = num = <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">Tp</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> A[tp]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ph</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span> </span>&#123; A[num = ++tp] = x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pp</span><span class="params">()</span> </span>&#123; num = --tp; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M &lt;&lt; <span class="number">1</span>], To[M &lt;&lt; <span class="number">1</span>], Hd[N]; <span class="keyword">int</span> cnt;</span><br><span class="line">T Val[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(Hd, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w)</span> </span>&#123; Nt[++cnt] = Hd[u]; Val[cnt] = w; To[Hd[u] = cnt] = v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> x_ = <span class="number">0</span>, <span class="keyword">int</span> y_ = <span class="number">0</span>) &#123; x = x_; y = y_; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Stack&lt;<span class="keyword">int</span>, N_&gt; Sk;</span><br><span class="line">Edge&lt;<span class="keyword">int</span>, N_, M_&gt; G, S;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Scc[N_];</span><br><span class="line"><span class="keyword">int</span> Far[N_], Low[N_], Dfn[N_], Mscc[N_], Sscc[N_];</span><br><span class="line"><span class="keyword">int</span> n, m, ns, pos, cnt;</span><br><span class="line"><span class="keyword">bool</span> Vv[N_], Vsk[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">(<span class="keyword">const</span> Edge&lt;T, N, M&gt;&amp; G, <span class="keyword">int</span> s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> opt, a, b; IN &gt;&gt; opt &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(opt) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: G.<span class="built_in">Add</span>(b, a ,<span class="number">0</span>); G.<span class="built_in">Add</span>(a, b, <span class="number">0</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: G.<span class="built_in">Add</span>(a, b, <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: G.<span class="built_in">Add</span>(b, a, <span class="number">0</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>: G.<span class="built_in">Add</span>(b, a, <span class="number">1</span>); <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>: G.<span class="built_in">Add</span>(a, b, <span class="number">0</span>); <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) G.<span class="built_in">Add</span>(<span class="number">0</span>, i, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Tarjan</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">0</span>, n) <span class="built_in">ER</span>(v, k, G, i) </span><br><span class="line"><span class="keyword">if</span>(Mscc[i] != Mscc[k]) </span><br><span class="line">S.<span class="built_in">Add</span>(Mscc[i], Mscc[k], G.Val[v]);</span><br><span class="line"><span class="keyword">else</span> Sscc[Mscc[i]] += G.Val[v];</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, cnt) <span class="keyword">if</span>(Sscc[i] &gt; <span class="number">0</span> &amp;&amp; Scc[i].<span class="built_in">size</span>() &gt; <span class="number">1</span>) &#123; cout &lt;&lt; <span class="string">&quot;-1\n&quot;</span>; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Spfa</span>(S, Mscc[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, cnt) </span><br><span class="line">ans += Far[i] * Scc[i].<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Low[x] = Dfn[x] = ++pos;</span><br><span class="line"></span><br><span class="line">Sk.<span class="built_in">Ph</span>(x); Vsk[x] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">ER</span>(i, v, G, x) </span><br><span class="line"><span class="keyword">if</span>(!Dfn[v]) <span class="built_in">Tarjan</span>(v), Low[x] = <span class="built_in">min</span>(Low[x], Low[v]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Vsk[v]) Low[x] = <span class="built_in">min</span>(Low[x], Dfn[v]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Dfn[x] == Low[x]) &#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">int</span> y;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">y = Sk.<span class="built_in">Tp</span>();    Sk.<span class="built_in">Pp</span>();</span><br><span class="line">Scc[cnt].<span class="built_in">push_back</span>(y);</span><br><span class="line">Mscc[y] = cnt;Vsk[y] = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">while</span>(y != x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">(<span class="keyword">const</span> Edge&lt;T, N, M&gt; &amp;G, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; Q; Q.<span class="built_in">push</span>(s); </span><br><span class="line"><span class="built_in">FL</span>(Vv, <span class="number">0</span>);   Vv[s] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">FL</span>(Far, <span class="number">0xcf</span>); Far[s] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(Q.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> tp = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">Vv[tp] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i, v, G, tp) <span class="keyword">if</span>(Far[v] &lt; Far[tp] + G.Val[i]) &#123;</span><br><span class="line"><span class="keyword">if</span>(!Vv[v]) Q.<span class="built_in">push</span>(v), Vv[v] = <span class="number">1</span>;</span><br><span class="line">Far[v] = Far[tp] + G.Val[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Tarjan </tag>
            
            <tag> 缩点 </tag>
            
            <tag> SCC </tag>
            
            <tag> 差分约束 </tag>
            
            <tag> SPFA </tag>
            
            <tag> 最长路 </tag>
            
            <tag> 拓扑排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing362 Intervals</title>
      <link href="/2021/11/07/AcWing362Intervals/"/>
      <url>/2021/11/07/AcWing362Intervals/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing362"><a href="#AcWing362" class="headerlink" title="AcWing362"></a><a href="https://www.acwing.com/problem/content/description/364/">AcWing362</a></h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q) for(int i = p.Hd[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">25e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M &lt;&lt; <span class="number">1</span>], To[M &lt;&lt; <span class="number">1</span>], Hd[N]; <span class="keyword">int</span> cnt;</span><br><span class="line">T Val[M &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(Hd, <span class="number">0</span>); <span class="built_in">FL</span>(Val, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, T w)</span> </span>&#123; Nt[++cnt] = Hd[u]; To[cnt] = v; Val[Hd[u] = cnt] = w; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;<span class="keyword">int</span>, N_, M_&gt; G;</span><br><span class="line"><span class="keyword">int</span> Far[N_];</span><br><span class="line"><span class="keyword">int</span> n, m, mx;</span><br><span class="line"><span class="keyword">bool</span> Vv[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w; IN &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">G.<span class="built_in">Add</span>(u, ++v, w);</span><br><span class="line">mx = <span class="built_in">max</span>(mx, <span class="built_in">max</span>(v+<span class="number">1</span>, u+<span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">0</span>, mx) G.<span class="built_in">Add</span>(i, i+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, mx) G.<span class="built_in">Add</span>(i, i<span class="number">-1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Spfa</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; Far[mx] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">queue&lt;<span class="keyword">int</span>&gt; Q; Q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">FL</span>(Far, <span class="number">0xcf</span>); Far[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(Q.<span class="built_in">size</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> tp = Q.<span class="built_in">front</span>(); Q.<span class="built_in">pop</span>();</span><br><span class="line">Vv[tp] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i, v, G, tp) </span><br><span class="line"><span class="keyword">if</span>(Far[tp] + G.Val[i] &gt; Far[v]) &#123;</span><br><span class="line">Far[v] = Far[tp] + G.Val[i];</span><br><span class="line"><span class="keyword">if</span>(!Vv[v]) Q.<span class="built_in">push</span>(v), Vv[v] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Spfa </tag>
            
            <tag> 差分约束 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing367 学校网络</title>
      <link href="/2021/11/07/AcWing367NetWorkofSchools/"/>
      <url>/2021/11/07/AcWing367NetWorkofSchools/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing367"><a href="#AcWing367" class="headerlink" title="AcWing367"></a><a href="https://www.acwing.com/problem/content/description/369/">AcWing367</a></h3><h3 id="设DAG中入度为零的点的数量为p-出度为0的点的数量为q-则至少添加max-p-q-条有向边可以使得整张图强连通"><a href="#设DAG中入度为零的点的数量为p-出度为0的点的数量为q-则至少添加max-p-q-条有向边可以使得整张图强连通" class="headerlink" title="设DAG中入度为零的点的数量为p, 出度为0的点的数量为q, 则至少添加max(p, q) 条有向边可以使得整张图强连通"></a>设DAG中入度为零的点的数量为p, 出度为0的点的数量为q, 则至少添加max(p, q) 条有向边可以使得整张图强连通</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q) for(int i = p.Hd[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">100</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M &lt;&lt; <span class="number">1</span>], To[M &lt;&lt; <span class="number">1</span>], Hd[N];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = Hd[u]; To[Hd[u] = cnt] = v; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">T A[N]; <span class="keyword">int</span> num, tp;</span><br><span class="line"><span class="built_in">Stack</span>() &#123; <span class="built_in">FL</span>(A, <span class="number">0</span>); num = tp = <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">Tp</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> A[tp]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ph</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span> </span>&#123; A[num = ++tp] = x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pp</span><span class="params">()</span> </span>&#123; num = --tp; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(A, <span class="number">0</span>); num = tp = <span class="number">0</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Stack&lt;<span class="keyword">int</span>, N_&gt; Sk;</span><br><span class="line">Edge&lt;N_, N_ * N_&gt; G;</span><br><span class="line"><span class="keyword">int</span> Mc[N_], Low[N_], Dfn[N_], In[N_], Out[N_];</span><br><span class="line"><span class="keyword">int</span> n, m, cnt, pos;</span><br><span class="line"><span class="keyword">bool</span> Vsk[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line"><span class="keyword">int</span> v; IN &gt;&gt; v;</span><br><span class="line"><span class="keyword">while</span>(v) &#123; G.<span class="built_in">Add</span>(i, v); IN &gt;&gt; v; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(!Mc[i])</span><br><span class="line"><span class="built_in">Tarjan</span>(i), Sk.<span class="built_in">Cl</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">ER</span>(k, v, G, i) <span class="keyword">if</span>(Mc[i] != Mc[v]) </span><br><span class="line">In[Mc[v]]++, Out[Mc[i]]++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(cnt == <span class="number">1</span>) &#123; cout &lt;&lt; <span class="string">&quot;1\n0&quot;</span>; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>, tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, cnt) ans += !In[i];</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, cnt) tmp += !Out[i]; </span><br><span class="line">cout &lt;&lt; <span class="built_in">max</span>(ans, tmp) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Low[x] = Dfn[x] = ++pos;</span><br><span class="line">Sk.<span class="built_in">Ph</span>(x); Vsk[x] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i, v, G, x) </span><br><span class="line"><span class="keyword">if</span>(!Dfn[v])<span class="built_in">Tarjan</span>(v), Low[x] = <span class="built_in">min</span>(Low[x], Low[v]);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Vsk[v])   Low[x] = <span class="built_in">min</span>(Low[x], Dfn[v]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Low[x] == Dfn[x]) &#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">while</span>(Sk.<span class="built_in">Tp</span>() != x) </span><br><span class="line">Mc[Sk.<span class="built_in">Tp</span>()] = cnt, Vsk[Sk.<span class="built_in">Tp</span>()] = <span class="number">0</span>, Sk.<span class="built_in">Pp</span>();</span><br><span class="line">Mc[x] = cnt, Vsk[x] = <span class="number">0</span>, Sk.<span class="built_in">Pp</span>(); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Tarjan </tag>
            
            <tag> 缩点 </tag>
            
            <tag> SCC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Acwing366 Watch Cow</title>
      <link href="/2021/11/07/AcWing366WatchCow/"/>
      <url>/2021/11/07/AcWing366WatchCow/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing366"><a href="#AcWing366" class="headerlink" title="AcWing366"></a><a href="https://www.acwing.com/problem/content/description/368/">AcWing366</a></h3><h3 id="根据邻接表的存储顺序-一条无向边的”回边”一定最先被放入一个点"><a href="#根据邻接表的存储顺序-一条无向边的”回边”一定最先被放入一个点" class="headerlink" title="根据邻接表的存储顺序, 一条无向边的”回边”一定最先被放入一个点"></a>根据邻接表的存储顺序, 一条无向边的”回边”一定最先被放入一个点</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码:"></a>代码:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q) for(int  i = p.Hd[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e4</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">5e4</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">T A[N]; <span class="keyword">int</span> tp, sum;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Stack</span>() &#123; <span class="built_in">FL</span>(A, <span class="number">0</span>); tp = sum = <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">Tp</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> A[tp]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Num</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sum; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ph</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span> </span>&#123; A[sum = ++tp] = x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pp</span><span class="params">()</span> </span>&#123; sum = --tp; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M &lt;&lt; <span class="number">1</span>], To[M &lt;&lt; <span class="number">1</span>], Hd[N];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(Hd, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = Hd[u]; To[Hd[u] = cnt] = v; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(Hd, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;N_, M_&gt; G;</span><br><span class="line">Stack&lt;<span class="keyword">int</span>, M_ &lt;&lt; <span class="number">1</span>&gt; Sk;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Euler</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123; <span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v; G.<span class="built_in">Add</span>(u, v); G.<span class="built_in">Add</span>(v, u); &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Euler</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">while</span>(Sk.<span class="built_in">Num</span>()) cout &lt;&lt; Sk.<span class="built_in">Tp</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>, Sk.<span class="built_in">Pp</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Euler</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = G.Hd[x], v = G.To[i]; i; i = G.Hd[x], v = G.To[i])</span><br><span class="line">G.Hd[x] = G.Nt[i],</span><br><span class="line"><span class="built_in">Euler</span>(v), Sk.<span class="built_in">Ph</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> Tarjan </tag>
            
            <tag> 欧拉路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing365圆桌骑士</title>
      <link href="/2021/11/07/AcWing365KnightoftheRoundTable/"/>
      <url>/2021/11/07/AcWing365KnightoftheRoundTable/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing365"><a href="#AcWing365" class="headerlink" title="AcWing365"></a><a href="https://www.acwing.com/problem/content/367/">AcWing365</a></h3><h3 id="建补图-求v-DCC-对于每一个v-DCC-判断是否有奇环"><a href="#建补图-求v-DCC-对于每一个v-DCC-判断是否有奇环" class="headerlink" title="建补图, 求v-DCC, 对于每一个v-DCC, 判断是否有奇环"></a>建补图, 求v-DCC, 对于每一个v-DCC, 判断是否有奇环</h3><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><h4 id="一个割点可能被包含于多个v-DCC-染色判奇环时注意清空数组"><a href="#一个割点可能被包含于多个v-DCC-染色判奇环时注意清空数组" class="headerlink" title="一个割点可能被包含于多个v-DCC, 染色判奇环时注意清空数组"></a>一个割点可能被包含于多个v-DCC, 染色判奇环时注意清空数组</h4></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, v, k) for(int i = v; i &lt;= k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, v, k) for(int i = v; i &lt;  k; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, v, k) for(int i = v; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, v, k) for(int i = v-1; i &gt;= k; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q) for(int i = p.Hd[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e3</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">1e6</span> + <span class="number">2</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> &#123;</span></span><br><span class="line">T A[N];</span><br><span class="line"><span class="keyword">int</span> cnt, tp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Stack</span>() &#123; <span class="built_in">FL</span>(A, <span class="number">0</span>); cnt = <span class="number">0</span>; tp = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">T <span class="title">Tp</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> A[tp]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Num</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> cnt; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pp</span><span class="params">()</span> </span>&#123; tp--; cnt--; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ph</span><span class="params">(<span class="keyword">const</span> T &amp;x)</span> </span>&#123; A[++tp] = x; cnt++; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(A, <span class="number">0</span>); cnt = <span class="number">0</span>; tp = <span class="number">0</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M &lt;&lt; <span class="number">1</span>], To[M &lt;&lt; <span class="number">1</span>], Hd[N];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Edge</span>() &#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(Hd, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123; Nt[++cnt] = Hd[u]; To[Hd[u] = cnt] = v; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123; <span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(Hd, <span class="number">0</span>); cnt = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Stack&lt;<span class="keyword">int</span>, N_&gt; Sk;</span><br><span class="line">Edge&lt;N_, M_&gt; G;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Dcc[N_];</span><br><span class="line"><span class="keyword">int</span> Dfn[N_], Low[N_], Cl[N_];</span><br><span class="line"><span class="keyword">int</span> n, m, cnt;</span><br><span class="line"><span class="keyword">bool</span> Ve[N_][N_], Vv[N_], Vc[N_][N_], Vl[N_], Ct[N_], Fg[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> rt)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos, <span class="keyword">bool</span> clo)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(n + m) &#123;</span><br><span class="line"><span class="built_in">FL</span>(Dfn, <span class="number">0</span>);  <span class="built_in">FL</span>(Low, <span class="number">0</span>); <span class="built_in">FL</span>(Ct, <span class="number">0</span>); <span class="built_in">FL</span>(Cl, <span class="number">0x3f</span>);</span><br><span class="line"><span class="built_in">FL</span>(Ve, <span class="number">0</span>);   <span class="built_in">FL</span>(Vv, <span class="number">0</span>);  <span class="built_in">FL</span>(Vc, <span class="number">0</span>); <span class="built_in">FL</span>(Vl, <span class="number">0</span>); <span class="built_in">FL</span>(Fg, <span class="number">0</span>);</span><br><span class="line">G.<span class="built_in">Cl</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123; <span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;  Ve[u][v] = <span class="number">1</span>; Ve[v][u] = <span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, i+<span class="number">1</span>, n) <span class="keyword">if</span>(!Ve[i][v]) </span><br><span class="line">G.<span class="built_in">Add</span>(i, v), G.<span class="built_in">Add</span>(v, i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(!Vv[i]) </span><br><span class="line"><span class="built_in">Tarjan</span>(i, <span class="number">1</span>, i), Sk.<span class="built_in">Cl</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Debug</span></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, cnt) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n=======================\n&quot;</span>;</span><br><span class="line"><span class="built_in">Ir</span>(v, <span class="number">0</span>, Dcc[i].<span class="built_in">size</span>()) </span><br><span class="line">cout &lt;&lt; Dcc[i][v] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n=======================\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, cnt) </span><br><span class="line"><span class="built_in">Pre</span>(Dcc[i][<span class="number">0</span>], i, <span class="number">0</span>), <span class="built_in">FL</span>(Cl, <span class="number">0x3f</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, cnt) <span class="keyword">if</span>(Fg[i]) </span><br><span class="line"><span class="built_in">Ir</span>(v, <span class="number">0</span>, Dcc[i].<span class="built_in">size</span>()) Vl[Dcc[i][v]] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) </span><br><span class="line">ans += !Vl[i];</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos, <span class="keyword">int</span> rt)</span> </span>&#123;</span><br><span class="line">Dfn[x] = Low[x] = pos; </span><br><span class="line">Vv[x] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Sk.<span class="built_in">Ph</span>(x);</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">ER</span>(i, v, G, x) </span><br><span class="line"><span class="keyword">if</span>(!Dfn[v]) &#123;</span><br><span class="line"><span class="built_in">Tarjan</span>(v, pos+<span class="number">1</span>, rt);</span><br><span class="line">Low[x] = <span class="built_in">min</span>(Low[x], Low[v]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Low[v] &gt;= Dfn[x]) &#123;</span><br><span class="line">Ct[x] = ++tot &gt; <span class="number">1</span> || x != rt;</span><br><span class="line"></span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">while</span>(Sk.<span class="built_in">Num</span>() &amp;&amp; Sk.<span class="built_in">Tp</span>() != v) </span><br><span class="line">Vc[cnt][Sk.<span class="built_in">Tp</span>()] = <span class="number">1</span>, </span><br><span class="line">Dcc[cnt].<span class="built_in">push_back</span>(Sk.<span class="built_in">Tp</span>()), </span><br><span class="line">Sk.<span class="built_in">Pp</span>(); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Sk.<span class="built_in">Num</span>()) </span><br><span class="line">Vc[cnt][Sk.<span class="built_in">Tp</span>()] = <span class="number">1</span>, </span><br><span class="line">Dcc[cnt].<span class="built_in">push_back</span>(Sk.<span class="built_in">Tp</span>()), </span><br><span class="line">Sk.<span class="built_in">Pp</span>();</span><br><span class="line"></span><br><span class="line">Vc[cnt][x] = <span class="number">1</span>; Dcc[cnt].<span class="built_in">push_back</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> Low[x] = <span class="built_in">min</span>(Low[x], Dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> pos, <span class="keyword">bool</span> clo)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Fg[pos]) <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">Cl[x] = clo;</span><br><span class="line"><span class="built_in">ER</span>(i, v, G, x) <span class="keyword">if</span>(Vc[pos][v]) </span><br><span class="line"><span class="keyword">if</span>(Cl[v] == INF) <span class="built_in">Pre</span>(v, pos, clo^<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Cl[v] == clo) &#123; Fg[pos] = <span class="number">1</span>; <span class="keyword">return</span> ; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Tarjan </tag>
            
            <tag> v-DCC </tag>
            
            <tag> 奇环 </tag>
            
            <tag> 补图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing364 网络</title>
      <link href="/2021/11/06/AcWing366NetWork/"/>
      <url>/2021/11/06/AcWing366NetWork/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing365"><a href="#AcWing365" class="headerlink" title="AcWing365"></a><a href="https://www.acwing.com/problem/content/366/">AcWing365</a></h3><h3 id="缩点LCA-并查集优化"><a href="#缩点LCA-并查集优化" class="headerlink" title="缩点LCA, 并查集优化"></a>缩点LCA, 并查集优化</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, st, ed) for(int i = st; i &lt;= ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, st, ed) for(int i = st; i &gt;= ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, p, q) for(int i = p.Hd[q], v = p.To[i]; i; i = p.Nt[i], v = p.To[i])</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> FL(x, y) memset(x, y, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">2e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E_ = <span class="number">20</span> + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Uaf</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Fa[N];</span><br><span class="line"><span class="built_in">Uaf</span>() &#123;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">1</span>, N) Fa[i] = i; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fd</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Fa[x] = x == Fa[x] ? x : <span class="built_in">Fd</span>(Fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Un</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">Fa[<span class="built_in">Fd</span>(x)] = <span class="built_in">Fd</span>(y); &#125;</span><br><span class="line"><span class="keyword">int</span>&amp; <span class="keyword">operator</span>[](<span class="keyword">const</span> <span class="keyword">int</span> &amp;x) &#123;</span><br><span class="line"><span class="keyword">return</span> Fa[x]; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N, <span class="keyword">int</span> M&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Nt[M &lt;&lt; <span class="number">1</span>], To[M &lt;&lt; <span class="number">1</span>], Hd[N]; </span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="built_in">Edge</span>() &#123;</span><br><span class="line"><span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(Hd, <span class="number">0</span>);</span><br><span class="line">cnt = <span class="number">1</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">Nt[++cnt] = Hd[u]; To[Hd[u] = cnt] = v; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">FL</span>(Nt, <span class="number">0</span>); <span class="built_in">FL</span>(To, <span class="number">0</span>); <span class="built_in">FL</span>(Hd, <span class="number">0</span>);</span><br><span class="line">cnt = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;N_, M_&gt; G, S;</span><br><span class="line">Uaf&lt;N_&gt; U;</span><br><span class="line"><span class="keyword">int</span> Dfn[N_], Low[N_], Dcc[N_], F[N_][E_], Dep[N_];</span><br><span class="line"><span class="keyword">int</span> T, n, m, cnt, sum, q, idx;</span><br><span class="line"><span class="keyword">bool</span> Bg[M_ &lt;&lt; <span class="number">1</span>], Vis[N_], Mark[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fdcc</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mk</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">G.<span class="built_in">Cl</span>(); S.<span class="built_in">Cl</span>(); sum = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">FL</span>(Dfn, <span class="number">0</span>); <span class="built_in">FL</span>(Low, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">FL</span>(Vis, <span class="number">0</span>); <span class="built_in">FL</span>(Bg, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">FL</span>(Mark, <span class="number">0</span>); cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line">G.<span class="built_in">Add</span>(u, v); G.<span class="built_in">Add</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Tarjan</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(!Vis[i]) cnt++, <span class="built_in">Fdcc</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= G.cnt; i+=<span class="number">2</span>)</span><br><span class="line"><span class="keyword">if</span>(Bg[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> u = Dcc[G.To[i]], v = Dcc[G.To[i^<span class="number">1</span>]];</span><br><span class="line">S.<span class="built_in">Add</span>(u, v); S.<span class="built_in">Add</span>(v, u);</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Dep[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Pre</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">Dp</span>();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;Case &quot;</span> &lt;&lt; ++idx &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">IN &gt;&gt; q;</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="keyword">if</span>(Dcc[u] == Dcc[v]) cout &lt;&lt; sum &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout &lt;&lt; (sum -= <span class="built_in">Mk</span>(Dcc[u], Dcc[v])) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span>(n + m);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">Low[x] = Dfn[x] = pos;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i, v, G, x) <span class="keyword">if</span>(i != (last ^ <span class="number">1</span>))</span><br><span class="line"><span class="keyword">if</span>(!Dfn[v]) </span><br><span class="line"><span class="built_in">Tarjan</span>(v, i, pos+<span class="number">1</span>), Low[x] = <span class="built_in">min</span>(Low[x], Low[v]),</span><br><span class="line">Bg[i] = Bg[i^<span class="number">1</span>] = (Bg[i] | (Dfn[x] &lt; Low[v]));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">Low[x] = <span class="built_in">min</span>(Low[x], Dfn[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Fdcc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Vis[x] = <span class="number">1</span>; Dcc[x] = cnt;</span><br><span class="line"><span class="built_in">ER</span>(i, v, G, x) <span class="keyword">if</span>(!Bg[i] &amp;&amp; !Vis[v]) <span class="built_in">Fdcc</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">Ir</span>(e, <span class="number">1</span>, E_) <span class="built_in">IR</span>(i, <span class="number">1</span>, n) </span><br><span class="line">F[i][e] = F[F[i][e<span class="number">-1</span>]][e<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Dep[x] &lt; Dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="built_in">SR</span>(e, E_<span class="number">-1</span>, <span class="number">0</span>) <span class="keyword">if</span>(Dep[F[x][e]] &gt;= Dep[y]) x = F[x][e];</span><br><span class="line"><span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SR</span>(e, E_<span class="number">-1</span>, <span class="number">0</span>) <span class="keyword">if</span>(F[x][e] != F[y][e]) </span><br><span class="line">x = F[x][e], y = F[y][e];</span><br><span class="line"><span class="keyword">return</span> F[x][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">F[x][<span class="number">0</span>] = last;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i, v, S, x) <span class="keyword">if</span>(v != last) </span><br><span class="line">Dep[v] = Dep[x] + <span class="number">1</span>, <span class="built_in">Pre</span>(v, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Mk</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>, lca = <span class="built_in">Lca</span>(u, v);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> Debug</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n=======================\n&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;u = %d, v = %d, lca = %d\n&quot;</span>, u, v, lca);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;\n=======================\n&quot;</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(u != lca) &#123;</span><br><span class="line">res += !Mark[u]; Mark[u] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa = U.<span class="built_in">Fd</span>(u);</span><br><span class="line"><span class="keyword">if</span>(F[u][<span class="number">0</span>] == lca) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(fa == u) u = F[u][<span class="number">0</span>], U.<span class="built_in">Un</span>(fa, u);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Dep[fa] &lt;= Dep[lca]) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> u = fa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(v != lca) &#123;</span><br><span class="line">res += !Mark[v]; Mark[v] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fa = U.<span class="built_in">Fd</span>(v);</span><br><span class="line"><span class="keyword">if</span>(F[v][<span class="number">0</span>] == lca) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(fa == v) v = F[v][<span class="number">0</span>], U.<span class="built_in">Un</span>(fa, v);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Dep[fa] &lt;= Dep[lca]) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> v = fa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> Tarjan </tag>
            
            <tag> e-DCC </tag>
            
            <tag> 缩点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/04/Tem/"/>
      <url>/2021/11/04/Tem/</url>
      
        <content type="html"><![CDATA[<h3 id="lt-gt"><a href="#lt-gt" class="headerlink" title="&lt;++&gt;"></a><a href="++">&lt;++&gt;</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> &lt;++&gt; </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing289 环路运输</title>
      <link href="/2021/11/03/AcWing289_%E7%8E%AF%E8%B7%AF%E8%BF%90%E8%BE%93/"/>
      <url>/2021/11/03/AcWing289_%E7%8E%AF%E8%B7%AF%E8%BF%90%E8%BE%93/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing289"><a href="#AcWing289" class="headerlink" title="AcWing289"></a><a href="https://www.acwing.com/problem/content/291/">AcWing289</a></h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, st, ed) for(int i = st; i &lt;= ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, st, ed) for(int i = st; i &gt;= ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e6</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> val, pos;</span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> val_ = <span class="number">0</span>, <span class="keyword">int</span> pos_ = <span class="number">0</span>) &#123;</span><br><span class="line">val = val_, pos = pos_;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[N_];</span><br><span class="line"><span class="keyword">int</span> n, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) IN &gt;&gt; A[i];</span><br><span class="line"></span><br><span class="line">deque&lt;Node&gt; Q;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> S Q.size()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> F Q.front()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> E Q.back()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PF Q.pop_front()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PE Q.pop_back()</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> I (i % n ? i % n : n)</span></span><br><span class="line"></span><br><span class="line">ans = -INF;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, <span class="number">2</span> * n) &#123;</span><br><span class="line"><span class="keyword">while</span>(S &amp;&amp; F.pos &lt; i - n / <span class="number">2</span>) PF;</span><br><span class="line"></span><br><span class="line">ans = <span class="built_in">max</span>(ans, S ? F.val + A[I] + i : <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(S &amp;&amp; E.val &lt;= A[I] - i) PE;</span><br><span class="line"></span><br><span class="line">Q.<span class="built_in">push_back</span>(<span class="built_in">Node</span>(A[I] - i, i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 环形 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing356 严格次小生成树</title>
      <link href="/2021/11/02/AcWing356_%E4%B8%A5%E6%A0%BC%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>/2021/11/02/AcWing356_%E4%B8%A5%E6%A0%BC%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing356"><a href="#AcWing356" class="headerlink" title="AcWing356"></a><a href="https://www.acwing.com/problem/content/358/">AcWing356</a></h3><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><h4 id="求出最小生成树-考虑将一条生成树上的边换成非树边"><a href="#求出最小生成树-考虑将一条生成树上的边换成非树边" class="headerlink" title="求出最小生成树, 考虑将一条生成树上的边换成非树边"></a>求出最小生成树, 考虑将一条生成树上的边换成非树边</h4><h4 id="一条非树边可以替换其组成的环上的任意边"><a href="#一条非树边可以替换其组成的环上的任意边" class="headerlink" title="一条非树边可以替换其组成的环上的任意边"></a>一条非树边可以替换其组成的环上的任意边</h4><h4 id="考虑更新环上的次大值和最大值"><a href="#考虑更新环上的次大值和最大值" class="headerlink" title="考虑更新环上的次大值和最大值"></a>考虑更新环上的次大值和最大值</h4><h4 id="树上倍增求两点到其LCA的最大值和次大值"><a href="#树上倍增求两点到其LCA的最大值和次大值" class="headerlink" title="树上倍增求两点到其LCA的最大值和次大值"></a>树上倍增求两点到其LCA的最大值和次大值</h4><ul><li><h5 id="P-x-i-x的2-i-级祖先"><a href="#P-x-i-x的2-i-级祖先" class="headerlink" title="P[x][i], x的2^i 级祖先"></a>P[x][i], x的2^i 级祖先</h5></li><li><h5 id="F-x-i-0-1-x到其2-i-级祖先的链上的最大值-次大值"><a href="#F-x-i-0-1-x到其2-i-级祖先的链上的最大值-次大值" class="headerlink" title="F[x][i][0/1] x到其2^i 级祖先的链上的最大值/次大值"></a>F[x][i][0/1] x到其2^i 级祖先的链上的最大值/次大值</h5></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>判断是否越界 (if P[x][i]])</li><li>INF 足够大</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, st, ed) for(int i = st; i &lt;= ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, st, ed) for(int i = st; i &gt;= ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">3e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E_ = <span class="number">20</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> INF = <span class="number">0x7f7f7f7f7f7f7f7f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> next, to, val;</span><br><span class="line"><span class="built_in">Edge</span>(<span class="keyword">int</span> next_ = <span class="number">0</span>, <span class="keyword">int</span> to_ = <span class="number">0</span>, <span class="keyword">long</span> <span class="keyword">long</span> val_ = <span class="number">0</span>) &#123;</span><br><span class="line">next = next_, to = to_, val = val_; &#125;</span><br><span class="line">&#125; E[M_ &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> Head[N_];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">long</span> <span class="keyword">long</span> val)</span> </span>&#123;</span><br><span class="line">E[++cnt] = <span class="built_in">Edge</span>(Head[from], to, val);</span><br><span class="line">Head[from] = cnt; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(i) E[i].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(i) E[i].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Adj</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> val;</span><br><span class="line"><span class="built_in">Adj</span>(<span class="keyword">int</span> x_ = <span class="number">0</span>, <span class="keyword">int</span> y_ = <span class="number">0</span>, <span class="keyword">long</span> <span class="keyword">long</span> val_ = <span class="number">0</span>) &#123;</span><br><span class="line">x = x_, y = y_, val = val_; &#125;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Adj &amp;x, <span class="keyword">const</span> Adj &amp;y) &#123;</span><br><span class="line"><span class="keyword">return</span> x.val &lt; y.val; &#125;</span><br><span class="line">&#125; Te[M_];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UnionAndFind</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Fa[N_];</span><br><span class="line"></span><br><span class="line"><span class="built_in">UnionAndFind</span>() &#123;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">1</span>, N_) Fa[i] = i; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Fa[x] = Fa[x] == x ? x : <span class="built_in">Find</span>(Fa[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Find</span>(x) == <span class="built_in">Find</span>(y); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">Fa[<span class="built_in">Find</span>(x)] = <span class="built_in">Find</span>(y); &#125;</span><br><span class="line">&#125; Uf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> F[N_][E_][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> sum;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> Dep[N_], P[N_][E_];</span><br><span class="line"><span class="keyword">bool</span> Vis[M_];</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">Mx</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeP</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeF</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; <span class="keyword">long</span> <span class="keyword">long</span> w; </span><br><span class="line">IN &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">Te[i] = <span class="built_in">Adj</span>(u, v, w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(Te, Te + m);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> x = Te[i].x, y = Te[i].y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> val = Te[i].val;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Uf.<span class="built_in">Ask</span>(x, y)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">Uf.<span class="built_in">Union</span>(x, y);</span><br><span class="line"></span><br><span class="line">sum += val; Vis[i] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Add</span>(x, y, val); <span class="built_in">Add</span>(y, x, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Pre</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">MakeP</span>();</span><br><span class="line"><span class="built_in">MakeF</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = INF;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, m) <span class="keyword">if</span>(!Vis[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> x = Te[i].x, y = Te[i].y;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> val = Te[i].val;</span><br><span class="line">pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; p = <span class="built_in">Mx</span>(x, y);</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mx = p.first, mxx = p.second;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(val &gt; mx)ans = <span class="built_in">min</span>(ans, sum + val - mx);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(val == mx &amp;&amp; mxx != -INF)  ans = <span class="built_in">min</span>(ans, sum + val - mxx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i, x) <span class="keyword">if</span>(<span class="built_in">T</span>(i) != last) </span><br><span class="line">Dep[<span class="built_in">T</span>(i)] = Dep[x] + <span class="number">1</span>,</span><br><span class="line">F[<span class="built_in">T</span>(i)][<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">V</span>(i), P[<span class="built_in">T</span>(i)][<span class="number">0</span>] = x,</span><br><span class="line"><span class="built_in">Pre</span>(<span class="built_in">T</span>(i), x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeP</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">Ir</span>(e, <span class="number">1</span>, E_) <span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(P[i][e<span class="number">-1</span>])</span><br><span class="line">P[i][e] = P[P[i][e<span class="number">-1</span>]][e<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeF</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">Ir</span>(e, <span class="number">1</span>, E_) <span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(P[i][e]) </span><br><span class="line">F[i][e][<span class="number">0</span>] = <span class="built_in">max</span>(F[i][e<span class="number">-1</span>][<span class="number">0</span>], F[P[i][e<span class="number">-1</span>]][e<span class="number">-1</span>][<span class="number">0</span>]),</span><br><span class="line">F[i][e][<span class="number">1</span>] = F[i][e<span class="number">-1</span>][<span class="number">0</span>] != F[P[i][e<span class="number">-1</span>]][e<span class="number">-1</span>][<span class="number">0</span>] ?</span><br><span class="line"><span class="built_in">min</span>(F[i][e<span class="number">-1</span>][<span class="number">0</span>], F[P[i][e<span class="number">-1</span>]][e<span class="number">-1</span>][<span class="number">0</span>]) : <span class="built_in">max</span>(F[i][e<span class="number">-1</span>][<span class="number">1</span>], F[P[i][e<span class="number">-1</span>]][e<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">pair&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="keyword">long</span> <span class="keyword">long</span>&gt; <span class="title">Mx</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> mx = -INF, mxx = -INF;</span><br><span class="line"><span class="keyword">if</span>(Dep[x] &lt; Dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line"></span><br><span class="line"><span class="built_in">SR</span>(e, E_ - <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">if</span>(P[x][e] &amp;&amp; Dep[P[x][e]] &gt;= Dep[y]) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> u = F[x][e][<span class="number">0</span>], v = F[x][e][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(u &gt; mx) mxx = mx, mx = u;</span><br><span class="line"><span class="keyword">if</span>(u &gt; mxx &amp;&amp; u != mx) mxx = u;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(v &gt; mxx) mxx = v;</span><br><span class="line"></span><br><span class="line">x = P[x][e];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x == y) <span class="keyword">return</span> <span class="built_in">make_pair</span>(mx, mxx);</span><br><span class="line"></span><br><span class="line"><span class="built_in">SR</span>(e, E_ - <span class="number">1</span>, <span class="number">0</span>) <span class="keyword">if</span>(P[x][e] != P[y][e]) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T[<span class="number">4</span>] = &#123; F[x][e][<span class="number">0</span>], F[y][e][<span class="number">0</span>], F[x][e][<span class="number">1</span>], F[y][e][<span class="number">1</span>] &#125;;</span><br><span class="line"><span class="built_in">sort</span>(T, T+<span class="number">4</span>); </span><br><span class="line"><span class="keyword">int</span> idx = <span class="built_in">unique</span>(T, T+<span class="number">4</span>) - T;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, idx) &#123;</span><br><span class="line">mx = <span class="built_in">max</span>(mx, T[i]);</span><br><span class="line"><span class="keyword">if</span>(T[i] != mx) mxx = <span class="built_in">max</span>(mxx, T[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x = P[x][e]; y = P[y][e];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> u = F[x][<span class="number">0</span>][<span class="number">0</span>], v = F[y][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">mx = <span class="built_in">max</span>(mx, <span class="built_in">max</span>(u, v));</span><br><span class="line"><span class="keyword">if</span>(u != mx) mxx = <span class="built_in">max</span>(mxx, u);</span><br><span class="line"><span class="keyword">if</span>(v != mx) mxx = <span class="built_in">max</span>(mxx, v);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(mx, mxx);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> 树上倍增 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing354 天天爱跑步</title>
      <link href="/2021/11/02/AcWing354_%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5/"/>
      <url>/2021/11/02/AcWing354_%E5%A4%A9%E5%A4%A9%E7%88%B1%E8%B7%91%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing354"><a href="#AcWing354" class="headerlink" title="AcWing354"></a><a href="https://www.acwing.com/problem/content/356/">AcWing354</a></h3><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><h4 id="一条路径对一个点有贡献-当且仅当"><a href="#一条路径对一个点有贡献-当且仅当" class="headerlink" title="一条路径对一个点有贡献, 当且仅当:"></a>一条路径对一个点有贡献, 当且仅当:</h4><ol><li><h5 id="D-s-D-x-W-x-即-D-s-W-x-D-x"><a href="#D-s-D-x-W-x-即-D-s-W-x-D-x" class="headerlink" title="D[s] - D[x] = W[x], 即 D[s] = W[x] + D[x]"></a>D[s] - D[x] = W[x], 即 D[s] = W[x] + D[x]</h5></li><li><h5 id="D-s-D-x-2D-LCA-s-ed-W-x-即-D-s-2D-LCA-s-ed-W-x-D-x"><a href="#D-s-D-x-2D-LCA-s-ed-W-x-即-D-s-2D-LCA-s-ed-W-x-D-x" class="headerlink" title="D[s] + D[x] - 2D[LCA(s, ed)] = W[x], 即 D[s] - 2D[LCA(s, ed)] = W[x] - D[x]"></a>D[s] + D[x] - 2D[LCA(s, ed)] = W[x], 即 D[s] - 2D[LCA(s, ed)] = W[x] - D[x]</h5></li></ol><h4 id="问题转化为每条路径上的点加-D-s-D-s-2D-LCA-s-ed-每个点的贡献即为权值为-W-x-D-x-W-x-D-x-的数量"><a href="#问题转化为每条路径上的点加-D-s-D-s-2D-LCA-s-ed-每个点的贡献即为权值为-W-x-D-x-W-x-D-x-的数量" class="headerlink" title="问题转化为每条路径上的点加 D[s]/D[s]-2D[LCA(s, ed)], 每个点的贡献即为权值为 W[x] + D[x] / W[x] - D[x] 的数量"></a>问题转化为每条路径上的点加 D[s]/D[s]-2D[LCA(s, ed)], 每个点的贡献即为权值为 W[x] + D[x] / W[x] - D[x] 的数量</h4><h4 id="记录全局权值为x的个数为C-x-dfs处理-每次遇到一个点-使用临时变量cnt记录当前的C-W-x-C-W-x-D-x-递归处理-更新C的值-递归完后C-W-x-cnt-即为其子树中的答案"><a href="#记录全局权值为x的个数为C-x-dfs处理-每次遇到一个点-使用临时变量cnt记录当前的C-W-x-C-W-x-D-x-递归处理-更新C的值-递归完后C-W-x-cnt-即为其子树中的答案" class="headerlink" title="记录全局权值为x的个数为C[x], dfs处理, 每次遇到一个点, 使用临时变量cnt记录当前的C[W[x]] / C[W[x]-D[x]], 递归处理, 更新C的值, 递归完后C[W[x]] - cnt 即为其子树中的答案"></a>记录全局权值为x的个数为C[x], dfs处理, 每次遇到一个点, 使用临时变量cnt记录当前的C[W[x]] / C[W[x]-D[x]], 递归处理, 更新C的值, 递归完后C[W[x]] - cnt 即为其子树中的答案</h4><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><h4 id="两种情况分别讨论-记录"><a href="#两种情况分别讨论-记录" class="headerlink" title="两种情况分别讨论, 记录"></a>两种情况分别讨论, 记录</h4></li><li><h4 id="第二种情况可能出现负数下标"><a href="#第二种情况可能出现负数下标" class="headerlink" title="第二种情况可能出现负数下标"></a>第二种情况可能出现负数下标</h4></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, st, ed) for(int i = st; i &lt;= ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, st, ed) for(int i = st; i &gt;= ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">3e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">3e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V_ = N_ + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UnionAndFind</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Fa[N_];</span><br><span class="line"><span class="built_in">UnionAndFind</span>() &#123;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">1</span>, N_) Fa[i] = i; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Fa[x] = Fa[x] == x ? x : <span class="built_in">Find</span>(Fa[x]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">Fa[<span class="built_in">Find</span>(x)] = <span class="built_in">Find</span>(y); &#125;</span><br><span class="line">&#125; Uf;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> next, to;</span><br><span class="line"><span class="built_in">Edge</span>(<span class="keyword">int</span> next_ = <span class="number">0</span>, <span class="keyword">int</span> to_ = <span class="number">0</span>) &#123;</span><br><span class="line">next = next_; to = to_;</span><br><span class="line">&#125;</span><br><span class="line">&#125; E[N_ &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> Head[N_];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">E[++cnt] = <span class="built_in">Edge</span>(Head[from], to);</span><br><span class="line">Head[from] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(i) E[i].to</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y; </span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> x_ = <span class="number">0</span>, <span class="keyword">int</span> y_ = <span class="number">0</span>) &#123;</span><br><span class="line">x = x_; y = y_; &#125;</span><br><span class="line">&#125; M[M_];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Ad_On[M_], Del_On[M_], Ad_Do[M_], Del_Do[M_], Q[N_], Id[N_];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> D[N_], W[N_], Lca[M_], Fa[N_], C_On[M_+V_], C_Do[M_ + V_], Ans[N_];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, m, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeD</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="built_in">Add</span>(u, v); <span class="built_in">Add</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) IN &gt;&gt; W[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> s, t; IN &gt;&gt; s &gt;&gt; t;</span><br><span class="line">M[i] = <span class="built_in">Node</span>(s, t);</span><br><span class="line">Q[s].<span class="built_in">push_back</span>(t); Q[t].<span class="built_in">push_back</span>(s);</span><br><span class="line">Id[s].<span class="built_in">push_back</span>(i); Id[t].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">MakeD</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Tarjan</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> x, y, lca, fa;</span><br><span class="line">x = M[i].x, y = M[i].y, lca = Lca[i], fa = Fa[lca];</span><br><span class="line"></span><br><span class="line">Ad_On[x].<span class="built_in">push_back</span>(D[x] + V_), Del_On[fa].<span class="built_in">push_back</span>(D[x] + V_);</span><br><span class="line">Ad_Do[y].<span class="built_in">push_back</span>(D[x] - <span class="number">2</span> * D[lca] + V_), Del_Do[lca].<span class="built_in">push_back</span>(D[x] - <span class="number">2</span> * D[lca] + V_);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Solve</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) </span><br><span class="line">cout &lt;&lt; Ans[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MakeD</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i, x) <span class="keyword">if</span>(<span class="built_in">T</span>(i) != last) </span><br><span class="line">D[<span class="built_in">T</span>(i)] = D[x] + <span class="number">1</span>, Fa[<span class="built_in">T</span>(i)] = x, </span><br><span class="line"><span class="built_in">MakeD</span>(<span class="built_in">T</span>(i), x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> fcnt = C_On[W[x] + D[x] + V_], scnt = C_Do[W[x] - D[x] + V_];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, Ad_On[x].<span class="built_in">size</span>()) C_On[Ad_On[x][i]]++;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, Del_On[x].<span class="built_in">size</span>()) C_On[Del_On[x][i]]--;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, Ad_Do[x].<span class="built_in">size</span>()) C_Do[Ad_Do[x][i]]++;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, Del_Do[x].<span class="built_in">size</span>()) C_Do[Del_Do[x][i]]--;</span><br><span class="line"></span><br><span class="line"><span class="built_in">ER</span>(i, x) <span class="keyword">if</span>(<span class="built_in">T</span>(i) != last) </span><br><span class="line"><span class="built_in">Solve</span>(<span class="built_in">T</span>(i), x); </span><br><span class="line"></span><br><span class="line">Ans[x] = C_On[W[x] + D[x] + V_] - fcnt + </span><br><span class="line">     C_Do[W[x] - D[x] + V_] - scnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i, x) <span class="keyword">if</span>(<span class="built_in">T</span>(i) != last) </span><br><span class="line"><span class="built_in">Tarjan</span>(<span class="built_in">T</span>(i), x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, Q[x].<span class="built_in">size</span>())</span><br><span class="line">Lca[Id[x][i]] = Uf.<span class="built_in">Find</span>(Q[x][i]);</span><br><span class="line"></span><br><span class="line">Uf.<span class="built_in">Union</span>(x, last ? last : x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 树 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 树上差分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing352 暗之连锁</title>
      <link href="/2021/11/02/AcWing352_%E6%9A%97%E4%B9%8B%E8%BF%9E%E9%94%81/"/>
      <url>/2021/11/02/AcWing352_%E6%9A%97%E4%B9%8B%E8%BF%9E%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing352"><a href="#AcWing352" class="headerlink" title="AcWing352"></a><a href="https://www.acwing.com/problem/content/354/">AcWing352</a></h3><h3 id="附加边构成环-对于每一条主要边-设被环覆盖的次数为p-则其对答案的贡献为"><a href="#附加边构成环-对于每一条主要边-设被环覆盖的次数为p-则其对答案的贡献为" class="headerlink" title="附加边构成环, 对于每一条主要边, 设被环覆盖的次数为p, 则其对答案的贡献为"></a>附加边构成环, 对于每一条主要边, 设被环覆盖的次数为p, 则其对答案的贡献为</h3><ul><li><h4 id="p-0-gt-m"><a href="#p-0-gt-m" class="headerlink" title="p = 0 -&gt; m"></a>p = 0 -&gt; m</h4></li><li><h4 id="p-1-gt-1"><a href="#p-1-gt-1" class="headerlink" title="p = 1 -&gt; 1"></a>p = 1 -&gt; 1</h4></li><li><h4 id="p-gt-1-gt-0"><a href="#p-gt-1-gt-0" class="headerlink" title="p &gt; 1 -&gt; 0"></a>p &gt; 1 -&gt; 0</h4></li></ul><h3 id="差分"><a href="#差分" class="headerlink" title="差分:"></a>差分:</h3><h4 id="对于每一条附加边-x-y-令点权-W-x-1-W-y-1-W-LCA-x-y-2-则每个结点及其子树的权值和即为连接其父节点的边的被覆盖次数"><a href="#对于每一条附加边-x-y-令点权-W-x-1-W-y-1-W-LCA-x-y-2-则每个结点及其子树的权值和即为连接其父节点的边的被覆盖次数" class="headerlink" title="对于每一条附加边(x, y), 令点权 W[x]+1, W[y]+1, W[LCA(x, y)] - 2, 则每个结点及其子树的权值和即为连接其父节点的边的被覆盖次数"></a>对于每一条附加边(x, y), 令点权 W[x]+1, W[y]+1, W[LCA(x, y)] - 2, 则每个结点及其子树的权值和即为连接其父节点的边的被覆盖次数</h4><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, st, ed) for(int i = st; i &lt;= ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, st, ed) for(int i = st; i &gt;= ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> M_ = <span class="number">2e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> next, to;</span><br><span class="line"><span class="built_in">Edge</span>(<span class="keyword">int</span> next_ = <span class="number">0</span>, <span class="keyword">int</span> to_ = <span class="number">0</span>) &#123;</span><br><span class="line">next = next_; to = to_;</span><br><span class="line">&#125;</span><br><span class="line">&#125; E[N_ &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> Head[N_];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">E[++cnt] = <span class="built_in">Edge</span>(Head[from], to);</span><br><span class="line">Head[from] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(i) E[i].to</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">UnionAndFind</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Fa[N_];</span><br><span class="line"><span class="built_in">UnionAndFind</span>() &#123;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">1</span>, N_) Fa[i] = i; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">Fa[<span class="built_in">Find</span>(x)] = <span class="built_in">Find</span>(y); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Fa[x] = Fa[x] == x ? x : <span class="built_in">Find</span>(Fa[x]); &#125;</span><br><span class="line">&#125; Uf;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="built_in">Node</span>(<span class="keyword">int</span> x_ = <span class="number">0</span>, <span class="keyword">int</span> y_ = <span class="number">0</span>) &#123;</span><br><span class="line">x = x_; y = y_; &#125;</span><br><span class="line">&#125;T[M_];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Q[N_], Id[N_];</span><br><span class="line"><span class="keyword">int</span> W[N_], Lca[M_];</span><br><span class="line"><span class="keyword">int</span> n, m, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line"><span class="built_in">Add</span>(u, v); <span class="built_in">Add</span>(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v; IN &gt;&gt; u &gt;&gt; v;</span><br><span class="line">T[i] = <span class="built_in">Node</span>(u, v);</span><br><span class="line">Q[u].<span class="built_in">push_back</span>(v); Q[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">Id[u].<span class="built_in">push_back</span>(i); Id[v].<span class="built_in">push_back</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Tarjan</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> x = T[i].x, y = T[i].y, lca = Lca[i];</span><br><span class="line">W[x]++, W[y]++, W[lca] -= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Solve</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i, x) <span class="keyword">if</span>(<span class="built_in">T</span>(i) != last) </span><br><span class="line"><span class="built_in">Tarjan</span>(<span class="built_in">T</span>(i), x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Ir</span>(i, <span class="number">0</span>, Q[x].<span class="built_in">size</span>()) </span><br><span class="line">Lca[Id[x][i]] = Uf.<span class="built_in">Find</span>(Q[x][i]);</span><br><span class="line"></span><br><span class="line">Uf.<span class="built_in">Union</span>(x, last != <span class="number">0</span> ? last : x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line"><span class="built_in">ER</span>(i, x) <span class="keyword">if</span>(<span class="built_in">T</span>(i) != last) </span><br><span class="line">W[x] += <span class="built_in">Solve</span>(<span class="built_in">T</span>(i), x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!W[x]) ans += m;</span><br><span class="line"><span class="keyword">else</span> ans += W[x] == <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> W[x];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LCA </tag>
            
            <tag> 树上差分 </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing361 创世纪</title>
      <link href="/2021/11/01/AcWing361_%E5%88%9B%E4%B8%96%E7%BA%AA/"/>
      <url>/2021/11/01/AcWing361_%E5%88%9B%E4%B8%96%E7%BA%AA/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing361"><a href="#AcWing361" class="headerlink" title="AcWing361"></a><a href="https://www.acwing.com/problem/content/description/361/">AcWing361</a></h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, st, ed) for(int i = st; i &lt;= ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ir(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, st, ed) for(int i = st; i &gt;= ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Sr(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, v, x, y) for(int i = x.Head[y], v = x.T(i); i; i = x.Next[i], v = x.T(i))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZR(x) memset(x, 0, sizeof x)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x =- x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N_ = <span class="number">1e6</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">int</span> N&gt; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> Next[N &lt;&lt; <span class="number">1</span>], To[N &lt;&lt; <span class="number">1</span>], Head[N];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">Next[++cnt] = Head[u]; To[cnt] = v; Head[u] = cnt; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">T</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> To[x]; &#125;</span><br><span class="line"><span class="built_in">Edge</span>() &#123;</span><br><span class="line"><span class="built_in">ZR</span>(Next); <span class="built_in">ZR</span>(To); <span class="built_in">ZR</span>(Head);</span><br><span class="line">cnt = <span class="number">1</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Edge&lt;N_&gt; G;</span><br><span class="line"><span class="keyword">int</span> A[N_], F[N_][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> n, rt, ans;</span><br><span class="line"><span class="keyword">bool</span> Vis[N_];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">bool</span> opt)</span> </span>&#123;</span><br><span class="line">F[x][<span class="number">0</span>] = <span class="number">0</span>; Vis[x] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tmp = INF, p, q;</span><br><span class="line"><span class="built_in">ER</span>(i, v, G, x) <span class="keyword">if</span>(v != rt) </span><br><span class="line">p = <span class="built_in">Dp</span>(v, opt), q = F[v][<span class="number">0</span>], </span><br><span class="line">tmp = <span class="built_in">min</span>(tmp, p - q), F[x][<span class="number">0</span>] += p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x != A[rt] || !opt)F[x][<span class="number">1</span>] = F[x][<span class="number">0</span>] - tmp + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>F[x][<span class="number">1</span>] = F[x][<span class="number">0</span>] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(F[x][<span class="number">0</span>], F[x][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Work</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(rt = x; !Vis[A[rt]] &amp;&amp; (Vis[rt] = <span class="number">1</span>); rt = A[rt]);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="built_in">Dp</span>(rt, <span class="number">0</span>); <span class="built_in">Dp</span>(rt, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(ans, F[rt][<span class="number">0</span>]); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Data/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) IN &gt;&gt; A[i], G.<span class="built_in">Add</span>(A[i], i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="keyword">if</span>(!Vis[i]) ans += <span class="built_in">Work</span>(i);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 图论 </tag>
            
            <tag> 基环树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing350 巡逻</title>
      <link href="/2021/10/31/AcWing350_APIO2010_%E5%B7%A1%E9%80%BB/"/>
      <url>/2021/10/31/AcWing350_APIO2010_%E5%B7%A1%E9%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing350"><a href="#AcWing350" class="headerlink" title="AcWing350"></a><a href="https://www.acwing.com/problem/content/352/">AcWing350</a></h3><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><ul><li><h4 id="k-1-直径-ans-2-n-1-dia-1"><a href="#k-1-直径-ans-2-n-1-dia-1" class="headerlink" title="k = 1: 直径 ans = 2 * (n-1) - dia + 1"></a>k = 1: 直径 ans = 2 * (n-1) - dia + 1</h4></li><li><h4 id="k-2-新构成的环和前一个环重叠则损失-gt-直径上负-1权后再求一边直径-ans-2-n-1-dia-sdia-2"><a href="#k-2-新构成的环和前一个环重叠则损失-gt-直径上负-1权后再求一边直径-ans-2-n-1-dia-sdia-2" class="headerlink" title="k = 2: 新构成的环和前一个环重叠则损失-&gt;直径上负-1权后再求一边直径 ans = 2 * (n-1) - dia - sdia + 2"></a>k = 2: 新构成的环和前一个环重叠则损失-&gt;直径上负-1权后再求一边直径 ans = 2 * (n-1) - dia - sdia + 2</h4></li></ul><h3 id="Trick"><a href="#Trick" class="headerlink" title="Trick"></a>Trick</h3><ul><li><h4 id="记录每个点在邻接表中其父节点的位置"><a href="#记录每个点在邻接表中其父节点的位置" class="headerlink" title="记录每个点在邻接表中其父节点的位置"></a>记录每个点在邻接表中其父节点的位置</h4></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 图论 </tag>
            
            <tag> 树的直径 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AcWing325 计算机</title>
      <link href="/2021/10/31/AcWing325_%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
      <url>/2021/10/31/AcWing325_%E8%AE%A1%E7%AE%97%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing325"><a href="#AcWing325" class="headerlink" title="AcWing325"></a><a href="https://www.acwing.com/problem/content/description/327/">AcWing325</a></h3><h3 id="F-x-0-1-和-Pos-x"><a href="#F-x-0-1-和-Pos-x" class="headerlink" title="F[x][0/1] 和 Pos[x]"></a>F[x][0/1] 和 Pos[x]</h3><h3 id="自下而上-F-x-0-1-以1为根时的值"><a href="#自下而上-F-x-0-1-以1为根时的值" class="headerlink" title="自下而上: F[x][0/1] 以1为根时的值"></a>自下而上: F[x][0/1] 以1为根时的值</h3><h3 id="自上而下-F-x-0-1-以x为根-最大和次大值"><a href="#自上而下-F-x-0-1-以x为根-最大和次大值" class="headerlink" title="自上而下: F[x][0/1] 以x为根, 最大和次大值"></a>自上而下: F[x][0/1] 以x为根, 最大和次大值</h3><h3 id="Pos-x-以x为根-x的最大值从哪一个子树更新"><a href="#Pos-x-以x为根-x的最大值从哪一个子树更新" class="headerlink" title="Pos[x] 以x为根, x的最大值从哪一个子树更新"></a>Pos[x] 以x为根, x的最大值从哪一个子树更新</h3><p>``cpp<br>#include&lt;bits/stdc++.h&gt;<br>using namespace std;</p><p>#define IR(i, st, ed) for(int i = st; i &lt;= ed; i++)<br>#define SR(i, st, ed) for(int i = st; i &gt;= ed; i–)</p><p>struct FastIN<br>{<br>    template<typename T><br>    FastIN&amp; operator&gt;&gt;(T&amp; x)<br>    {<br>        char c, l;<br>        for(c = 0; !isdigit(c); c = getchar() ) l = c;<br>        for(x = 0; isdigit(c); c = getchar() ) x = x * 10 - ‘0’ + c;<br>        if(l == ‘-‘) x = -x;<br>        return *this;<br>    }<br>} IN;<br>const int N_ = 1e4 + 2;</p><p>struct Edge {<br>    int next, to, val; } E[N_ &lt;&lt; 1];<br>int Head[N_];<br>int cnt;<br>void Add(int from, int to, int val) {<br>    E[++cnt] = { Head[from], to, val };<br>    Head[from] = cnt;<br>}<br>#define ER(i, x) for(int i = Head[x]; i; i = E[i].next)<br>#define V(i) E[i].val<br>#define T(i) E[i].to</p><p>vector<int> P[N_], Qp[N_], Qs[N_];<br>int Mk[N_], F[N_], Pos[N_];<br>int n;</p><p>int Pre(int x, int last);<br>void Wk(int x, int last);</p><p>int main() { /**/<br>#ifdef LOCAL<br>    freopen(“I:/Code/Data/In.in”, “r”, stdin);<br>    freopen(“I:/Code/Data/AC.out”, “w”, stdout);<br>#endif</p><pre><code>return 0;</code></pre><p>} /**/</p><p>int Pre(int x, int last) {<br>    int mx = 0;<br>    ER(i, x) {<br>        if(T(i) == last) continue;</p><pre><code>    P[x].push_back( Pre(T(i), x) + V(i) );    Pos[T(i)] = P[x].size() - 1;    if(P[x].back() &gt; mx)         mx = P[x].back(), Mk[x] = T(i);    Qp[x].push_back(mx);&#125;Qs[x].resize(P[x].size());SR(i, P[x].size()-1, 0)     Qs[x][i] = max(i &lt; P[x].size()-1 ? Qs[x][i+1] : 0, P[x][i]);if(!P[x].size()) return 0;return mx;</code></pre><p>}</p><p>void Wk(int x, int last) {<br>    ER(i, x) {<br>        if(T(i) == last) continue;</p><pre><code>    int p = Pos[T(i)];    F[T(i)] = Qp[x].size() ? max(p &gt; 0 ?                Qp[x][p-1] : 0,                                  p &lt; Qs[x].size() - 1 ? Qs[x][p+1] : 0) : 0 + V(i);    printf(&quot;F[%d] = %d\n&quot;, T(i), F[T(i)]);    /*    printf(&quot;-------------------------\n&quot;);    printf(&quot;Qp[%d].size() = %d\n&quot;, x, Qp[x].size());    printf(&quot;Qs[%d].size() = %d\n&quot;, x, Qs[x].size());    printf(&quot;F[%d] = %d\n&quot;, T(i), F[T(i)]);    printf(&quot;\n-------------------------\n&quot;);    */    if(Mk[x] != T(i)) F[T(i)] = max(F[T(i)], F[x] + V(i));    Wk(T(i), x);&#125;</code></pre><p>}</p><pre><code></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 树形dp </tag>
            
            <tag> 换根 </tag>
            
            <tag> 二次扫描 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NOIP 2016 换教室</title>
      <link href="/2021/10/29/LG1850_NOIP_2016_%E6%8F%90%E9%AB%98%E7%BB%84_%E6%8D%A2%E6%95%99%E5%AE%A4/"/>
      <url>/2021/10/29/LG1850_NOIP_2016_%E6%8F%90%E9%AB%98%E7%BB%84_%E6%8D%A2%E6%95%99%E5%AE%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="LG1850"><a href="#LG1850" class="headerlink" title="LG1850"></a><a href="https://www.luogu.com.cn/problem/P1850">LG1850</a></h3><h3 id="状态-F-i-v-0-1-考虑到第i间教室-已经申请了v间-当前是否申请"><a href="#状态-F-i-v-0-1-考虑到第i间教室-已经申请了v间-当前是否申请" class="headerlink" title="状态: F[i][v][0/1] 考虑到第i间教室, 已经申请了v间, 当前是否申请"></a>状态: F[i][v][0/1] 考虑到第i间教室, 已经申请了v间, 当前是否申请</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IR(i, st, ed) for(int i = st; i &lt;= ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SR(i, st, ed) for(int i = st; i &gt;= ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ER(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c, l;</span><br><span class="line"><span class="keyword">for</span>(c = <span class="number">0</span>; !<span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) l = c;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>; <span class="built_in">isdigit</span>(c); c = <span class="built_in">getchar</span>() ) x = x * <span class="number">10</span> - <span class="string">&#x27;0&#x27;</span> + c;</span><br><span class="line"><span class="keyword">if</span>(l == <span class="string">&#x27;-&#x27;</span>) x = -x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _V = <span class="number">3e2</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _N = <span class="number">2e3</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _M = <span class="number">2e3</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> C[_N], D[_N], E[_N][_N]; </span><br><span class="line"><span class="keyword">int</span> n, m, v, e;</span><br><span class="line"><span class="keyword">double</span> K[_N], F[_N][_M][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\AC.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m &gt;&gt; e &gt;&gt; v;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) IN &gt;&gt; C[i];</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) IN &gt;&gt; D[i];</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) cin &gt;&gt; K[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(E, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> E);</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">0</span>, _V) E[i][i] = E[<span class="number">0</span>][i] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, e) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w; IN &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">E[u][v] = E[v][u] = <span class="built_in">min</span>(E[u][v], w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Floyd</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//memset(F, 0xcf, sizeof F);</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; F[1][0][0] &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//memset(F, 0x3f, sizeof F);</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; F[1][0][0] &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">0</span>, _N<span class="number">-1</span>) <span class="built_in">IR</span>(v, <span class="number">0</span>, _M<span class="number">-1</span>) <span class="built_in">IR</span>(k, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">F[i][v][k] = INF;</span><br><span class="line"></span><br><span class="line">F[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">F[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">2</span>, n) <span class="built_in">IR</span>(v, <span class="number">0</span>, <span class="built_in">min</span>(i, m)) &#123;</span><br><span class="line">F[i][v][<span class="number">0</span>] = <span class="built_in">min</span>(F[i<span class="number">-1</span>][v][<span class="number">0</span>] + E[C[i<span class="number">-1</span>]][C[i]], </span><br><span class="line"> F[i<span class="number">-1</span>][v][<span class="number">1</span>] + E[D[i<span class="number">-1</span>]][C[i]] * K[i<span class="number">-1</span>] + E[C[i<span class="number">-1</span>]][C[i]] * (<span class="number">1</span> - K[i<span class="number">-1</span>]));</span><br><span class="line"><span class="keyword">if</span>(v) &#123;</span><br><span class="line">F[i][v][<span class="number">1</span>] = F[i][v<span class="number">-1</span>][<span class="number">0</span>] * (<span class="number">1</span> - K[i]) + </span><br><span class="line"> <span class="built_in">min</span>(F[i<span class="number">-1</span>][v<span class="number">-1</span>][<span class="number">0</span>] + E[C[i<span class="number">-1</span>]][D[i]], </span><br><span class="line"> F[i<span class="number">-1</span>][v<span class="number">-1</span>][<span class="number">1</span>] + E[D[i<span class="number">-1</span>]][D[i]] * K[i<span class="number">-1</span>] + E[C[i<span class="number">-1</span>]][D[i]] * (<span class="number">1</span>-K[i<span class="number">-1</span>]) );</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">printf(&quot;F[%d][%d][%d] = %lf\n&quot;, </span></span><br><span class="line"><span class="comment">i, v, 1, F[i][v][1]);</span></span><br><span class="line"><span class="comment">printf(&quot;F[%d][%d][%d] = %lf\n&quot;,</span></span><br><span class="line"><span class="comment">i, v, 0, F[i][v][0]);</span></span><br><span class="line"><span class="comment">printf(&quot;K[%d] = %d\n&quot;, i, K[i]);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, <span class="number">0</span>, m) <span class="built_in">IR</span>(k, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;F[%d][%d][%d] = %lf\n&quot;</span>, i, v, k, F[i][v][k]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> ans = INF;</span><br><span class="line"><span class="built_in">IR</span>(i, <span class="number">0</span>, m) </span><br><span class="line">ans = <span class="built_in">min</span>(ans, </span><br><span class="line">  <span class="built_in">min</span>(F[n][i][<span class="number">0</span>], F[n][i][<span class="number">1</span>]) );</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Floyd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">IR</span>(k, <span class="number">1</span>, n) <span class="built_in">IR</span>(i, <span class="number">1</span>, n) <span class="built_in">IR</span>(v, <span class="number">1</span>, n) </span><br><span class="line">E[i][v] = <span class="built_in">min</span>(E[i][v], E[i][k] + E[k][v]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 期望 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF559C</title>
      <link href="/2021/10/27/CF559C_Gerald_and_Giant_Chess/"/>
      <url>/2021/10/27/CF559C_Gerald_and_Giant_Chess/</url>
      
        <content type="html"><![CDATA[<h3 id="CF559C"><a href="#CF559C" class="headerlink" title="CF559C"></a><a href="https://www.luogu.com.cn/problem/CF559C">CF559C</a></h3><h3 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h3>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 计数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列多重背包</title>
      <link href="/2021/10/26/%5B%E6%A8%A1%E6%9D%BF%5D%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/"/>
      <url>/2021/10/26/%5B%E6%A8%A1%E6%9D%BF%5D%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97%E5%A4%9A%E9%87%8D%E8%83%8C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing6"><a href="#AcWing6" class="headerlink" title="AcWing6"></a><a href="https://www.acwing.com/problem/content/description/6/">AcWing6</a></h3><p>emmmm</p>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 多重背包 </tag>
            
            <tag> 单调队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UVA12983</title>
      <link href="/2021/10/25/UVA12983_The_Battle_of_Chibi/"/>
      <url>/2021/10/25/UVA12983_The_Battle_of_Chibi/</url>
      
        <content type="html"><![CDATA[<h3 id="UVA12983"><a href="#UVA12983" class="headerlink" title="UVA12983"></a><a href="https://vjudge.net/problem/UVA-12983">UVA12983</a></h3><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><ul><li><h3 id="状态-F-i-v-以-A-v-结尾-长度为-i-的LIS种类数"><a href="#状态-F-i-v-以-A-v-结尾-长度为-i-的LIS种类数" class="headerlink" title="状态: $F[i][v]$ 以$A_v$结尾, 长度为$i$的LIS种类数"></a>状态: $F[i][v]$ 以$A_v$结尾, 长度为$i$的LIS种类数</h3></li><li><h3 id="转移-F-i-v-sum-limits-1-le-k-le-v-And-A-k-lt-A-v-F-i-1-k"><a href="#转移-F-i-v-sum-limits-1-le-k-le-v-And-A-k-lt-A-v-F-i-1-k" class="headerlink" title="转移: $F[i][v] = \sum\limits_{1\le k \le v \And A[k] &lt; A[v]}F[i-1][k] $"></a>转移: $F[i][v] = \sum\limits_{1\le k \le v \And A[k] &lt; A[v]}F[i-1][k] $</h3></li><li><h3 id="边界-F-1-i-1"><a href="#边界-F-1-i-1" class="headerlink" title="边界: $F[1][i] = 1$"></a>边界: $F[1][i] = 1$</h3></li><li><h3 id="外层枚举-i-内层枚举-v-树状数组维护离散化后每个数值对应答案的前缀和"><a href="#外层枚举-i-内层枚举-v-树状数组维护离散化后每个数值对应答案的前缀和" class="headerlink" title="外层枚举$i$, 内层枚举$v$, 树状数组维护离散化后每个数值对应答案的前缀和"></a>外层枚举$i$, 内层枚举$v$, 树状数组维护离散化后每个数值对应答案的前缀和</h3></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _N = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _M = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FenWick</span> &#123;</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Tr[_N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">long</span> <span class="keyword">long</span> val)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>; </span><br><span class="line">&#125;B;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> F[_M][_N], A[_N], Q[_N], Pos[_N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> t, n, m, idx, cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) IN &gt;&gt; A[i], Q[i] = A[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">//离散化</span></span><br><span class="line"><span class="built_in">sort</span>(Q, Q+n+<span class="number">1</span>);</span><br><span class="line">idx = <span class="built_in">unique</span>(Q+<span class="number">1</span>, Q+n+<span class="number">1</span>) - Q;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) Pos[i] = <span class="built_in">lower_bound</span>(Q+<span class="number">1</span>, Q+idx+<span class="number">1</span>, A[i]) - Q;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Dp</span></span><br><span class="line"><span class="built_in">memset</span>(F, <span class="number">0</span>, <span class="keyword">sizeof</span> F);</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) F[<span class="number">1</span>][i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">2</span>, m+<span class="number">1</span>) &#123;</span><br><span class="line">B.<span class="built_in">Init</span>();</span><br><span class="line"><span class="built_in">IOR</span>(v, <span class="number">1</span>, n+<span class="number">1</span>) &#123;</span><br><span class="line">F[i][v] += B.<span class="built_in">Ask</span>(<span class="number">1</span>, Pos[v]<span class="number">-1</span>);</span><br><span class="line">F[i][v] %= P;</span><br><span class="line"></span><br><span class="line">B.<span class="built_in">Cg</span>(Pos[v], F[i<span class="number">-1</span>][v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) </span><br><span class="line">ans = (ans + F[m][i] % P) % P;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case #%lld: %lld\n&quot;</span>, ++cnt, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FenWick::Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(Tr, <span class="number">0</span>, <span class="keyword">sizeof</span> Tr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FenWick::Cg</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">long</span> <span class="keyword">long</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x &lt;= n) </span><br><span class="line">Tr[x] = (Tr[x] + val % P) % P, x += x &amp; -x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">FenWick::Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">l--; <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l &lt; r) res = (res % P + Tr[r]) % P, r -= r &amp; -r;</span><br><span class="line"><span class="keyword">while</span>(l &gt; r) res = (res % P - Tr[l]) % P, l -= l &amp; -l;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res % P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/24/LG3959%5BNOIP2017%E6%8F%90%E9%AB%98%E7%BB%84%5D%E5%AE%9D%E8%97%8F/"/>
      <url>/2021/10/24/LG3959%5BNOIP2017%E6%8F%90%E9%AB%98%E7%BB%84%5D%E5%AE%9D%E8%97%8F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>POJ1742</title>
      <link href="/2021/10/19/POJ1742/"/>
      <url>/2021/10/19/POJ1742/</url>
      
        <content type="html"><![CDATA[<h3 id="POJ1742"><a href="#POJ1742" class="headerlink" title="POJ1742"></a><a href="http://poj.org/problem?id=1742">POJ1742</a></h3><h3 id="Usd-j-表示考虑到第i个物品时拼出j需要的i的个数"><a href="#Usd-j-表示考虑到第i个物品时拼出j需要的i的个数" class="headerlink" title="Usd[j]表示考虑到第i个物品时拼出j需要的i的个数"></a>Usd[j]表示考虑到第i个物品时拼出j需要的i的个数</h3><h3 id="贪心-每次拼j时能用以前的拼出就用"><a href="#贪心-每次拼j时能用以前的拼出就用" class="headerlink" title="贪心, 每次拼j时能用以前的拼出就用"></a>贪心, 每次拼j时能用以前的拼出就用</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[MAXN], B[MAXN], Use[MAXN], F[MAXN];</span><br><span class="line"><span class="keyword">int</span> T, n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span>(n + m) &#123;</span><br><span class="line"><span class="built_in">memset</span>(F, <span class="number">0</span>, (m+<span class="number">10</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">F[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, n) IN &gt;&gt; A[i];</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, n) IN &gt;&gt; B[i];</span><br><span class="line"></span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, n) &#123;</span><br><span class="line"><span class="built_in">memset</span>(Use, <span class="number">0</span>, (m+<span class="number">10</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">IOR</span>(v, A[i], m+<span class="number">1</span>) </span><br><span class="line"><span class="keyword">if</span>(!F[v] &amp;&amp; F[v-A[i]] &amp;&amp; Use[v-A[i]] &lt; B[i]) </span><br><span class="line">F[v] = <span class="literal">true</span>, Use[v] = Use[v-A[i]] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, m+<span class="number">1</span>) ans += F[i];</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Dp </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LCIS</title>
      <link href="/2021/10/18/AcWing272/"/>
      <url>/2021/10/18/AcWing272/</url>
      
        <content type="html"><![CDATA[<h3 id="AcWing272"><a href="#AcWing272" class="headerlink" title="AcWing272"></a><a href="https://www.acwing.com/problem/content/274/">AcWing272</a></h3><h3 id="给定序列-A-B-长度-le-3e3-有负数-求LCIS"><a href="#给定序列-A-B-长度-le-3e3-有负数-求LCIS" class="headerlink" title="给定序列$A~B$, 长度$\le 3e3$, 有负数, 求LCIS"></a>给定序列$A~B$, 长度$\le 3e3$, 有负数, 求LCIS</h3><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><ul><li><h4 id="状态-f-i-v-表示考虑-A-数组第-i-位-以-B-数组第-v-位结尾的LCIS长度"><a href="#状态-f-i-v-表示考虑-A-数组第-i-位-以-B-数组第-v-位结尾的LCIS长度" class="headerlink" title="状态$f_{i, v}$表示考虑$A$数组第$i$位, 以$B$数组第$v$位结尾的LCIS长度"></a>状态$f_{i, v}$表示考虑$A$数组第$i$位, 以$B$数组第$v$位结尾的LCIS长度</h4></li><li><h4 id="转移-f-i-v"><a href="#转移-f-i-v" class="headerlink" title="转移 $f_{i, v} =$"></a>转移 $f_{i, v} =$</h4><ul><li>$\qquad\qquad;; f_{i-1, v} \quad\quad a_i \neq b_i$</li><li>$\max\limits_{0 \leq k &lt; j, a_i &gt; b_k}{f_{i-1, k}} \qquad \text{else}$</li></ul></li></ul><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul><li><h4 id="转移二中的max值可以在转移过程中维护-决策集合元素只增多不减少"><a href="#转移二中的max值可以在转移过程中维护-决策集合元素只增多不减少" class="headerlink" title="转移二中的max值可以在转移过程中维护(决策集合元素只增多不减少)"></a>转移二中的max值可以在转移过程中维护(决策集合元素只增多不减少)</h4></li><li><h4 id="注意具有负数-设置-a-i-b-i-0"><a href="#注意具有负数-设置-a-i-b-i-0" class="headerlink" title="注意具有负数, 设置$a_i = b_i = 0$"></a>注意具有负数, 设置$a_i = b_i = 0$</h4></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> F[MAXN][MAXN], A[MAXN], B[MAXN];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) IN &gt;&gt; A[i];</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) IN &gt;&gt; B[i];</span><br><span class="line"></span><br><span class="line">A[<span class="number">0</span>] = B[<span class="number">0</span>] = -INF;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IOR</span>(v, <span class="number">1</span>, n+<span class="number">1</span>) &#123;</span><br><span class="line">F[i][v] = (A[i] == B[v] ? </span><br><span class="line">mx+<span class="number">1</span> : F[i<span class="number">-1</span>][v]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(B[v] &lt; A[i]) </span><br><span class="line">mx = <span class="built_in">max</span>(mx, F[i<span class="number">-1</span>][v]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) ans = <span class="built_in">max</span>(ans, F[n][i]);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Dp </tag>
            
            <tag> LCS </tag>
            
            <tag> LIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AT_Tokiomarine2020_E</title>
      <link href="/2021/10/17/AT_Tokiomarine2020_E/"/>
      <url>/2021/10/17/AT_Tokiomarine2020_E/</url>
      
        <content type="html"><![CDATA[<h3 id="AT-Tokiomarine2020-E"><a href="#AT-Tokiomarine2020-E" class="headerlink" title="AT_Tokiomarine2020_E"></a><a href="https://atcoder.jp/contests/tokiomarine2020/submissions/26617485">AT_Tokiomarine2020_E</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><h4 id="给定-N-个数-A-i-在其中选出-1-k-个满足选出的数按位与等于-S-按位或等于-T"><a href="#给定-N-个数-A-i-在其中选出-1-k-个满足选出的数按位与等于-S-按位或等于-T" class="headerlink" title="给定$N$个数$A_i$, 在其中选出$1-k$个满足选出的数按位与等于$S$, 按位或等于$T$"></a>给定$N$个数$A_i$, 在其中选出$1-k$个满足选出的数按位与等于$S$, 按位或等于$T$</h4><h4 id="0-lt-K-le-N-le-50-0-lt-A-i-S-T-le-2-18-A-i-neq-A-j"><a href="#0-lt-K-le-N-le-50-0-lt-A-i-S-T-le-2-18-A-i-neq-A-j" class="headerlink" title="$0 &lt; K \le N \le 50, 0 &lt; A_i, S, T \le 2^18, A_i \neq A_j$"></a>$0 &lt; K \le N \le 50, 0 &lt; A_i, S, T \le 2^18, A_i \neq A_j$</h4><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ol><li><h4 id="筛"><a href="#筛" class="headerlink" title="筛"></a>筛</h4><ul><li><h4 id="如果-S-T-T-neq-0-无解"><a href="#如果-S-T-T-neq-0-无解" class="headerlink" title="如果 $(S | T) ^ T \neq 0$ 无解"></a>如果 $(S | T) ^ T \neq 0$ 无解</h4></li><li><h4 id="对于每一个数-x-如果-x-T-neq-T-或-x-amp-S-neq-S-则一定不可能作为解的一部分"><a href="#对于每一个数-x-如果-x-T-neq-T-或-x-amp-S-neq-S-则一定不可能作为解的一部分" class="headerlink" title="对于每一个数$x$, 如果$x | T \neq T$或$x &amp; S \neq S$, 则一定不可能作为解的一部分"></a>对于每一个数$x$, 如果$x | T \neq T$或$x &amp; S \neq S$, 则一定不可能作为解的一部分</h4></li><li><h4 id="对于筛出的数-只需考虑-S-T-为-1-的位"><a href="#对于筛出的数-只需考虑-S-T-为-1-的位" class="headerlink" title="对于筛出的数, 只需考虑$S ^ T$为$1$的位"></a>对于筛出的数, 只需考虑$S ^ T$为$1$的位</h4></li></ul></li><li><h4 id="容斥"><a href="#容斥" class="headerlink" title="容斥"></a>容斥</h4><ul><li><h4 id="性质-具有全0或全1位"><a href="#性质-具有全0或全1位" class="headerlink" title="性质: 具有全0或全1位"></a>性质: 具有全0或全1位</h4></li><li><h4 id="目的-不具有性质的个数"><a href="#目的-不具有性质的个数" class="headerlink" title="目的: 不具有性质的个数"></a>目的: 不具有性质的个数</h4></li><li><h4 id="贡献-g-i-1-当且仅当-i-0-否则为-0-鬼知道为什么我的md用不了latex环境"><a href="#贡献-g-i-1-当且仅当-i-0-否则为-0-鬼知道为什么我的md用不了latex环境" class="headerlink" title="贡献: $g(i) = 1$ 当且仅当 $i = 0$, 否则为 $0$ (鬼知道为什么我的md用不了latex环境)"></a>贡献: $g(i) = 1$ 当且仅当 $i = 0$, 否则为 $0$ (鬼知道为什么我的md用不了latex环境)</h4></li><li><h4 id="容斥系数-考虑对于这个特殊的贡献-容斥系数-f-i-1-i"><a href="#容斥系数-考虑对于这个特殊的贡献-容斥系数-f-i-1-i" class="headerlink" title="容斥系数: 考虑对于这个特殊的贡献, 容斥系数$f(i) = (-1)^i$"></a>容斥系数: 考虑对于这个特殊的贡献, 容斥系数$f(i) = (-1)^i$</h4></li></ul></li><li><h4 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h4><ul><li><h4 id="枚举需要考虑的每一位-“全1或全0”-或-“不考虑”"><a href="#枚举需要考虑的每一位-“全1或全0”-或-“不考虑”" class="headerlink" title="枚举需要考虑的每一位 “全1或全0” 或 “不考虑”"></a>枚举需要考虑的每一位 “全1或全0” 或 “不考虑”</h4></li><li><h4 id="对于每次枚举出状态-将每一个数分类存储在桶中-下标-或者说分类依据-为上条前种状态中考虑的位置的对应二进制组成的数"><a href="#对于每次枚举出状态-将每一个数分类存储在桶中-下标-或者说分类依据-为上条前种状态中考虑的位置的对应二进制组成的数" class="headerlink" title="对于每次枚举出状态, 将每一个数分类存储在桶中, 下标,或者说分类依据,为上条前种状态中考虑的位置的对应二进制组成的数"></a>对于每次枚举出状态, 将每一个数分类存储在桶中, 下标,或者说分类依据,为上条前种状态中考虑的位置的对应二进制组成的数</h4></li><li><h4 id="对于每一类-都可以选择-1-k-个-容斥系数与枚举状态中考虑的数的个数-即状态变量-i-二进制中-1-的个数相关"><a href="#对于每一类-都可以选择-1-k-个-容斥系数与枚举状态中考虑的数的个数-即状态变量-i-二进制中-1-的个数相关" class="headerlink" title="对于每一类, 都可以选择$1-k$个, 容斥系数与枚举状态中考虑的数的个数, 即状态变量$i$二进制中$1$的个数相关"></a>对于每一类, 都可以选择$1-k$个, 容斥系数与枚举状态中考虑的数的个数, 即状态变量$i$二进制中$1$的个数相关</h4></li></ul></li></ol><h3 id="细节-技巧-注意"><a href="#细节-技巧-注意" class="headerlink" title="细节/技巧/注意"></a>细节/技巧/注意</h3><ul><li><h4 id="对于一个数x-遍历仅改变其二进制下原为-1-的位的所有情况"><a href="#对于一个数x-遍历仅改变其二进制下原为-1-的位的所有情况" class="headerlink" title="对于一个数x, 遍历仅改变其二进制下原为$1$的位的所有情况"></a>对于一个数x, 遍历仅改变其二进制下原为$1$的位的所有情况</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = x; i; i = (i - <span class="number">1</span>) &amp; x) </span><br><span class="line">something</span><br></pre></td></tr></table></figure></li><li><h4 id="此题求解中对于考虑到的数-x-按状态-i-中考虑到的每一位分类"><a href="#此题求解中对于考虑到的数-x-按状态-i-中考虑到的每一位分类" class="headerlink" title="此题求解中对于考虑到的数$x$按状态$i$中考虑到的每一位分类"></a>此题求解中对于考虑到的数$x$按状态$i$中考虑到的每一位分类</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A[i] &amp; i</span><br></pre></td></tr></table></figure></li><li><h4 id="注意清空桶"><a href="#注意清空桶" class="headerlink" title="注意清空桶"></a>注意清空桶</h4></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">60</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> T[MAXN], A[MAXN], C[MAXN][MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Bk[MAXV]; </span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, s, k, t, ans, cnt;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; k &gt;&gt; s &gt;&gt; t;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, n) IN &gt;&gt; T[i];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">Pre</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>((s | t) ^ t) <span class="keyword">return</span> cout &lt;&lt; <span class="number">0</span>, <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, n) </span><br><span class="line"><span class="keyword">if</span>( (s &amp; T[i]) == s &amp;&amp; (t | T[i]) == t ) </span><br><span class="line">A[cnt++] = T[i];</span><br><span class="line"> </span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, k+<span class="number">1</span>) </span><br><span class="line">ans += C[cnt][i];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> lm = s ^ t; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = lm; i; i = (i - <span class="number">1</span>) &amp; lm) &#123;</span><br><span class="line"><span class="built_in">IOR</span>(v, <span class="number">0</span>, cnt) Bk[A[v] &amp; i]++;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">IOR</span>(v, <span class="number">0</span>, cnt) &#123;</span><br><span class="line"><span class="built_in">IOR</span>(l, <span class="number">1</span>, k+<span class="number">1</span>) </span><br><span class="line">ans += C[Bk[A[v] &amp; i] ][l] * (__builtin_popcount(i) &amp; <span class="number">1</span> ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">Bk[A[v] &amp; i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">cout &lt;&lt; ans;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, MAXN) C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, MAXN) <span class="built_in">IOR</span>(v, <span class="number">1</span>, MAXN)</span><br><span class="line">C[i][v] = C[i<span class="number">-1</span>][v] + C[i<span class="number">-1</span>][v<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="做题中的一些问题"><a href="#做题中的一些问题" class="headerlink" title="做题中的一些问题"></a>做题中的一些问题</h3><ul><li><h3 id="《关于我因为把样例1看成样例2结果调了半个小时试了三种组合数求法这件事》"><a href="#《关于我因为把样例1看成样例2结果调了半个小时试了三种组合数求法这件事》" class="headerlink" title="《关于我因为把样例1看成样例2结果调了半个小时试了三种组合数求法这件事》"></a>《关于我因为把样例1看成样例2结果调了半个小时试了三种组合数求法这件事》</h3></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 容斥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF839D Winter is here</title>
      <link href="/2021/10/16/CF839D_Winter_is_here/"/>
      <url>/2021/10/16/CF839D_Winter_is_here/</url>
      
        <content type="html"><![CDATA[<h3 id="CF839D"><a href="#CF839D" class="headerlink" title="CF839D"></a><a href="https://www.luogu.com.cn/problem/CF839D">CF839D</a></h3><h3 id="从大到小考虑每个数及其倍数的子序列长度和"><a href="#从大到小考虑每个数及其倍数的子序列长度和" class="headerlink" title="从大到小考虑每个数及其倍数的子序列长度和"></a>从大到小考虑每个数及其倍数的子序列长度和</h3><h3 id="过程中去重"><a href="#过程中去重" class="headerlink" title="过程中去重"></a>过程中去重</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXV = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Len[MAXV], Sum[MAXV];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="comment">//freopen(&quot;I:\\Code\\Out.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n; </span><br><span class="line"><span class="keyword">int</span> x;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, n) IN &gt;&gt; x, Sum[x]++; </span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">LOR</span>(i, MAXV<span class="number">-1</span>, <span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//if(!Sum[i]) continue;</span></span><br><span class="line">tmp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v = i; v &lt; MAXV; v += i) &#123;</span><br><span class="line"><span class="comment">//tmp = (tmp % P + Sum[v] % P) % P;</span></span><br><span class="line">tmp = (tmp + Sum[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!tmp) <span class="keyword">continue</span>;</span><br><span class="line">tmp = tmp * <span class="built_in">Qp</span>(<span class="number">2</span>, tmp - <span class="number">1</span>) % P;</span><br><span class="line">Len[i] = tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v = i+i; v &lt; MAXV; v += i)</span><br><span class="line">Len[i] = (Len[i] - Len[v] + P) % P;</span><br><span class="line"></span><br><span class="line">ans = (ans + Len[i] * i % P) % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">long long Qp(long long x, long long e) &#123;</span></span><br><span class="line"><span class="comment">long long res = 1;</span></span><br><span class="line"><span class="comment">x %= P;</span></span><br><span class="line"><span class="comment">while(e) &#123;</span></span><br><span class="line"><span class="comment">if(e &amp; 1) res = res * x % P;</span></span><br><span class="line"><span class="comment">x = x * x % P;  e &gt;&gt;= 1;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">cerr &lt;&lt; &quot;Qp:&quot; &lt;&lt; res &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"><span class="comment">return res % P;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">x %= P;</span><br><span class="line"><span class="keyword">while</span>(e) &#123;</span><br><span class="line"><span class="keyword">if</span>(e &amp; <span class="number">1</span>) res = res * x % P;</span><br><span class="line">x = x * x % P; e &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res % P;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> gcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/10/15/LG2480%5BSDOI2010%5D%E5%8F%A4%E4%BB%A3%E7%8C%AA%E6%96%87/"/>
      <url>/2021/10/15/LG2480%5BSDOI2010%5D%E5%8F%A4%E4%BB%A3%E7%8C%AA%E6%96%87/</url>
      
        <content type="html"><![CDATA[<h3 id="LG2480-SDOI2010-古代猪文"><a href="#LG2480-SDOI2010-古代猪文" class="headerlink" title="LG2480[SDOI2010]古代猪文"></a><a href="https://www.luogu.com.cn/problem/P2480">LG2480[SDOI2010]古代猪文</a></h3><h3 id="题意-给定-g-n-le-1e9-求"><a href="#题意-给定-g-n-le-1e9-求" class="headerlink" title="题意: 给定$g, n\le 1e9$求"></a>题意: 给定$g, n\le 1e9$求</h3><p>$$g^{\sum_{d|n}\tbinom{n}{d}}<del>mod</del>999911659$$</p><h3 id="解"><a href="#解" class="headerlink" title="解:"></a>解:</h3><h3 id="1-欧拉定理"><a href="#1-欧拉定理" class="headerlink" title="1.欧拉定理"></a>1.欧拉定理</h3><p>$$g^{\sum_{d|n}\tbinom{n}{d}<del>mod</del>999911658} $$</p><h3 id="2-CRT-amp-amp-2-3-4679-35617-999911658"><a href="#2-CRT-amp-amp-2-3-4679-35617-999911658" class="headerlink" title="2.CRT &amp;&amp; 2 * 3 * 4679 * 35617 = 999911658"></a>2.CRT &amp;&amp; 2 * 3 * 4679 * 35617 = 999911658</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$\begin&#123;cases&#125; </span><br><span class="line">x \equiv \sum_&#123;d|n&#125;\tbinom&#123;n&#125;&#123;d&#125;~mod~2</span><br><span class="line">x \equiv \sum_&#123;d|n&#125;\tbinom&#123;n&#125;&#123;d&#125;~mod~3</span><br><span class="line">x \equiv \sum_&#123;d|n&#125;\tbinom&#123;n&#125;&#123;d&#125;~mod~4679</span><br><span class="line">x \equiv \sum_&#123;d|n&#125;\tbinom&#123;n&#125;&#123;d&#125;~mod~35617</span><br><span class="line">\end&#123;cases&#125;$</span><br></pre></td></tr></table></figure><h3 id="左边式子用lucas处理"><a href="#左边式子用lucas处理" class="headerlink" title="左边式子用lucas处理"></a>左边式子用lucas处理</h3><h3 id="明天再学怎么在Markdown放latex公式"><a href="#明天再学怎么在Markdown放latex公式" class="headerlink" title="明天再学怎么在Markdown放latex公式"></a>明天再学怎么在Markdown放latex公式</h3><h3 id="ans-g-x-mod999911659"><a href="#ans-g-x-mod999911659" class="headerlink" title="$ans=g^{x}mod999911659$"></a>$ans<del>=</del>g^{x}<del>mod</del>999911659$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Fac[MAXN], Ie[MAXN], D[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXM], N[MAXM], L[MAXM] = &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4679</span>, <span class="number">35617</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> g, n, cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> e, <span class="keyword">long</span> <span class="keyword">long</span> p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m, <span class="keyword">long</span> <span class="keyword">long</span> p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Crt</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">long</span> <span class="keyword">long</span>* A, <span class="keyword">long</span> <span class="keyword">long</span> *N)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">C</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m, <span class="keyword">long</span> <span class="keyword">long</span> p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exgcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> &amp;x, <span class="keyword">long</span> <span class="keyword">long</span> &amp;y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="comment">//freopen(&quot;I:\\Code\\Out.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n &gt;&gt; g;</span><br><span class="line"><span class="keyword">if</span>(g % <span class="number">999911659</span> == <span class="number">0</span>) &#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;0&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lm = <span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, lm+<span class="number">1</span>) <span class="keyword">if</span>(n % i == <span class="number">0</span>) </span><br><span class="line">D[cnt++] = i, D[cnt++] = n / i;</span><br><span class="line"><span class="keyword">if</span>(D[cnt<span class="number">-1</span>] == D[cnt<span class="number">-2</span>]) cnt--;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, <span class="number">4</span>) &#123;</span><br><span class="line"><span class="built_in">Pre</span>(L[i]); N[i] = L[i];</span><br><span class="line"><span class="built_in">IOR</span>(v, <span class="number">0</span>, cnt) </span><br><span class="line">A[i] = (A[i] % L[i] + <span class="built_in">Lucas</span>(n, D[v], L[i]) ) % L[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x = <span class="built_in">Crt</span>(<span class="number">4</span>, A, N);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">Qp</span>(g, x, <span class="number">999911659</span>) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line">Fac[<span class="number">0</span>] = Ie[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, p+<span class="number">1</span>) </span><br><span class="line">Fac[i] = Fac[i<span class="number">-1</span>] * i % p;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> e, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">x %= p;</span><br><span class="line"><span class="keyword">while</span>(e) &#123;</span><br><span class="line"><span class="keyword">if</span>(e &amp; <span class="number">1</span>) res = res * x % p;</span><br><span class="line">x = x * x % p; e &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">C</span>(n % p, m % p, p) * <span class="built_in">Lucas</span>(n / p, m / p, p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Crt</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">long</span> <span class="keyword">long</span>* A, <span class="keyword">long</span> <span class="keyword">long</span> *N)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> pn = <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, k) pn *= N[i];</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, k) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> im, x, m = pn / N[i];</span><br><span class="line"><span class="built_in">Exgcd</span>(m, N[i], im, x);</span><br><span class="line">im = (im + N[i]) % N[i];</span><br><span class="line">im = im * pn / N[i];</span><br><span class="line">res = (res % pn + A[i] * im % pn) % pn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exgcd</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> a, <span class="keyword">long</span> <span class="keyword">long</span> b, <span class="keyword">long</span> <span class="keyword">long</span> &amp;x, <span class="keyword">long</span> <span class="keyword">long</span> &amp;y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b) &#123;x = <span class="number">1</span>, y = <span class="number">0</span>; <span class="keyword">return</span> ;&#125;</span><br><span class="line"><span class="built_in">Exgcd</span>(b, a % b, y, x);</span><br><span class="line">y -= x * (a / b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">C</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m, <span class="keyword">long</span> <span class="keyword">long</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> Fac[n] * ( <span class="built_in">Qp</span>(Fac[m], p<span class="number">-2</span>, p) * <span class="built_in">Qp</span>(Fac[n-m], p<span class="number">-2</span>, p) % p) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 组合数 </tag>
            
            <tag> Lucas </tag>
            
            <tag> 欧拉定理 </tag>
            
            <tag> Exgcd </tag>
            
            <tag> CRT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lucas定理</title>
      <link href="/2021/10/14/Lucas/"/>
      <url>/2021/10/14/Lucas/</url>
      
        <content type="html"><![CDATA[<h3 id="LG3807-模板-卢卡斯定理-Lucas-定理"><a href="#LG3807-模板-卢卡斯定理-Lucas-定理" class="headerlink" title="LG3807[模板]卢卡斯定理/Lucas 定理"></a><a href="https://www.luogu.com.cn/problem/P3807">LG3807[模板]卢卡斯定理/Lucas 定理</a></h3><h3 id="就，模板"><a href="#就，模板" class="headerlink" title="就，模板"></a>就，模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXQ = <span class="number">10</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Fac[MAXN], Ie[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, m, p, t, up;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">C</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">IN &gt;&gt; t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(t--) &#123;</span><br><span class="line">IN &gt;&gt; n &gt;&gt; m &gt;&gt; p;</span><br><span class="line"><span class="built_in">Pre</span>(p);</span><br><span class="line">cout &lt;&lt; <span class="built_in">Lucas</span>(n+m, n) &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Fac[<span class="number">0</span>] = Ie[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, x+<span class="number">1</span>) </span><br><span class="line">Fac[i] = Fac[i<span class="number">-1</span>] * i % p,</span><br><span class="line">Ie[i] = <span class="built_in">Qp</span>(Fac[i], p<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">x %= p;</span><br><span class="line"><span class="keyword">while</span>(e) &#123;</span><br><span class="line"><span class="keyword">if</span>(e &amp; <span class="number">1</span>) res = x * res % p;</span><br><span class="line">x = x * x % p; e &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">C</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Fac[n] * (Ie[m] * Ie[n-m] % p) % p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Lucas</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> n, <span class="keyword">long</span> <span class="keyword">long</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">C</span>(n % p, m % p) * <span class="built_in">Lucas</span>(n / p, m / p) % p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 组合数 </tag>
            
            <tag> Lucas </tag>
            
            <tag> 模板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1312D</title>
      <link href="/2021/10/14/CF1312D/"/>
      <url>/2021/10/14/CF1312D/</url>
      
        <content type="html"><![CDATA[<h3 id="CF1312D"><a href="#CF1312D" class="headerlink" title="CF1312D"></a><a href="https://codeforces.com/contest/1312/problem/D">CF1312D</a></h3><h3 id="题意"><a href="#题意" class="headerlink" title="题意:"></a>题意:</h3><h3 id="1-m-选-n-个-有且只有一个数字重复出现"><a href="#1-m-选-n-个-有且只有一个数字重复出现" class="headerlink" title="$[1, m]$ 选$n$个, 有且只有一个数字重复出现"></a>$[1, m]$ 选$n$个, 有且只有一个数字重复出现</h3><h3 id="以上数字组成序列-要求序列前后分为单增单减两部分"><a href="#以上数字组成序列-要求序列前后分为单增单减两部分" class="headerlink" title="以上数字组成序列, 要求序列前后分为单增单减两部分"></a>以上数字组成序列, 要求序列前后分为单增单减两部分</h3><h3 id="给出-n-m-le-2e5-求数列个数-1e9-7"><a href="#给出-n-m-le-2e5-求数列个数-1e9-7" class="headerlink" title="给出$n, m \le 2e5$, 求数列个数 $%1e9+7$"></a>给出$n, m \le 2e5$, 求数列个数 $%1e9+7$</h3><h3 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h3><h3 id="分步选取"><a href="#分步选取" class="headerlink" title="分步选取,"></a>分步选取,</h3><ul><li><h3 id="组成序列的数字-dbinom-m-n-1"><a href="#组成序列的数字-dbinom-m-n-1" class="headerlink" title="组成序列的数字 $\dbinom{m}{n-1}$"></a>组成序列的数字 $\dbinom{m}{n-1}$</h3></li><li><h3 id="中间最大的数-一定只有一个-n-2"><a href="#中间最大的数-一定只有一个-n-2" class="headerlink" title="中间最大的数(一定只有一个) $(n-2)$"></a>中间最大的数(一定只有一个) $(n-2)$</h3></li><li><h3 id="余下的数字选择放在最大的数两侧-2-n-3"><a href="#余下的数字选择放在最大的数两侧-2-n-3" class="headerlink" title="余下的数字选择放在最大的数两侧 $2^{n-3}$"></a>余下的数字选择放在最大的数两侧 $2^{n-3}$</h3></li></ul><h3 id="注意特判-n-lt-3"><a href="#注意特判-n-lt-3" class="headerlink" title="注意特判$n&lt;3$"></a>注意特判$n&lt;3$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Fac[MAXN], Ie[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="built_in">Pre</span>();</span><br><span class="line">IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; Fac[m] * (Ie[n<span class="number">-1</span>] * Ie[m-n+<span class="number">1</span>] % P) % P </span><br><span class="line">* (n<span class="number">-2</span>) % <span class="function">P * <span class="title">Qp</span><span class="params">(<span class="number">2</span>, n<span class="number">-3</span>)</span> % P</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">long</span> <span class="keyword">long</span> e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(e &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">1</span>;</span><br><span class="line">x %= P;</span><br><span class="line"><span class="keyword">while</span>(e) &#123;</span><br><span class="line"><span class="keyword">if</span>(e &amp; <span class="number">1</span>) res = res * x % P;</span><br><span class="line">x = x * x % P; e &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res % P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Fac[<span class="number">0</span>] = Ie[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, MAXN) </span><br><span class="line">Fac[i] = Fac[i<span class="number">-1</span>] % P * i % P % P,</span><br><span class="line">Ie[i] = <span class="built_in">Qp</span>(Fac[i], P<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 组合数 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARC077B</title>
      <link href="/2021/10/14/ARC007B/"/>
      <url>/2021/10/14/ARC007B/</url>
      
        <content type="html"><![CDATA[<h3 id="ARC007"><a href="#ARC007" class="headerlink" title="ARC007"></a><a href="https://atcoder.jp/contests/arc077/tasks/arc077_b">ARC007</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 组合数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF1129C</title>
      <link href="/2021/10/13/CF1129C/"/>
      <url>/2021/10/13/CF1129C/</url>
      
        <content type="html"><![CDATA[<h1 id="CF1129C"><a href="#CF1129C" class="headerlink" title="CF1129C"></a><a href="https://codeforces.com/problemset/problem/1129/C">CF1129C</a></h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><h3 id="Tr-MAXN-MAXN-MAXC-Trie-存储每一个子序列"><a href="#Tr-MAXN-MAXN-MAXC-Trie-存储每一个子序列" class="headerlink" title="Tr[MAXN*MAXN][MAXC]: Trie, 存储每一个子序列"></a>Tr[MAXN*MAXN][MAXC]: Trie, 存储每一个子序列</h3></li><li><h3 id="Fa-MAXN-MAXN-每个Trie节点的父节点"><a href="#Fa-MAXN-MAXN-每个Trie节点的父节点" class="headerlink" title="Fa[MAXN*MAXN]: 每个Trie节点的父节点"></a>Fa[MAXN*MAXN]: 每个Trie节点的父节点</h3></li><li><h3 id="Pos-MAXN-每次插入位置的前一个位置的所有Trie上对应的点"><a href="#Pos-MAXN-每次插入位置的前一个位置的所有Trie上对应的点" class="headerlink" title="Pos[MAXN]: 每次插入位置的前一个位置的所有Trie上对应的点"></a>Pos[MAXN]: 每次插入位置的前一个位置的所有Trie上对应的点</h3></li><li><h3 id="Dp-MAXN-MAXN-每个Trie节点到根节点所代表的01串可以组成字符串的种类数"><a href="#Dp-MAXN-MAXN-每个Trie节点到根节点所代表的01串可以组成字符串的种类数" class="headerlink" title="Dp[MAXN*MAXN]: 每个Trie节点到根节点所代表的01串可以组成字符串的种类数"></a>Dp[MAXN*MAXN]: 每个Trie节点到根节点所代表的01串可以组成字符串的种类数</h3></li></ul><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li><h3 id="每次新加入一个点-在Trie树上所有对应节点-即当前所有后缀-上加入这个点"><a href="#每次新加入一个点-在Trie树上所有对应节点-即当前所有后缀-上加入这个点" class="headerlink" title="每次新加入一个点, 在Trie树上所有对应节点(即当前所有后缀)上加入这个点"></a>每次新加入一个点, 在Trie树上所有对应节点(即当前所有后缀)上加入这个点</h3></li><li><h3 id="Trie上插入时尝试将这个点与到根节点的链上的前4的点组成字符并更新答案"><a href="#Trie上插入时尝试将这个点与到根节点的链上的前4的点组成字符并更新答案" class="headerlink" title="Trie上插入时尝试将这个点与到根节点的链上的前4的点组成字符并更新答案"></a>Trie上插入时尝试将这个点与到根节点的链上的前4的点组成字符并更新答案</h3></li><li><h3 id="Trie上每种字符串一定不同-只需要考虑更新Dp-值时去掉四种没有意义的情况"><a href="#Trie上每种字符串一定不同-只需要考虑更新Dp-值时去掉四种没有意义的情况" class="headerlink" title="Trie上每种字符串一定不同, 只需要考虑更新Dp[]值时去掉四种没有意义的情况"></a>Trie上每种字符串一定不同, 只需要考虑更新Dp[]值时去掉四种没有意义的情况</h3></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">3e3</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXC = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> Tr[MAXN*MAXN][MAXC];</span><br><span class="line"><span class="keyword">int</span> Pos[MAXN], Fa[MAXN*MAXN], Dp[MAXN*MAXN]; </span><br><span class="line"><span class="keyword">int</span> m, ans, cnt, idx, z;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TrieIns</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NormalIns</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> &amp;x,<span class="keyword">int</span> y)</span></span>&#123;  <span class="comment">//手动取模</span></span><br><span class="line">x+=y;</span><br><span class="line"><span class="keyword">while</span>(x&gt;=P) x-=P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">Dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">IN &gt;&gt; m;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, m) &#123;</span><br><span class="line"><span class="keyword">int</span> x; IN &gt;&gt; x;</span><br><span class="line"><span class="built_in">NormalIns</span>(x);</span><br><span class="line">cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NormalIns</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Pos[idx++] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, idx) &#123;</span><br><span class="line"><span class="keyword">int</span> t = Pos[i];</span><br><span class="line"><span class="keyword">if</span>(!Tr[t][x]) <span class="built_in">TrieIns</span>(Pos[i], x);</span><br><span class="line">Pos[i] = Tr[t][x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TrieIns</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">Tr[p][k] = ++cnt;</span><br><span class="line">Fa[cnt] = p;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> hash = <span class="number">0</span>, ffa;</span><br><span class="line">p = cnt;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, <span class="number">4</span>) &#123;</span><br><span class="line">ffa = Fa[p],</span><br><span class="line">hash += (Tr[ffa][<span class="number">0</span>] != p) &lt;&lt; i;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>( (i != <span class="number">3</span>) || (hash != <span class="number">3</span> &amp;&amp; hash != <span class="number">5</span> &amp;&amp; hash != <span class="number">14</span> &amp;&amp; hash != <span class="number">15</span>) )</span><br><span class="line"><span class="built_in">Add</span>(Dp[cnt], Dp[ffa]);</span><br><span class="line"> </span><br><span class="line">p = ffa;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(p == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Add</span>(ans, Dp[cnt]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> Hash </tag>
            
            <tag> Dp </tag>
            
            <tag> Trie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSS3-线段树单点修改区间最大子段和</title>
      <link href="/2021/10/07/GSS3/"/>
      <url>/2021/10/07/GSS3/</url>
      
        <content type="html"><![CDATA[<h3 id="GSS3"><a href="#GSS3" class="headerlink" title="GSS3"></a><a href="https://www.luogu.com.cn/problem/SP1716">GSS3</a></h3><h3 id="每个节点维护前缀最大子段和lmax-后缀最大子段和rmax-最大子段和max-区间和val"><a href="#每个节点维护前缀最大子段和lmax-后缀最大子段和rmax-最大子段和max-区间和val" class="headerlink" title="每个节点维护前缀最大子段和lmax, 后缀最大子段和rmax, 最大子段和max, 区间和val"></a>每个节点维护前缀最大子段和<code>lmax</code>, 后缀最大子段和<code>rmax</code>, 最大子段和<code>max</code>, 区间和<code>val</code></h3><h3 id="PushUp"><a href="#PushUp" class="headerlink" title="PushUp:"></a>PushUp:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Seg::Up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Seg lt = Tr[lc], rt = Tr[rc];</span><br><span class="line">val = lt.val + rt.val;</span><br><span class="line">lmax = <span class="built_in">max</span>(lt.lmax, lt.val + rt.lmax);</span><br><span class="line">rmax = <span class="built_in">max</span>(rt.rmax, rt.val + lt.rmax);</span><br><span class="line">mx = <span class="built_in">max</span>(<span class="built_in">max</span>(lt.mx, rt.mx), lt.rmax + rt.lmax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ask"><a href="#Ask" class="headerlink" title="Ask:"></a>Ask:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Seg <span class="title">Seg::Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="comment">//查询区间完全包含当前节点</span></span><br><span class="line"><span class="keyword">if</span>(L &gt;= l &amp;&amp; r &gt;= R) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询区间完全被包含于当前节点的某一子节点</span></span><br><span class="line"><span class="keyword">if</span>(r &lt;= MID) <span class="keyword">return</span> Tr[lc].<span class="built_in">Ask</span>(l, r, L, MID);</span><br><span class="line"><span class="keyword">if</span>(l &gt; MID) <span class="keyword">return</span> Tr[rc].<span class="built_in">Ask</span>(l, r, MID+<span class="number">1</span>, R);</span><br><span class="line"></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line">Seg lt, rt, res;</span><br><span class="line"></span><br><span class="line">lt = Tr[lc].<span class="built_in">Ask</span>(l, r, L, MID);</span><br><span class="line">rt = Tr[rc].<span class="built_in">Ask</span>(l, r, MID+<span class="number">1</span>, R);</span><br><span class="line"></span><br><span class="line">res.val = lt.val + rt.val;</span><br><span class="line">res.lmax = <span class="built_in">max</span>(lt.lmax, lt.val + rt.lmax);</span><br><span class="line">res.rmax = <span class="built_in">max</span>(rt.rmax, rt.val + lt.rmax);</span><br><span class="line">res.mx = <span class="built_in">max</span>(<span class="built_in">max</span>(lt.mx, rt.mx), lt.rmax + rt.lmax);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="All"><a href="#All" class="headerlink" title="All"></a>All</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MB=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> buf[MB+<span class="number">100</span>],*p,*e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==e) p=buf,e=buf+<span class="built_in">fread</span>(buf,<span class="number">1</span>,MB,stdin);</span><br><span class="line"><span class="keyword">return</span> p==e?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID ((L + R) &gt;&gt; 1)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> lc, rc;</span><br><span class="line"><span class="keyword">int</span> lmax, rmax, mx, val;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">Seg <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125; Tr[MAXN&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:/Code/WA.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; n;</span><br><span class="line">Tr[<span class="number">1</span>].<span class="built_in">Init</span>(<span class="number">1</span>, n);</span><br><span class="line"></span><br><span class="line">IN &gt;&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="keyword">int</span> opt, x, y;</span><br><span class="line">IN &gt;&gt; opt &gt;&gt; x &gt;&gt; y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!opt) Tr[<span class="number">1</span>].<span class="built_in">Change</span>(x, y, <span class="number">1</span>, n);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, Tr[<span class="number">1</span>].<span class="built_in">Ask</span>(x, y, <span class="number">1</span>, n).mx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Seg::Init</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L == R) &#123;</span><br><span class="line">IN &gt;&gt; val; </span><br><span class="line">lmax = rmax = mx = val;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lc = <span class="built_in">New</span>(); Tr[lc].<span class="built_in">Init</span>(L, MID); </span><br><span class="line">rc = <span class="built_in">New</span>(); Tr[rc].<span class="built_in">Init</span>(MID+<span class="number">1</span>, R);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Up</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Seg::Change</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L == R) &#123;</span><br><span class="line">lmax = rmax = mx = val = k;</span><br><span class="line"><span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(x &lt;= MID) Tr[lc].<span class="built_in">Change</span>(x, k, L, MID);</span><br><span class="line"><span class="keyword">else</span> Tr[rc].<span class="built_in">Change</span>(x, k, MID+<span class="number">1</span>, R);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Up</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Seg <span class="title">Seg::Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &gt;= l &amp;&amp; r &gt;= R) <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(r &lt;= MID) <span class="keyword">return</span> Tr[lc].<span class="built_in">Ask</span>(l, r, L, MID);</span><br><span class="line"><span class="keyword">if</span>(l &gt; MID) <span class="keyword">return</span> Tr[rc].<span class="built_in">Ask</span>(l, r, MID+<span class="number">1</span>, R);</span><br><span class="line"></span><br><span class="line">Seg lt, rt, res;</span><br><span class="line"></span><br><span class="line">lt = Tr[lc].<span class="built_in">Ask</span>(l, r, L, MID);</span><br><span class="line">rt = Tr[rc].<span class="built_in">Ask</span>(l, r, MID+<span class="number">1</span>, R);</span><br><span class="line"></span><br><span class="line">res.val = lt.val + rt.val;</span><br><span class="line">res.lmax = <span class="built_in">max</span>(lt.lmax, lt.val + rt.lmax);</span><br><span class="line">res.rmax = <span class="built_in">max</span>(rt.rmax, rt.val + lt.rmax);</span><br><span class="line">res.mx = <span class="built_in">max</span>(<span class="built_in">max</span>(lt.mx, rt.mx), lt.rmax + rt.lmax);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Seg::New</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ++cnt; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Seg::Up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Seg lt = Tr[lc], rt = Tr[rc];</span><br><span class="line">val = lt.val + rt.val;</span><br><span class="line">lmax = <span class="built_in">max</span>(lt.lmax, lt.val + rt.lmax);</span><br><span class="line">rmax = <span class="built_in">max</span>(rt.rmax, rt.val + lt.rmax);</span><br><span class="line">mx = <span class="built_in">max</span>(<span class="built_in">max</span>(lt.mx, rt.mx), lt.rmax + rt.lmax);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
            <tag> 最大子段和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GSS4</title>
      <link href="/2021/10/07/GSS4/"/>
      <url>/2021/10/07/GSS4/</url>
      
        <content type="html"><![CDATA[<h3 id="GSS4"><a href="#GSS4" class="headerlink" title="GSS4"></a><a href="https://www.luogu.com.cn/problem/SP2713">GSS4</a></h3><h2 id="每个数最多被开log次"><a href="#每个数最多被开log次" class="headerlink" title="每个数最多被开log次"></a>每个数最多被开log次</h2><h2 id="记录区间max-gt-1则暴力修改"><a href="#记录区间max-gt-1则暴力修改" class="headerlink" title="记录区间max, &gt;1则暴力修改"></a>记录区间max, &gt;1则暴力修改</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID ((L + R) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) (Tr[x].val)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M(x) (Tr[x].mx)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> lc, rc, mx, val;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125; Tr[MAXN&lt;&lt;<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, q, Index = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;n)) &#123;</span><br><span class="line"><span class="keyword">if</span>(Index != <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Case #%lld:\n&quot;</span>, Index++);</span><br><span class="line">Tr[<span class="number">1</span>].<span class="built_in">Init</span>(<span class="number">1</span>, n);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="keyword">int</span> opt, x, y; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;opt, &amp;x, &amp;y);</span><br><span class="line"><span class="keyword">if</span>(x &gt; y) <span class="built_in">swap</span>(x, y);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(opt) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, Tr[<span class="number">1</span>].<span class="built_in">Ask</span>(x, y, <span class="number">1</span>, n));</span><br><span class="line"><span class="keyword">else</span> Tr[<span class="number">1</span>].<span class="built_in">Change</span>(x, y, <span class="number">1</span>, n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Seg::Init</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L == R) &#123; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;val); mx = val; <span class="keyword">return</span> ; &#125;</span><br><span class="line"></span><br><span class="line">lc = <span class="built_in">New</span>(); Tr[lc].<span class="built_in">Init</span>(L, MID);</span><br><span class="line">rc = <span class="built_in">New</span>(); Tr[rc].<span class="built_in">Init</span>(MID+<span class="number">1</span>, R);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Up</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Seg::Change</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mx == <span class="number">1</span>) <span class="keyword">return</span> ;</span><br><span class="line"><span class="keyword">if</span>(L == R) &#123;</span><br><span class="line">val = <span class="built_in">sqrt</span>(val); mx = val;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(l &lt;= MID) Tr[lc].<span class="built_in">Change</span>(l, r, L, MID);</span><br><span class="line"><span class="keyword">if</span>(r &gt; MID) Tr[rc].<span class="built_in">Change</span>(l, r, MID+<span class="number">1</span>, R);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Up</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Seg::Up</span><span class="params">()</span> </span>&#123;</span><br><span class="line">val = <span class="built_in">V</span>(lc) + <span class="built_in">V</span>(rc);</span><br><span class="line">mx = <span class="built_in">max</span>(<span class="built_in">M</span>(lc), <span class="built_in">M</span>(rc));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Seg::Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L &gt;= l &amp;&amp; r &gt;= R) <span class="keyword">return</span> val;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l &lt;= MID) res += Tr[lc].<span class="built_in">Ask</span>(l, r, L, MID);</span><br><span class="line"><span class="keyword">if</span>(r &gt; MID) res += Tr[rc].<span class="built_in">Ask</span>(l, r, MID+<span class="number">1</span>, R);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Seg::New</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ++cnt; &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG5048[Ynoi2019模拟赛]Yuno loves sqrt technology III</title>
      <link href="/2021/09/06/P5048_%5BYnoi2019%E6%A8%A1%E6%8B%9F%E8%B5%9B%5D_Yuno_loves_sqrt_technology_III/"/>
      <url>/2021/09/06/P5048_%5BYnoi2019%E6%A8%A1%E6%8B%9F%E8%B5%9B%5D_Yuno_loves_sqrt_technology_III/</url>
      
        <content type="html"><![CDATA[<h3 id="LG5048"><a href="#LG5048" class="headerlink" title="LG5048"></a><a href="https://www.luogu.com.cn/problem/P5048">LG5048</a></h3><h3 id="强制在线区间众数"><a href="#强制在线区间众数" class="headerlink" title="强制在线区间众数"></a>强制在线区间众数</h3><h3 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h3><h3 id="预处理-Pre"><a href="#预处理-Pre" class="headerlink" title="预处理 Pre():"></a>预处理 Pre():</h3><ul><li>F[i][v] 块i~v的众数</li><li>vector<int> Loc[x] 每个数x在数列中的所有位置</li><li>Lmp[i] 数列中位置i的数在对应vector中的位置</li><li>Cmp[i] 离散化 </li></ul><h3 id="询问-Ask-int-x-int-y"><a href="#询问-Ask-int-x-int-y" class="headerlink" title="询问 Ask(int x, int y)"></a>询问 Ask(int x, int y)</h3><ul><li>对于在同一块内的数, 暴力查</li><li>else <ul><li>ans = F[i][v]</li><li>查看区间两端的每一个数, 如果Loc[Cmp[i]][Lmp[i]+ans] &lt;= r, ans++</li></ul></li></ul><h3 id="复杂度-O-n-sqrt-n"><a href="#复杂度-O-n-sqrt-n" class="headerlink" title="复杂度$O(n\sqrt{n})$"></a>复杂度$O(n\sqrt{n})$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(x, y, z) for(int x = y; x &lt; z; x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(x, y, z) for(int x = y; x &gt; z; x--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MB=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> buf[MB+<span class="number">100</span>],*p,*e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==e) p=buf,e=buf+<span class="built_in">fread</span>(buf,<span class="number">1</span>,MB,stdin);</span><br><span class="line"><span class="keyword">return</span> p==e?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXNUM = <span class="number">1e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; Loc[MAXN];</span><br><span class="line"><span class="keyword">int</span> F[MAXNUM][MAXNUM];</span><br><span class="line"><span class="keyword">int</span> A[MAXN], Lmp[MAXN], C[MAXN], Cmp[MAXN], Pos[MAXN], L[MAXN], R[MAXN], Cnt[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, m, ans, idx, block, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Turn</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL </span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) IN &gt;&gt; A[i], C[i] = A[i];</span><br><span class="line">    block = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    num = block;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre</span>();</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y; IN &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        x ^= ans, y ^= ans;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans = <span class="built_in">Ask</span>(x, y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    cerr &lt;&lt; &quot;\n-----------------\n&quot;;</span></span><br><span class="line"><span class="comment">//    IOR(i, 1, num+1) cerr &lt;&lt; &quot;i = &quot; &lt;&lt; i &lt;&lt; &quot; l = &quot; &lt;&lt; L[i] &lt;&lt; &quot; r = &quot; &lt;&lt; R[i] &lt;&lt; &quot; F = &quot; &lt;&lt; F[i][i] &lt;&lt; &quot;\n&quot;;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(C+<span class="number">1</span>, C+n+<span class="number">1</span>);</span><br><span class="line">    idx = <span class="built_in">unique</span>(C+<span class="number">1</span>, C+n+<span class="number">1</span>) - C - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) Cmp[i] = <span class="built_in">Turn</span>(A[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) </span><br><span class="line">        L[i] = (i - <span class="number">1</span>) * block + <span class="number">1</span>,</span><br><span class="line">        R[i] = i * block;</span><br><span class="line">    <span class="keyword">if</span>(R[num] &lt; n) num++, L[num] = R[num<span class="number">-1</span>] + <span class="number">1</span>, R[num] = n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) </span><br><span class="line">        <span class="built_in">IOR</span>(v, L[i], R[i]+<span class="number">1</span>) Pos[v] = i;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) </span><br><span class="line">        Loc[Cmp[i]].<span class="built_in">push_back</span>(i),</span><br><span class="line">        Lmp[i] = Loc[Cmp[i]].<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(Cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> Cnt);</span><br><span class="line">        <span class="built_in">IOR</span>(v, i, num+<span class="number">1</span>) &#123;</span><br><span class="line">            F[i][v] = F[i][v<span class="number">-1</span>];</span><br><span class="line">            <span class="built_in">IOR</span>(k, L[v], R[v] + <span class="number">1</span>) </span><br><span class="line">                Cnt[Cmp[k]]++,</span><br><span class="line">                F[i][v] = <span class="built_in">max</span>(F[i][v], Cnt[Cmp[k]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Turn</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(C+<span class="number">1</span>, C+idx+<span class="number">1</span>, x) - C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l = Pos[x] + <span class="number">1</span>, r = Pos[y] - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(Pos[x] == Pos[y]) &#123;</span><br><span class="line">        res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">IOR</span>(i, x, y+<span class="number">1</span>) Cnt[Cmp[i]] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">IOR</span>(i, x, y+<span class="number">1</span>) </span><br><span class="line">            Cnt[Cmp[i]]++,</span><br><span class="line">            res = <span class="built_in">max</span>(res, Cnt[Cmp[i]]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">IOR</span>(i, x, y+<span class="number">1</span>) Cnt[Cmp[i]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res = F[l][r];</span><br><span class="line">    <span class="built_in">IOR</span>(i, x, L[l])</span><br><span class="line">        <span class="keyword">while</span>(Lmp[i] + res &lt; Loc[Cmp[i]].<span class="built_in">size</span>()</span><br><span class="line">            &amp;&amp; Loc[Cmp[i]][Lmp[i] + res] &lt;= y) res++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, R[r]+<span class="number">1</span>, y+<span class="number">1</span>) </span><br><span class="line">        <span class="keyword">while</span>(Lmp[i] - res &gt;= <span class="number">0</span> </span><br><span class="line">            &amp;&amp; Loc[Cmp[i]][Lmp[i] - res] &gt;= x) res++;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 分块 </tag>
            
            <tag> 众数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CH6201走廊泼水节</title>
      <link href="/2021/09/06/CH6201%E8%B5%B0%E5%BB%8A%E6%B3%BC%E6%B0%B4%E8%8A%82/"/>
      <url>/2021/09/06/CH6201%E8%B5%B0%E5%BB%8A%E6%B3%BC%E6%B0%B4%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h3 id="CH6201"><a href="#CH6201" class="headerlink" title="CH6201"></a><a href="https://www.acwing.com/problem/content/description/348/">CH6201</a></h3><h3 id="不想写了"><a href="#不想写了" class="headerlink" title="不想写了"></a>不想写了</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MB=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> buf[MB+<span class="number">100</span>],*p,*e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==e) p=buf,e=buf+<span class="built_in">fread</span>(buf,<span class="number">1</span>,MB,stdin);</span><br><span class="line"><span class="keyword">return</span> p==e?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">6e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span> </span><br><span class="line">    <span class="keyword">int</span> u, v, val; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Edge x, Edge y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.val &lt; y.val; &#125;</span><br><span class="line">    </span><br><span class="line">&#125; E[MAXN*MAXN];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Fa[MAXN], Size[MAXN];</span><br><span class="line"><span class="keyword">int</span> t, n, ans, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    IN &gt;&gt; t;</span><br><span class="line">    <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">        <span class="built_in">Init</span>();</span><br><span class="line">        IN &gt;&gt; n; m = n - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">IOR</span>(i, <span class="number">0</span>, m) &#123;</span><br><span class="line">            <span class="keyword">int</span> u, v, val; </span><br><span class="line">            IN &gt;&gt; u &gt;&gt; v &gt;&gt; val;</span><br><span class="line">            E[i] = &#123; u, v, val &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(E, E+m);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">IOR</span>(i, <span class="number">0</span>, m) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = <span class="built_in">Find</span>(E[i].u), y = <span class="built_in">Find</span>(E[i].v);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Find</span>(x) == <span class="built_in">Find</span>(y)) <span class="keyword">continue</span>;</span><br><span class="line">            ans += (E[i].val + <span class="number">1</span>) * (Size[x] * Size[y] - <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">Union</span>(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; ans &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, MAXN) </span><br><span class="line">        Fa[i] = i, Size[i] = <span class="number">1</span>;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> xFa = <span class="built_in">Find</span>(x), yFa = <span class="built_in">Find</span>(y);</span><br><span class="line">    Size[xFa] += Size[yFa]; Fa[yFa] = xFa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Fa[x] = (Fa[x] == x) ? x : <span class="built_in">Find</span>(Fa[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ_The_Luckiest_Number</title>
      <link href="/2021/09/05/POJ3696_The_Luckiest_Number/"/>
      <url>/2021/09/05/POJ3696_The_Luckiest_Number/</url>
      
        <content type="html"><![CDATA[<p><a href="http://poj.org/problem?id=3696">POJ_The_Luckiest_Number</a></p><h3 id="考虑用8构成的数可以表示为-8-10-x-1-9-的形式-问题转化为求最小的-x-满足-L-8-10-x-1-9"><a href="#考虑用8构成的数可以表示为-8-10-x-1-9-的形式-问题转化为求最小的-x-满足-L-8-10-x-1-9" class="headerlink" title="考虑用8构成的数可以表示为$8(10^x - 1)/9$ 的形式, 问题转化为求最小的$x$ 满足$L | 8(10^x - 1) / 9$"></a>考虑用8构成的数可以表示为$8(10^x - 1)/9$ 的形式, 问题转化为求最小的$x$ 满足$L | 8(10^x - 1) / 9$</h3><h3 id="设-d-gcd-L-8"><a href="#设-d-gcd-L-8" class="headerlink" title="设$d = gcd(L, 8)$"></a>设$d = gcd(L, 8)$</h3><h3 id="L-10-x-1-9-Leftrightarrow-frac-9L-d-10-x-1-Leftrightarrow-10-x-equiv-1-pmod-frac-9L-d"><a href="#L-10-x-1-9-Leftrightarrow-frac-9L-d-10-x-1-Leftrightarrow-10-x-equiv-1-pmod-frac-9L-d" class="headerlink" title="$L | (10^x - 1) / 9 \Leftrightarrow \frac{9L}{d} | 10^x - 1 \Leftrightarrow 10^x \equiv 1 \pmod{\frac{9L}{d}}$"></a>$L | (10^x - 1) / 9 \Leftrightarrow \frac{9L}{d} | 10^x - 1 \Leftrightarrow 10^x \equiv 1 \pmod{\frac{9L}{d}}$</h3><h3 id="引理-forall-a-n-in-N-gcd-a-n-1-满足-a-x-equiv-1-pmod-n-的最小正整数-x-0-是-phi-n-的约数"><a href="#引理-forall-a-n-in-N-gcd-a-n-1-满足-a-x-equiv-1-pmod-n-的最小正整数-x-0-是-phi-n-的约数" class="headerlink" title="引理: $\forall a,n\in N^*,; gcd(a, n) = 1$, 满足$a^x \equiv 1 \pmod{n}$的最小正整数$x_0$ 是 $\phi(n)$的约数"></a>引理: $\forall a,n\in N^*,; gcd(a, n) = 1$, 满足$a^x \equiv 1 \pmod{n}$的最小正整数$x_0$ 是 $\phi(n)$的约数</h3><h3 id="证明-反证法-设-x-0-不能整除-phi-n"><a href="#证明-反证法-设-x-0-不能整除-phi-n" class="headerlink" title="证明: 反证法, 设$x_0$不能整除$\phi(n)$"></a>证明: 反证法, 设$x_0$不能整除$\phi(n)$</h3><h3 id="设-phi-n-qx-0-r-0-lt-r-lt-x-0-因为-a-x-0-equiv-1-pmod-n-所以-a-qx-0-equiv-1-pmod-n-因为欧拉定理-有-a-r-equiv-1-pmod-n-0-lt-r-lt-x-0-与-x-0-最小矛盾"><a href="#设-phi-n-qx-0-r-0-lt-r-lt-x-0-因为-a-x-0-equiv-1-pmod-n-所以-a-qx-0-equiv-1-pmod-n-因为欧拉定理-有-a-r-equiv-1-pmod-n-0-lt-r-lt-x-0-与-x-0-最小矛盾" class="headerlink" title="设$\phi(n) = qx_0 + r ;(0 &lt; r &lt; x_0)$, 因为$a^x_0 \equiv 1 \pmod{n}$, 所以$a^{qx_0} \equiv 1 \pmod{n}$, 因为欧拉定理, 有$a^r \equiv 1 \pmod{n}$, $0 &lt; r &lt; x_0$ 与$x_0$最小矛盾"></a>设$\phi(n) = qx_0 + r ;(0 &lt; r &lt; x_0)$, 因为$a^x_0 \equiv 1 \pmod{n}$, 所以$a^{qx_0} \equiv 1 \pmod{n}$, 因为欧拉定理, 有$a^r \equiv 1 \pmod{n}$, $0 &lt; r &lt; x_0$ 与$x_0$最小矛盾</h3><h3 id="所以-枚举-phi-9L-9-的约数求解"><a href="#所以-枚举-phi-9L-9-的约数求解" class="headerlink" title="所以, 枚举$\phi(9L/9)$的约数求解"></a>所以, 枚举$\phi(9L/9)$的约数求解</h3><h3 id="O-sqrt-L-log-L"><a href="#O-sqrt-L-log-L" class="headerlink" title="$O(\sqrt{L}\log{L})$"></a>$O(\sqrt{L}\log{L})$</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MB=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> buf[MB+<span class="number">100</span>],*p,*e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==e) p=buf,e=buf+<span class="built_in">fread</span>(buf,<span class="number">1</span>,MB,stdin);</span><br><span class="line"><span class="keyword">return</span> p==e?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> e, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Phi</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Mul</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, idx = <span class="number">1</span>;</span><br><span class="line">    IN &gt;&gt; x;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(x) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">9</span> * x / <span class="built_in">Gcd</span>(x, <span class="number">8</span>), phi = <span class="built_in">Phi</span>(mod), sq = <span class="built_in">sqrt</span>(phi);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(<span class="built_in">Gcd</span>(mod, <span class="number">10</span>) != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Case %llu: %d\n&quot;</span>, idx++, <span class="number">0</span>);</span><br><span class="line">            IN &gt;&gt; x;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        priority_queue&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>, vector&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&gt;, greater&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>&gt; &gt; Fac;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">1</span>; i &lt;= sq; i++)</span><br><span class="line">            <span class="keyword">if</span>(!(phi % i)) Fac.<span class="built_in">push</span>(i), Fac.<span class="built_in">push</span>(phi / i);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(Fac.<span class="built_in">size</span>()) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t = Fac.<span class="built_in">top</span>(); Fac.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">Qp</span>(<span class="number">10</span>, t, mod) == <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Case %llu: %llu\n&quot;</span>, idx++, t);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        IN &gt;&gt; x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Phi</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> res = x, sq = <span class="built_in">sqrt</span>(x) + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">2</span>, sq)</span><br><span class="line">        <span class="keyword">if</span>(!(x % i)) &#123;</span><br><span class="line">            res = res / i * (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span>(!(x % i)) x /= i;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">1</span>) res = res / x * (x - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Gcd</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> y ? <span class="built_in">Gcd</span>(y, x % y) : x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Qp</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> e, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!e) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="built_in">Qp</span>(x, e / <span class="number">2</span>, mod) % mod;</span><br><span class="line">    <span class="keyword">return</span> e % <span class="number">2</span> ? <span class="built_in">Mul</span>(<span class="built_in">Mul</span>(res, res, mod), x, mod) : <span class="built_in">Mul</span>(res, res, mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Mul</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> y, <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(y == <span class="number">1</span>) <span class="keyword">return</span> x;</span><br><span class="line"><span class="comment">//    if(y == 0) return 0;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="built_in">Mul</span>(x, y / <span class="number">2</span>, mod) % mod;</span><br><span class="line">    <span class="keyword">return</span> y % <span class="number">2</span> ? (res * <span class="number">2</span> + x) % mod : res * <span class="number">2</span> % mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
            <tag> 同余 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG3402可持久化并查集</title>
      <link href="/2021/08/22/LG3402%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2021/08/22/LG3402%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%96%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h3 id="LG3402"><a href="#LG3402" class="headerlink" title="LG3402"></a><a href="https://www.luogu.com.cn/problem/P3402">LG3402</a></h3><h3 id="注意按秩合并"><a href="#注意按秩合并" class="headerlink" title="注意按秩合并"></a>注意按秩合并</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) Tr[x].lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) Tr[x].rc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span> </span><br><span class="line">    <span class="keyword">int</span> lc, rc, val, size;</span><br><span class="line">    <span class="built_in">Seg</span>() &#123; lc = rc = val = size = <span class="number">0</span>; &#125; </span><br><span class="line">&#125; Tr[MAXN * <span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> Rt[MAXN * <span class="number">40</span>], idx = MAXN;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"><span class="function">Seg* <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function">Seg* <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Copy</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </span><br><span class="line">    Tr[++idx] = Tr[x]; <span class="keyword">return</span> idx; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ver)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindFa</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ver)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">Init</span>(Rt[<span class="number">0</span>], <span class="number">1</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, m+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, a, b;</span><br><span class="line">        IN &gt;&gt; opt;</span><br><span class="line">        Rt[i] = Rt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: IN &gt;&gt; a &gt;&gt; b; <span class="built_in">Union</span>(a, b, i); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: IN &gt;&gt; k; Rt[i] = Rt[k]; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> : IN &gt;&gt; a &gt;&gt; b; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">FindFa</span>(a, i) == <span class="built_in">FindFa</span>(b, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sx = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, x)-&gt;size, sy = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, y)-&gt;size;</span><br><span class="line">    <span class="keyword">if</span>(sx &gt; sy) <span class="built_in">swap</span>(x, y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fy = <span class="built_in">FindFa</span>(y, ver);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Cg</span>(Rt[ver], <span class="number">1</span>, n, <span class="built_in">FindFa</span>(x, ver))-&gt;val = fy;</span><br><span class="line">    <span class="built_in">Cg</span>(Rt[ver], <span class="number">1</span>, n, fy)-&gt;size += sx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindFa</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, x)-&gt;val;</span><br><span class="line">    <span class="keyword">if</span>(fa != x) <span class="keyword">return</span> <span class="built_in">FindFa</span>(fa, ver);</span><br><span class="line">    <span class="keyword">return</span> fa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">Copy</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123; Tr[x].val = l; Tr[x].size = <span class="number">1</span>; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    <span class="built_in">Init</span>(<span class="built_in">LC</span>(x), l, MID); <span class="built_in">Init</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Seg* <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">Copy</span>(x); </span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123; <span class="keyword">return</span> &amp;Tr[x]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= MID) <span class="keyword">return</span> <span class="built_in">Cg</span>(<span class="built_in">LC</span>(x), l, MID, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Cg</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Seg* <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> &amp;Tr[x];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= MID) <span class="keyword">return</span> <span class="built_in">LC</span>(x) ? <span class="built_in">Ask</span>(<span class="built_in">LC</span>(x), l, MID, pos) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">RC</span>(x) ? <span class="built_in">Ask</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r, pos) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 按秩合并 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG3834主席树(区间第k大)</title>
      <link href="/2021/08/22/LG3834%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7/"/>
      <url>/2021/08/22/LG3834%E4%B8%BB%E5%B8%AD%E6%A0%91-%E5%8C%BA%E9%97%B4%E7%AC%ACk%E5%A4%A7/</url>
      
        <content type="html"><![CDATA[<h3 id="LG3834"><a href="#LG3834" class="headerlink" title="LG3834"></a><a href="https://www.luogu.com.cn/problem/P3834">LG3834</a></h3><h3 id="每插一个数建一个新树"><a href="#每插一个数建一个新树" class="headerlink" title="每插一个数建一个新树"></a>每插一个数建一个新树</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//xxr yyds</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LC(x) Tr[x].lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RC(x) Tr[x].rc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span> </span><br><span class="line">    <span class="keyword">int</span> lc, rc, val, size;</span><br><span class="line">    <span class="built_in">Seg</span>() &#123; lc = rc = val = size = <span class="number">0</span>; &#125; </span><br><span class="line">&#125; Tr[MAXN * <span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> Rt[MAXN * <span class="number">40</span>], idx = MAXN;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"><span class="function">Seg* <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function">Seg* <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Copy</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; </span><br><span class="line">    Tr[++idx] = Tr[x]; <span class="keyword">return</span> idx; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, k, tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ver)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindFa</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ver)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    IN &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">Init</span>(Rt[<span class="number">0</span>], <span class="number">1</span>, n);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, m+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt, a, b;</span><br><span class="line">        IN &gt;&gt; opt;</span><br><span class="line">        Rt[i] = Rt[i<span class="number">-1</span>];</span><br><span class="line">        <span class="built_in"><span class="keyword">switch</span></span>(opt) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>: IN &gt;&gt; a &gt;&gt; b; <span class="built_in">Union</span>(a, b, i); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>: IN &gt;&gt; k; Rt[i] = Rt[k]; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span> : IN &gt;&gt; a &gt;&gt; b; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">FindFa</span>(a, i) == <span class="built_in">FindFa</span>(b, i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> ver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fy = <span class="built_in">FindFa</span>(y, ver), fx = <span class="built_in">FindFa</span>(x, ver);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sx = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, fx)-&gt;size, sy = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, fy)-&gt;size;</span><br><span class="line">    <span class="keyword">if</span>(sx &gt; sy) <span class="built_in">swap</span>(fx, fy), <span class="built_in">swap</span>(sx, sy);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Cg</span>(Rt[ver], <span class="number">1</span>, n, fx)-&gt;val = fy;</span><br><span class="line">    <span class="built_in">Cg</span>(Rt[ver], <span class="number">1</span>, n, fy)-&gt;size += sx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">FindFa</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> ver)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa = <span class="built_in">Ask</span>(Rt[ver], <span class="number">1</span>, n, x)-&gt;val;</span><br><span class="line">    <span class="keyword">if</span>(fa != x) <span class="keyword">return</span> <span class="built_in">FindFa</span>(fa, ver);</span><br><span class="line">    <span class="keyword">return</span> fa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">Copy</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123; Tr[x].val = l; Tr[x].size = <span class="number">1</span>; <span class="keyword">return</span> ; &#125;</span><br><span class="line">    <span class="built_in">Init</span>(<span class="built_in">LC</span>(x), l, MID); <span class="built_in">Init</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Seg* <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    x = <span class="built_in">Copy</span>(x); </span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123; <span class="keyword">return</span> &amp;Tr[x]; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= MID) <span class="keyword">return</span> <span class="built_in">Cg</span>(<span class="built_in">LC</span>(x), l, MID, pos);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Cg</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r, pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Seg* <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) <span class="keyword">return</span> &amp;Tr[x];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pos &lt;= MID) <span class="keyword">return</span> <span class="built_in">LC</span>(x) ? <span class="built_in">Ask</span>(<span class="built_in">LC</span>(x), l, MID, pos) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">RC</span>(x) ? <span class="built_in">Ask</span>(<span class="built_in">RC</span>(x), MID+<span class="number">1</span>, r, pos) : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> 可持久化数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG4178Tree</title>
      <link href="/2021/08/22/LG4178Tree/"/>
      <url>/2021/08/22/LG4178Tree/</url>
      
        <content type="html"><![CDATA[<h3 id="LG4178"><a href="#LG4178" class="headerlink" title="LG4178"></a><a href="https://www.luogu.com.cn/problem/P4178">LG4178</a></h3><h3 id="点分治流程"><a href="#点分治流程" class="headerlink" title="点分治流程"></a>点分治流程</h3><ul><li>找出当前树的重心 rt (Cog 函数)</li><li>求出每个子节点距根的距离 Dep[], 在根的哪一颗子树中 Fa[], (Pre()函数)</li><li>累加答案(Calc函数)<ul><li>两种Calc:</li></ul><ol><li>顺次统计每一颗子树, 用线段树或者平衡树维护每一个值的点的个数</li><li>所有点按距离排序, 指针l, r扫描, 每次累加时减去根相同的点</li></ol></li><li>删除 rt, 对于 原rt的每个子树执行 1 </li></ul><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节:"></a>一些细节:</h3><ul><li>Calc2:<ul><li>rt 也包括在”所有点”中 </li><li>Fa[rt] = rt</li><li>res += r - l + 1 - Cnt[Fa[A[l].pos]]</li><li>执行 Cog时size要取对应的子树的大小</li></ul></li><li>Vis标记删去(即执行过分治)的点</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MB=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> buf[MB+<span class="number">100</span>],*p,*e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==e) p=buf,e=buf+<span class="built_in">fread</span>(buf,<span class="number">1</span>,MB,stdin);</span><br><span class="line"><span class="keyword">return</span> p==e?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXM = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">int</span> to, next, val; &#125; E[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> Head[MAXN], idx;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> _to, <span class="keyword">int</span> _val)</span> </span>&#123;</span><br><span class="line">    E[++idx] = &#123; _to, Head[pre], _val &#125;; Head[pre] = idx; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Size[MAXN], mxw = INF;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cog</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> last, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> val;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(Node x, Node y) &#123; <span class="keyword">return</span> x.val &lt; y.val; &#125;</span><br><span class="line">&#125;A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans;</span><br><span class="line"><span class="keyword">int</span> Dep[MAXN], Cnt[MAXN], Fa[MAXN];</span><br><span class="line"><span class="keyword">bool</span> Vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, rt, cnt, k;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wk</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> now, <span class="keyword">int</span> last, <span class="keyword">long</span> <span class="keyword">long</span> dis)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    IN &gt;&gt; n;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">0</span>, n<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> u, v, w; IN &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line">        <span class="built_in">Add</span>(u, v, w); <span class="built_in">Add</span>(v, u, w);</span><br><span class="line">    &#125;</span><br><span class="line">    IN &gt;&gt; k;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Cog</span>(<span class="number">1</span>, <span class="number">-1</span>, n);</span><br><span class="line">    <span class="built_in">Wk</span>(rt, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cog</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> last, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> w = <span class="number">0</span>;</span><br><span class="line">    Size[now] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">EOR</span>(i, now) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">T</span>(i) == last || Vis[<span class="built_in">T</span>(i)]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Cog</span>(<span class="built_in">T</span>(i), now, size);</span><br><span class="line">        Size[now] += Size[<span class="built_in">T</span>(i)];</span><br><span class="line">        w = <span class="built_in">max</span>(w, Size[<span class="built_in">T</span>(i)]);</span><br><span class="line">    &#125;</span><br><span class="line">    w = <span class="built_in">max</span>(w, size - Size[now]);</span><br><span class="line">    <span class="keyword">if</span>(w &lt; mxw) rt = now, mxw = w;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wk</span><span class="params">(<span class="keyword">int</span> now, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>; Vis[now] = <span class="number">1</span>; </span><br><span class="line">    <span class="built_in">memset</span>(Cnt, <span class="number">0</span>, <span class="keyword">sizeof</span> Cnt);</span><br><span class="line">    <span class="built_in">EOR</span>(i, now) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">T</span>(i) == last || Vis[<span class="built_in">T</span>(i)]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Pre</span>(<span class="built_in">T</span>(i), <span class="built_in">T</span>(i), now, <span class="built_in">V</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        printf(&quot;--------------\n&quot;);</span></span><br><span class="line"><span class="comment">//        printf(&quot;!!%d!!\n&quot;, rt);</span></span><br><span class="line"><span class="comment">//        IOR(i, 1, n+1) printf(&quot;%d &quot;, Fa[i]);</span></span><br><span class="line"><span class="comment">//        printf(&quot;\n--------------\n&quot;);</span></span><br><span class="line"></span><br><span class="line">    A[cnt++] = &#123; now, <span class="number">0</span> &#125;; Dep[now] = <span class="number">0</span>; Fa[now] = now; Cnt[now]++;</span><br><span class="line">    ans += <span class="built_in">Calc</span>(now);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">EOR</span>(i, now) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">T</span>(i) == last || Vis[<span class="built_in">T</span>(i)]) <span class="keyword">continue</span>;</span><br><span class="line">        mxw = INF;</span><br><span class="line">        <span class="built_in">Cog</span>(<span class="built_in">T</span>(i), now, Size[<span class="built_in">T</span>(i)]);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">Wk</span>(rt, now);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> now, <span class="keyword">int</span> last, <span class="keyword">long</span> <span class="keyword">long</span> dis)</span> </span>&#123;</span><br><span class="line">    Dep[now] = dis; Fa[now] = rt;</span><br><span class="line">    <span class="built_in">EOR</span>(i, now) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">T</span>(i) == last || Vis[<span class="built_in">T</span>(i)]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">Pre</span>(rt, <span class="built_in">T</span>(i), now, dis + <span class="built_in">V</span>(i));</span><br><span class="line">    &#125;</span><br><span class="line">    A[cnt++] = &#123; now, dis &#125;; Cnt[Fa[now]]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = cnt<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(A, A+cnt);</span><br><span class="line"><span class="comment">//    printf(&quot;\n--------------\n&quot;);</span></span><br><span class="line"><span class="comment">//    printf(&quot;%d\n&quot;, x);</span></span><br><span class="line"><span class="comment">//    IOR(i, 0, cnt) printf(&quot;%d &quot;, A[i].pos); </span></span><br><span class="line"><span class="comment">//    printf(&quot;\n--------------\n&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">while</span>(A[r].val + A[l].val &gt; k &amp;&amp; l &lt; r) r--, Cnt[Fa[A[r+<span class="number">1</span>].pos]]--;</span><br><span class="line">        res += (r - l - Cnt[Fa[A[l].pos]] + <span class="number">1</span>);</span><br><span class="line">        l++; Cnt[Fa[A[l<span class="number">-1</span>].pos]]--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 模板 </tag>
            
            <tag> 点分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG4168[Violet]蒲公英</title>
      <link href="/2021/08/21/LG4168%5BViolet%5D%E8%92%B2%E5%85%AC%E8%8B%B1/"/>
      <url>/2021/08/21/LG4168%5BViolet%5D%E8%92%B2%E5%85%AC%E8%8B%B1/</url>
      
        <content type="html"><![CDATA[<h3 id="LG4168-Violet-蒲公英"><a href="#LG4168-Violet-蒲公英" class="headerlink" title="LG4168[Violet]蒲公英"></a><a href="https://www.luogu.com.cn/problem/P4168">LG4168[Violet]蒲公英</a></h3><h2 id="21-10-14-Update"><a href="#21-10-14-Update" class="headerlink" title="21.10.14 Update"></a>21.10.14 Update</h2><h3 id="解法复杂度假的-数据过水-正解右转-LG5048-Ynoi2019模拟赛-Yuno-loves-sqrt-technology-III"><a href="#解法复杂度假的-数据过水-正解右转-LG5048-Ynoi2019模拟赛-Yuno-loves-sqrt-technology-III" class="headerlink" title="解法复杂度假的, 数据过水, 正解右转 LG5048[Ynoi2019模拟赛]Yuno loves sqrt technology III"></a>解法复杂度假的, 数据过水, 正解右转 <a href="https://www.luogu.com.cn/problem/P4168">LG5048[Ynoi2019模拟赛]Yuno loves sqrt technology III</a></h3><h3 id="分块-前缀和"><a href="#分块-前缀和" class="headerlink" title="分块+前缀和"></a>分块+前缀和</h3><h3 id="块长-sqrt-3-n-比较快-sqrt-n-也能过"><a href="#块长-sqrt-3-n-比较快-sqrt-n-也能过" class="headerlink" title="块长$\sqrt[3]{n}$比较快, $\sqrt{n}$也能过"></a>块长$\sqrt[3]{n}$比较快, $\sqrt{n}$也能过</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(x, y, z) for(int x = y; x &lt; z; x++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(x, y, z) for(int x = y; x &gt; z; x--)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MB=<span class="number">1</span>&lt;&lt;<span class="number">21</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> buf[MB+<span class="number">100</span>],*p,*e;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getChar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==e) p=buf,e=buf+<span class="built_in">fread</span>(buf,<span class="number">1</span>,MB,stdin);</span><br><span class="line"><span class="keyword">return</span> p==e?EOF:*p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getChar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) (Turn(A[x]))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">4e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXK = <span class="number">4e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], B[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line"><span class="keyword">int</span> Cnt[MAXK][MAXN], L[MAXN], R[MAXN], Pos[MAXN], Qcnt[MAXK][MAXN];</span><br><span class="line"><span class="keyword">int</span> idx, n, m, len, num;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Turn</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL </span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    IN &gt;&gt; n &gt;&gt; m; len = <span class="built_in">pow</span>(n, <span class="number">1.0</span> / <span class="number">3.0</span>);</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) IN &gt;&gt; A[i], B[i] = A[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(B+<span class="number">1</span>, B+n+<span class="number">1</span>);</span><br><span class="line">    idx = <span class="built_in">unique</span>(B+<span class="number">1</span>, B+n+<span class="number">1</span>) - B - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r; IN &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        l = (l + x - <span class="number">1</span>) % n + <span class="number">1</span>, r = (r + x - <span class="number">1</span>) % n + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &gt; r) <span class="built_in">swap</span>(l, r);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, x = <span class="built_in">Ask</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Turn</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(B+<span class="number">1</span>, B+idx+<span class="number">1</span>, x) - B; &#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    num = n / len;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) </span><br><span class="line">        L[i] = (i<span class="number">-1</span>) * len + <span class="number">1</span>,</span><br><span class="line">        R[i] = i * len;</span><br><span class="line">    <span class="keyword">if</span>(R[n/len] &lt; n) L[++num] = R[n/len]+<span class="number">1</span>, R[num] = n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) <span class="built_in">IOR</span>(v, L[i], R[i] + <span class="number">1</span>) </span><br><span class="line">        Pos[v] = i, Cnt[i][<span class="built_in">V</span>(v)]++;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, num+<span class="number">1</span>) <span class="built_in">IOR</span>(v, <span class="number">1</span>, idx+<span class="number">1</span>) </span><br><span class="line">        Qcnt[i][v] = Qcnt[i<span class="number">-1</span>][v] + Cnt[i][v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Tcnt[MAXN]; <span class="built_in">memset</span>(Tcnt, <span class="number">0</span>, (idx+<span class="number">1</span>) * <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">int</span> p = Pos[l], q = Pos[r];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(p == q) </span><br><span class="line">        <span class="built_in">IOR</span>(i, l, r+<span class="number">1</span>) Tcnt[<span class="built_in">V</span>(i)]++;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">IOR</span>(v, <span class="number">1</span>, idx+<span class="number">1</span>)</span><br><span class="line">            Tcnt[v] = Qcnt[q<span class="number">-1</span>][v] - Qcnt[p][v], </span><br><span class="line">            Tcnt[v] = Tcnt[v] &gt;= <span class="number">0</span> ? Tcnt[v] : <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">IOR</span>(i, l, R[p]+<span class="number">1</span>) Tcnt[<span class="built_in">V</span>(i)]++;</span><br><span class="line">        <span class="built_in">IOR</span>(i, L[q], r+<span class="number">1</span>) Tcnt[<span class="built_in">V</span>(i)]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mx = <span class="number">0</span>, res = INF;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, idx+<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Tcnt[i] &gt; mx) mx = Tcnt[i], res = B[i];                                                                                                       </span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(Tcnt[i] == mx) res = <span class="built_in">min</span>(res, B[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ3468</title>
      <link href="/2021/08/21/POJ3468/"/>
      <url>/2021/08/21/POJ3468/</url>
      
        <content type="html"><![CDATA[<h3 id="POJ3468"><a href="#POJ3468" class="headerlink" title="POJ3468"></a><a href="http://poj.org/problem?id=3468">POJ3468</a></h3><h3 id="分块模版"><a href="#分块模版" class="headerlink" title="分块模版"></a>分块模版</h3><h3 id="分块的步骤"><a href="#分块的步骤" class="headerlink" title="分块的步骤:"></a>分块的步骤:</h3><ul><li>预处理: <ul><li>每个块的端点$L[MAXK], R[MAXK]$ </li><li>每个位置对应的块 $Pos[MAXN]$</li><li>每个块内的信息(这道题是区间和$Q[MAXK]$,和加标记$Add[MAXK]$)</li></ul></li><li>修改:<ul><li>当整个区间位于一个块内, 暴力处理</li><li>否则, 直接修改每个整块, 暴力处理左右端点的零散部分</li></ul></li><li>查询同修改</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ZERO(x) memset(x, 0, sizeof x);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], Q[MAXN], Add[MAXN];</span><br><span class="line"><span class="keyword">int</span> L[MAXN], R[MAXN], Pos[MAXN];</span><br><span class="line"><span class="keyword">int</span> n, k, q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;q); k = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;A[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Pre</span>();</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">char</span> opt = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="string">&#x27;C&#x27;</span>) </span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%lld&quot;</span>, &amp;l, &amp;r, &amp;x),</span><br><span class="line">            <span class="built_in">Change</span>(l, r, x);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;l, &amp;r),</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">Ask</span>(l, r));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, k+<span class="number">1</span>) </span><br><span class="line">        L[i] = (i - <span class="number">1</span>) * k + <span class="number">1</span>,</span><br><span class="line">        R[i] = i * k;</span><br><span class="line">    <span class="keyword">if</span>(R[k] &lt; n) k++, L[k] = R[k<span class="number">-1</span>] + <span class="number">1</span>, R[k] = n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, <span class="number">1</span>, k+<span class="number">1</span>) </span><br><span class="line">        <span class="built_in">IOR</span>(v, L[i], R[i] + <span class="number">1</span>) Q[i] += A[v], Pos[v] = i; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Change</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = Pos[l], q = Pos[r];</span><br><span class="line">    <span class="keyword">if</span>(p == q) &#123;</span><br><span class="line">        <span class="built_in">IOR</span>(i, l, r+<span class="number">1</span>) A[i] += x;</span><br><span class="line">        Q[p] += (r - l + <span class="number">1</span>) * x;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, p+<span class="number">1</span>, q) Add[i] += x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, l, R[p]+<span class="number">1</span>) A[i] += x;</span><br><span class="line">    Q[p] += (R[p] - l + <span class="number">1</span>) * x;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, L[q], r+<span class="number">1</span>) A[i] += x;</span><br><span class="line">    Q[q] += (r - L[q] + <span class="number">1</span>) * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> p = Pos[l], q = Pos[r];</span><br><span class="line">    <span class="keyword">if</span>(p == q) &#123;</span><br><span class="line">        <span class="built_in">IOR</span>(i, l, r+<span class="number">1</span>) res += A[i];</span><br><span class="line">        res += (r - l + <span class="number">1</span>) * Add[p];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, p+<span class="number">1</span>, q) res += Q[i] + (R[i] - L[i] + <span class="number">1</span>) * Add[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, l, R[p]+<span class="number">1</span>) res += A[i];</span><br><span class="line">    res += Add[p] * (R[p] - l + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">IOR</span>(i, L[q], r+<span class="number">1</span>) res += A[i];</span><br><span class="line">    res += Add[q] * (r - L[q] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 分块 </tag>
            
            <tag> 模版 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LG4644 Cleaning Shifts S</title>
      <link href="/2021/08/21/LG4644/"/>
      <url>/2021/08/21/LG4644/</url>
      
        <content type="html"><![CDATA[<h3 id="LG4644"><a href="#LG4644" class="headerlink" title="LG4644"></a><a href="https://www.luogu.com.cn/problem/P4644">LG4644</a></h3><h3 id="解"><a href="#解" class="headerlink" title="解"></a>解</h3><ul><li><h4 id="状态-F-x-起点到-x-的最小花费"><a href="#状态-F-x-起点到-x-的最小花费" class="headerlink" title="状态: $F_x$ 起点到$x$的最小花费"></a>状态: $F_x$ 起点到$x$的最小花费</h4></li><li><h4 id="转移-F-i-min-limits-l-i-1-le-k-le-r-i-1-F-k-C-i"><a href="#转移-F-i-min-limits-l-i-1-le-k-le-r-i-1-F-k-C-i" class="headerlink" title="转移: $F_i = min\limits_{l_i-1 \le k \le r_i-1} {F_k} + C_i$"></a>转移: $F_i = min\limits_{l_i-1 \le k \le r_i-1} {F_k} + C_i$</h4></li><li><h4 id="边界-F-start-1-0-其余为负无穷"><a href="#边界-F-start-1-0-其余为负无穷" class="headerlink" title="边界: $F_{start-1} = 0$, 其余为负无穷"></a>边界: $F_{start-1} = 0$, 其余为负无穷</h4></li><li><h4 id="线段树维护单点修改区间最小值"><a href="#线段树维护单点修改区间最小值" class="headerlink" title="线段树维护单点修改区间最小值"></a>线段树维护单点修改区间最小值</h4></li></ul><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><h4 id="右端点可能重复"><a href="#右端点可能重复" class="headerlink" title="右端点可能重复"></a>右端点可能重复</h4></li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _N = <span class="number">2e5</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> _V = <span class="number">1e6</span> + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Seg</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> lc, rc, val;</span><br><span class="line"><span class="built_in">Seg</span>(<span class="keyword">int</span> _lc = <span class="number">0</span>, <span class="keyword">int</span> _rc = <span class="number">0</span>, <span class="keyword">int</span> _val = INF) &#123;</span><br><span class="line">lc = _lc, rc = _rc, val = _val;</span><br><span class="line">&#125;</span><br><span class="line">&#125; Tr[_V &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> rt = <span class="number">1</span>, idx = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> r = _V, <span class="keyword">int</span> x = rt)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> k, <span class="keyword">int</span> l = <span class="number">0</span>, <span class="keyword">int</span> r = _V, <span class="keyword">int</span> &amp;x = rt)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MID ((l + r) &gt;&gt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> L(x) Tr[x].lc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> R(x) Tr[x].rc</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) Tr[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Cow</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> l, r, val;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> Cow &amp;x, <span class="keyword">const</span> Cow &amp;y) &#123;</span><br><span class="line"><span class="keyword">return</span> x.r &lt; y.r;</span><br><span class="line">&#125;</span><br><span class="line">&#125; C[_N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> F[_V];</span><br><span class="line"><span class="keyword">int</span> n, ans = INF, st, ed;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="comment">//freopen(&quot;I:\\Code\\In.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\Data\\1672\\8.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">Tr[<span class="number">0</span>].val = INF;</span><br><span class="line">IN &gt;&gt; n &gt;&gt; st &gt;&gt; ed;</span><br><span class="line">st++, ed++;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, n) </span><br><span class="line">IN &gt;&gt; C[i].l &gt;&gt; C[i].r &gt;&gt; C[i].val, </span><br><span class="line">C[i].l++, C[i].r++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(C, C+n);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(F, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> F);</span><br><span class="line">F[st<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">Cg</span>(st<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, n) &#123;</span><br><span class="line"><span class="keyword">int</span> tmp = <span class="built_in">Ask</span>(C[i].l<span class="number">-1</span>, C[i].r<span class="number">-1</span>) + C[i].val;</span><br><span class="line"><span class="keyword">if</span>(tmp &lt; F[C[i].r]) &#123;</span><br><span class="line">F[C[i].r] = tmp;</span><br><span class="line"><span class="built_in">Cg</span>(C[i].r, tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">IOR</span>(i, ed, _V) </span><br><span class="line">ans = <span class="built_in">min</span>(ans, F[i]);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; (ans != INF ? ans : <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Cg</span><span class="params">(<span class="keyword">int</span> pos, <span class="keyword">int</span> k, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) x = <span class="built_in">New</span>();</span><br><span class="line"><span class="keyword">if</span>(l == r) &#123; <span class="built_in">V</span>(x) = k; <span class="keyword">return</span> ; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pos &lt;= MID) <span class="built_in">Cg</span>(pos, k, l, MID, <span class="built_in">L</span>(x));</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Cg</span>(pos, k, MID+<span class="number">1</span>, r, <span class="built_in">R</span>(x));</span><br><span class="line"></span><br><span class="line"><span class="built_in">Up</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Ask</span><span class="params">(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span> INF;</span><br><span class="line"><span class="keyword">if</span>(l &gt;= L &amp;&amp; R &gt;= r) <span class="keyword">return</span> <span class="built_in">V</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> res = INF;</span><br><span class="line"><span class="keyword">if</span>(L &lt;= MID) res = <span class="built_in">min</span>(res, <span class="built_in">Ask</span>(L, R, l, MID, <span class="built_in">L</span>(x)));</span><br><span class="line"><span class="keyword">if</span>(R &gt; MID) res = <span class="built_in">min</span>(res, <span class="built_in">Ask</span>(L, R, MID+<span class="number">1</span>, r, <span class="built_in">R</span>(x)));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">New</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ++idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">V</span>(x) = <span class="built_in">min</span>(<span class="built_in">V</span>(<span class="built_in">L</span>(x)), <span class="built_in">V</span>(<span class="built_in">R</span>(x)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 线段树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POJ3585</title>
      <link href="/2021/08/21/POJ3585/"/>
      <url>/2021/08/21/POJ3585/</url>
      
        <content type="html"><![CDATA[<h3 id="POJ3585"><a href="#POJ3585" class="headerlink" title="POJ3585"></a><a href="http://poj.org/problem?id=3585">POJ3585</a></h3><h3 id="状态"><a href="#状态" class="headerlink" title="状态:"></a>状态:</h3><ul><li><h4 id="P-x-表示以1为根时点x的最大流量"><a href="#P-x-表示以1为根时点x的最大流量" class="headerlink" title="P[x] 表示以1为根时点x的最大流量"></a>P[x] 表示以1为根时点x的最大流量</h4></li><li><h4 id="F-x-表示以x为根时点x的最大流量"><a href="#F-x-表示以x为根时点x的最大流量" class="headerlink" title="F[x] 表示以x为根时点x的最大流量"></a>F[x] 表示以x为根时点x的最大流量</h4></li></ul><h3 id="转移"><a href="#转移" class="headerlink" title="转移:"></a>转移:</h3><ul><li>对于P, 自底向上<br>不想写了</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//#include&lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IOR(i, st, ed) for(int i = st; i &lt; ed; i++)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOR(i, st, ed) for(int i = st; i &gt; ed; i--)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EOR(i, x) for(int i = Head[x]; i; i = E[i].next)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> T(x) E[x].to</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> V(x) E[x].val</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FastIN</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">FastIN&amp; <span class="keyword">operator</span>&gt;&gt;(T&amp; x)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> c,l;</span><br><span class="line"><span class="keyword">for</span>(c=<span class="number">0</span>;!<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())l=c;</span><br><span class="line"><span class="keyword">for</span>(x=<span class="number">0</span>;<span class="built_in">isdigit</span>(c);c=<span class="built_in">getchar</span>())x=x*<span class="number">10</span>-<span class="string">&#x27;0&#x27;</span>+c;</span><br><span class="line"><span class="keyword">if</span>(l==<span class="string">&#x27;-&#x27;</span>)x=-x;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;IN;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> next, to, val;</span><br><span class="line"><span class="built_in">Edge</span>(<span class="keyword">int</span> _next  = <span class="number">0</span>, <span class="keyword">int</span> _to = <span class="number">0</span>, <span class="keyword">int</span> _val = <span class="number">0</span>) &#123;</span><br><span class="line">next = _next; to = _to; val = _val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;E[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> Head[MAXN];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">E[++cnt] = <span class="built_in">Edge</span>(Head[from], to, val);</span><br><span class="line">Head[from] = cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">int</span> P[MAXN], F[MAXN], Deg[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wk</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123; <span class="comment">/**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;I:\\Code\\Out.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">IN &gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line"><span class="keyword">int</span> n; IN &gt;&gt; n;</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, n) &#123;</span><br><span class="line"><span class="keyword">int</span> u, v, w; IN &gt;&gt; u &gt;&gt; v &gt;&gt; w;</span><br><span class="line"><span class="built_in">Add</span>(u, v, w); <span class="built_in">Add</span>(v, u, w);</span><br><span class="line">Deg[u]++; Deg[v]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Pre</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">F[<span class="number">1</span>] = P[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">Wk</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">1</span>, n+<span class="number">1</span>) F[<span class="number">1</span>] = <span class="built_in">max</span>(F[<span class="number">1</span>], F[i]);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; F[<span class="number">1</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/**/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(F, <span class="number">0</span>, <span class="keyword">sizeof</span> F);</span><br><span class="line"><span class="built_in">memset</span>(P, <span class="number">0</span>, <span class="keyword">sizeof</span> P);</span><br><span class="line"><span class="built_in">memset</span>(Head, <span class="number">0</span>, <span class="keyword">sizeof</span> Head);</span><br><span class="line"><span class="built_in">memset</span>(Deg, <span class="number">0</span>, <span class="keyword">sizeof</span> Deg);</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">IOR</span>(i, <span class="number">0</span>, MAXN&lt;&lt;<span class="number">1</span>) E[i] = <span class="built_in">Edge</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Pre</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line"><span class="built_in">EOR</span>(i, x) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">T</span>(i) == last) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Pre</span>(<span class="built_in">T</span>(i), x);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(E[Head[<span class="built_in">T</span>(i)]].next) </span><br><span class="line">P[x] += <span class="built_in">min</span>(P[<span class="built_in">T</span>(i)], <span class="built_in">V</span>(i));</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">P[x] += <span class="built_in">V</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Wk</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> last)</span> </span>&#123;</span><br><span class="line"><span class="built_in">EOR</span>(i, x) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">T</span>(i) == last) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Deg[x] == <span class="number">1</span>) </span><br><span class="line">F[<span class="built_in">T</span>(i)] = P[<span class="built_in">T</span>(i)] + <span class="built_in">V</span>(i);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Deg[<span class="built_in">T</span>(i)] != <span class="number">1</span>) </span><br><span class="line">F[<span class="built_in">T</span>(i)] = P[<span class="built_in">T</span>(i)] + <span class="built_in">min</span>(F[x] - <span class="built_in">min</span>(P[<span class="built_in">T</span>(i)], <span class="built_in">V</span>(i)), <span class="built_in">V</span>(i));</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">F[<span class="built_in">T</span>(i)] = <span class="built_in">V</span>(i);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Wk</span>(<span class="built_in">T</span>(i), x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> 树形dp </tag>
            
            <tag> 换根 </tag>
            
            <tag> 二次扫描 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CF985F</title>
      <link href="/2021/08/20/CF985F/"/>
      <url>/2021/08/20/CF985F/</url>
      
        <content type="html"><![CDATA[<h3 id="CF985F"><a href="#CF985F" class="headerlink" title="CF985F"></a><a href="https://www.luogu.com.cn/problem/CF985F">CF985F</a></h3><h2 id="每种字母分别哈希，-每次询问取出区间内每一种字母的对应值，排序，比对"><a href="#每种字母分别哈希，-每次询问取出区间内每一种字母的对应值，排序，比对" class="headerlink" title="每种字母分别哈希， 每次询问取出区间内每一种字母的对应值，排序，比对"></a>每种字母分别哈希， 每次询问取出区间内每一种字母的对应值，排序，比对</h2><h2 id="数据可能卡ull自然溢出"><a href="#数据可能卡ull自然溢出" class="headerlink" title="数据可能卡ull自然溢出"></a>数据可能卡ull自然溢出</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> P = <span class="number">13331</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> H[<span class="number">50</span>][MAXN], E[MAXN] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">char</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> LOCAL</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;In.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, A+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) </span><br><span class="line">E[i] = ((E[i<span class="number">-1</span>] % MOD) * P) % MOD;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">26</span>; j++) </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">H[j][i] = (((H[j][i<span class="number">-1</span>] % MOD) * P) % MOD + (A[i] - <span class="string">&#x27;a&#x27;</span> == j)) % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="keyword">int</span> x, a, k;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;x, &amp;a, &amp;k);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> TF[<span class="number">50</span>], TS[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">TF[i] = (H[i][x+k<span class="number">-1</span>] % MOD - ( (H[i][x<span class="number">-1</span>] % MOD) * (E[k] % MOD) % MOD) + MOD) % MOD;  </span><br><span class="line">TS[i] = (H[i][a+k<span class="number">-1</span>] % MOD - ( (H[i][a<span class="number">-1</span>] % MOD) * (E[k] % MOD) % MOD) + MOD) % MOD;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(TF, TF + <span class="number">26</span>); <span class="built_in">sort</span>(TS, TS + <span class="number">26</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) </span><br><span class="line"><span class="keyword">if</span>(TF[i] != TS[i]) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>);</span><br><span class="line">flag = <span class="number">1</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!flag) <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 哈希 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
